/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã EcoTrack
 */

const fs = require('fs');
const path = require('path');

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  reset: '\x1b[0m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function checkFunction(content, functionName) {
  return content.includes(`export async function ${functionName}`) || 
         content.includes(`async function ${functionName}`) ||
         content.includes(`function ${functionName}`);
}

function testLogisticsSystem() {
  log('üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–ò–°–¢–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´ ECOTRACK', 'blue');
  log('=' .repeat(60), 'blue');
  
  let allTestsPassed = true;
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API —Ñ–∞–π–ª
  log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API —Ñ–∞–π–ª–∞...', 'yellow');
  
  const apiPath = path.join(__dirname, 'ecotrack/src/api/api.ts');
  
  if (!fs.existsSync(apiPath)) {
    log('‚ùå API —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!', 'red');
    allTestsPassed = false;
    return;
  }
  
  const apiContent = fs.readFileSync(apiPath, 'utf8');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  const requiredFunctions = [
    'getUsersByRole',
    'createAutomaticLogisticRoutes',
    'createOrder',
    'selectRoute',
    'createLogisticRoute',
    'getLogisticRoutes'
  ];
  
  for (const func of requiredFunctions) {
    if (checkFunction(apiContent, func)) {
      log(`‚úÖ –§—É–Ω–∫—Ü–∏—è ${func} –Ω–∞–π–¥–µ–Ω–∞`, 'green');
    } else {
      log(`‚ùå –§—É–Ω–∫—Ü–∏—è ${func} –ù–ï –ù–ê–ô–î–ï–ù–ê`, 'red');
      allTestsPassed = false;
    }
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–π
  log('\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π...', 'yellow');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ createOrder –≤—ã–∑—ã–≤–∞–µ—Ç createAutomaticLogisticRoutes
  if (apiContent.includes('await createAutomaticLogisticRoutes')) {
    log('‚úÖ createOrder –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å createAutomaticLogisticRoutes', 'green');
  } else {
    log('‚ùå createOrder –ù–ï –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å createAutomaticLogisticRoutes', 'red');
    allTestsPassed = false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ selectRoute –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  if (apiContent.includes('enhancedNotificationService.sendNotificationFromTemplate')) {
    log('‚úÖ selectRoute –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'green');
  } else {
    log('‚ùå selectRoute –ù–ï –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'red');
    allTestsPassed = false;
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  log('\nüìß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...', 'yellow');
  
  const notificationsPath = path.join(__dirname, 'ecotrack/src/utils/enhancedNotifications.ts');
  
  if (fs.existsSync(notificationsPath)) {
    const notificationsContent = fs.readFileSync(notificationsPath, 'utf8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const requiredTemplates = [
      'new-order-for-logistics',
      'order-route-selected'
    ];
    
    for (const template of requiredTemplates) {
      if (notificationsContent.includes(template)) {
        log(`‚úÖ –®–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${template} –Ω–∞–π–¥–µ–Ω`, 'green');
      } else {
        log(`‚ùå –®–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${template} –ù–ï –ù–ê–ô–î–ï–ù`, 'red');
        allTestsPassed = false;
      }
    }
  } else {
    log('‚ùå –§–∞–π–ª —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω!', 'red');
    allTestsPassed = false;
  }
  
  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  log('\nüë• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...', 'yellow');
  
  if (apiContent.includes('@logistic.com')) {
    log('‚úÖ –†–æ–ª—å –ª–æ–≥–∏—Å—Ç–∞ –ø–æ –¥–æ–º–µ–Ω—É @logistic.com –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞', 'green');
  } else {
    log('‚ùå –†–æ–ª—å –ª–æ–≥–∏—Å—Ç–∞ –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞', 'red');
    allTestsPassed = false;
  }
  
  // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  log('\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...', 'yellow');
  
  const logisticsPagePath = path.join(__dirname, 'ecotrack-frontend/src/pages/LogisticsManagement.tsx');
  
  if (fs.existsSync(logisticsPagePath)) {
    log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π –Ω–∞–π–¥–µ–Ω–∞', 'green');
  } else {
    log('‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π –ù–ï –ù–ê–ô–î–ï–ù–ê', 'red');
    allTestsPassed = false;
  }
  
  // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
  log('\nüõ§Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤...', 'yellow');
  
  const serverPath = path.join(__dirname, 'ecotrack/src/server/server.ts');
  
  if (fs.existsSync(serverPath)) {
    const serverContent = fs.readFileSync(serverPath, 'utf8');
    
    if (serverContent.includes('/api/logistics/routes')) {
      log('‚úÖ API –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã', 'green');
    } else {
      log('‚ùå API –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã', 'red');
      allTestsPassed = false;
    }
  } else {
    log('‚ùå –§–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!', 'red');
    allTestsPassed = false;
  }
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø', 'blue');
  log('=' .repeat(40), 'blue');
  
  if (allTestsPassed) {
    log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!', 'green');
    log('\n‚úÖ –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!', 'green');
    
    log('\nüîß –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –°–ò–°–¢–ï–ú–´:', 'cyan');
    log('‚Ä¢ –ö–ª–∏–µ–Ω—Ç—ã —Å–æ–∑–¥–∞—é—Ç –∑–∞–∫–∞–∑—ã —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é createOrder', 'cyan');
    log('‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç createAutomaticLogisticRoutes', 'cyan');
    log('‚Ä¢ –°–æ–∑–¥–∞—é—Ç—Å—è 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ (—ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π, –±—ã—Å—Ç—Ä—ã–π, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)', 'cyan');
    log('‚Ä¢ –í—Å–µ–º –ª–æ–≥–∏—Å—Ç–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω new-order-for-logistics', 'cyan');
    log('‚Ä¢ –õ–æ–≥–∏—Å—Ç—ã –º–æ–≥—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é selectRoute', 'cyan');
    log('‚Ä¢ –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –º–∞—Ä—à—Ä—É—Ç–∞ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ "accepted"', 'cyan');
    log('‚Ä¢ –ö–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω order-route-selected', 'cyan');
    
    log('\nüéØ –î–õ–Ø –ó–ê–ü–£–°–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:', 'yellow');
    log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend: cd ecotrack && npm run dev', 'yellow');
    log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ frontend: cd ecotrack-frontend && npm start', 'yellow');
    log('3. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç: client@test.com / test123456', 'yellow');
    log('4. –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤', 'yellow');
    log('5. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ –ª–æ–≥–∏—Å—Ç: logist1@logistic.com / test123456', 'yellow');
    log('6. –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É', 'yellow');
    
  } else {
    log('‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´', 'red');
    log('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã', 'red');
  }
  
  return allTestsPassed;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
const success = testLogisticsSystem();
process.exit(success ? 0 : 1);
