/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã EcoTrack
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */

const { exec, spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  reset: '\x1b[0m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

async function testLogisticsSystem() {
  log('üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–ò–°–¢–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´ ECOTRACK', 'blue');
  log('=' .repeat(60), 'blue');
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
  log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã...', 'yellow');
  
  const requiredFiles = [
    'ecotrack/src/api/api.ts',
    'ecotrack/src/utils/enhancedNotifications.ts',
    'ecotrack-frontend/src/pages/LogisticsManagement.tsx',
    'ecotrack-frontend/src/App.tsx'
  ];
  
  let allFilesExist = true;
  for (const file of requiredFiles) {
    const fullPath = path.join(__dirname, file);
    if (fs.existsSync(fullPath)) {
      log(`‚úÖ ${file}`, 'green');
    } else {
      log(`‚ùå ${file} - –ù–ï –ù–ê–ô–î–ï–ù`, 'red');
      allFilesExist = false;
    }
  }
  
  if (!allFilesExist) {
    log('\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.', 'red');
    return;
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ API —Ñ–∞–π–ª–∞
  log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π API...', 'yellow');
  
  const apiPath = path.join(__dirname, 'ecotrack/src/api/api.ts');
  const apiContent = fs.readFileSync(apiPath, 'utf8');
  
  const requiredFunctions = [
    'getUsersByRole',
    'createAutomaticLogisticRoutes',
    'createOrder',
    'selectRoute'
  ];
  
  let allFunctionsPresent = true;
  for (const func of requiredFunctions) {
    if (apiContent.includes(func)) {
      log(`‚úÖ –§—É–Ω–∫—Ü–∏—è ${func} –Ω–∞–π–¥–µ–Ω–∞`, 'green');
    } else {
      log(`‚ùå –§—É–Ω–∫—Ü–∏—è ${func} –ù–ï –ù–ê–ô–î–ï–ù–ê`, 'red');
      allFunctionsPresent = false;
    }
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  log('\nüìß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...', 'yellow');
  
  const notificationsPath = path.join(__dirname, 'ecotrack/src/utils/enhancedNotifications.ts');
  const notificationsContent = fs.readFileSync(notificationsPath, 'utf8');
  
  const requiredTemplates = [
    'new-order-for-logistics',
    'order-route-selected'
  ];
  
  let allTemplatesPresent = true;
  for (const template of requiredTemplates) {
    if (notificationsContent.includes(template)) {
      log(`‚úÖ –®–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${template} –Ω–∞–π–¥–µ–Ω`, 'green');
    } else {
      log(`‚ùå –®–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${template} –ù–ï –ù–ê–ô–î–ï–ù`, 'red');
      allTemplatesPresent = false;
    }
  }
  
  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ createOrder
  log('\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å createOrder...', 'yellow');
  
  if (apiContent.includes('createAutomaticLogisticRoutes') && 
      apiContent.includes('await createAutomaticLogisticRoutes')) {
    log('‚úÖ createOrder –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å createAutomaticLogisticRoutes', 'green');
  } else {
    log('‚ùå createOrder –ù–ï –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å createAutomaticLogisticRoutes', 'red');
    allFunctionsPresent = false;
  }
  
  // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ selectRoute
  log('\nüìÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å selectRoute...', 'yellow');
  
  if (apiContent.includes('order-route-selected') && 
      apiContent.includes('enhancedNotificationService.sendNotification')) {
    log('‚úÖ selectRoute –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'green');
  } else {
    log('‚ùå selectRoute –ù–ï –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'red');
    allFunctionsPresent = false;
  }
  
  // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  log('\nüë• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...', 'yellow');
  
  const { PrismaClient } = require('./ecotrack/node_modules/@prisma/client');
  const prisma = new PrismaClient();
  
  try {
    const users = await prisma.user.findMany({
      where: {
        email: {
          in: ['client@test.com', 'logist1@logistic.com', 'logist2@logistic.com']
        }
      }
    });
    
    log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${users.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`, 'green');
    users.forEach(user => {
      log(`   - ${user.email} (${user.name})`, 'cyan');
    });
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`, 'red');
  } finally {
    await prisma.$disconnect();
  }
  
  // 7. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø', 'blue');
  log('=' .repeat(40), 'blue');
  
  const overallSuccess = allFilesExist && allFunctionsPresent && allTemplatesPresent;
  
  if (overallSuccess) {
    log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!', 'green');
    log('\n‚úÖ –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ', 'green');
    log('\nüöÄ –ì–û–¢–û–í–û –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:', 'cyan');
    log('1. –ö–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã', 'cyan');
    log('2. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ª–æ–≥–∏—Å—Ç–æ–≤', 'cyan');
    log('3. –õ–æ–≥–∏—Å—Ç—ã –º–æ–≥—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã', 'cyan');
    log('4. –ö–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞', 'cyan');
    
    log('\nüéØ –î–õ–Ø –ó–ê–ü–£–°–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø:', 'yellow');
    log('1. Backend: cd ecotrack && npm run dev', 'yellow');
    log('2. Frontend: cd ecotrack-frontend && npm start', 'yellow');
    
  } else {
    log('‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´', 'red');
    log('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã', 'red');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
testLogisticsSystem().catch(console.error);
