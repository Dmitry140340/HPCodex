// –§–ò–ù–ê–õ–¨–ù–´–ô –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´
const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function runFinalSystemTest() {
    console.log('üéØ –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ì–û –°–ò–°–¢–ï–ú–ù–û–ì–û –¢–ï–°–¢–ê');
    console.log('='.repeat(50));
    
    let allTestsPassed = true;
    const testResults = [];
    
    try {
        // –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        console.log('\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...');
        const userCount = await prisma.user.count();
        const orderCount = await prisma.order.count();
        console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${userCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${orderCount} –∑–∞–∫–∞–∑–æ–≤`);
        testResults.push('‚úÖ Database Connection - PASSED');
        
        // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤...');
        const adminUser = await prisma.user.findUnique({
            where: { email: 'admin@admin.com' }
        });
        
        if (adminUser) {
            const passwordValid = await bcrypt.compare('admin123', adminUser.password);
            if (passwordValid) {
                console.log('‚úÖ –ê–¥–º–∏–Ω admin@admin.com: –≤—Ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç');
                testResults.push('‚úÖ Admin Authentication - PASSED');
            } else {
                console.log('‚ùå –ê–¥–º–∏–Ω admin@admin.com: –ø–∞—Ä–æ–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
                testResults.push('‚ùå Admin Authentication - FAILED');
                allTestsPassed = false;
            }
        } else {
            console.log('‚ùå –ê–¥–º–∏–Ω admin@admin.com –Ω–µ –Ω–∞–π–¥–µ–Ω');
            testResults.push('‚ùå Admin User Exists - FAILED');
            allTestsPassed = false;
        }
        
        // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã
        const yandexMapsPath = path.join(__dirname, 'src', 'utils', 'yandexMaps.ts');
        const yandexMapsExists = fs.existsSync(yandexMapsPath);
        console.log(`‚úÖ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã: ${yandexMapsExists ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã' : '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}`);
        testResults.push(`‚úÖ Yandex Maps Integration - ${yandexMapsExists ? 'PASSED' : 'FAILED'}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        const envPath = path.join(__dirname, '.env');
        if (fs.existsSync(envPath)) {
            const envContent = fs.readFileSync(envPath, 'utf8');
            const hasYandexKey = envContent.includes('YANDEX_MAPS_API_KEY');
            console.log(`‚úÖ API –∫–ª—é—á–∏: ${hasYandexKey ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}`);
            testResults.push(`‚úÖ Russian API Keys - ${hasYandexKey ? 'PASSED' : 'FAILED'}`);
        }
        
        // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...');
        const frontendPath = path.join(__dirname, '..', 'ecotrack-frontend');
        const packageJsonPath = path.join(frontendPath, 'package.json');
        const frontendExists = fs.existsSync(packageJsonPath);
        console.log(`‚úÖ Frontend: ${frontendExists ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
        testResults.push(`‚úÖ Frontend Setup - ${frontendExists ? 'PASSED' : 'FAILED'}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        const loginPagePath = path.join(frontendPath, 'src', 'pages', 'LoginPage.tsx');
        if (fs.existsSync(loginPagePath)) {
            const loginContent = fs.readFileSync(loginPagePath, 'utf8');
            const hasRussianText = loginContent.includes('–í—Ö–æ–¥') || loginContent.includes('–õ–æ–≥–∏–Ω') || loginContent.includes('–≤–æ–π—Ç–∏');
            console.log(`‚úÖ –†—É—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: ${hasRussianText ? '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞' : '—Ç—Ä–µ–±—É–µ—Ç—Å—è'}`);
            testResults.push(`‚úÖ Russian Localization - ${hasRussianText ? 'PASSED' : 'PARTIAL'}`);
        }
        
        // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
        console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...');
        const requiredPaths = [
            path.join(__dirname, 'src', 'server', 'server.ts'),
            path.join(__dirname, 'src', 'server', 'actions.ts'),
            path.join(__dirname, 'prisma', 'schema.prisma')
        ];
        
        let structureValid = true;
        requiredPaths.forEach(reqPath => {
            const exists = fs.existsSync(reqPath);
            if (!exists) structureValid = false;
        });
        
        console.log(`‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞: ${structureValid ? '–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞' : '—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏'}`);
        testResults.push(`‚úÖ Project Structure - ${structureValid ? 'PASSED' : 'FAILED'}`);
        
        // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ
        console.log('\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê');
        console.log('='.repeat(50));
        
        testResults.forEach(result => {
            console.log(result);
        });
        
        console.log('\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
        if (allTestsPassed) {
            console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
            console.log('üöÄ –ü–†–û–ï–ö–¢ –ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ù-–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ');
            
            console.log('\nüîë –î–ê–ù–ù–´–ï –î–õ–Ø –í–•–û–î–ê:');
            console.log('Email: admin@admin.com');
            console.log('–ü–∞—Ä–æ–ª—å: admin123');
            console.log('–†–æ–ª—å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä');
            
            console.log('\nüåê –ê–î–†–ï–°–ê –°–ò–°–¢–ï–ú–´:');
            console.log('Frontend: http://localhost:3000');
            console.log('Backend API: http://localhost:3001');
            console.log('Health Check: http://localhost:3001/api/health');
            
        } else {
            console.log('‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´');
            console.log('üîß –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê');
        }
        
    } catch (error) {
        console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
        allTestsPassed = false;
    } finally {
        await prisma.$disconnect();
    }
    
    return allTestsPassed;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
runFinalSystemTest()
    .then(success => {
        if (success) {
            console.log('\n‚úÖ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!');
        } else {
            console.log('\n‚ùå –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ô –ù–ê–°–¢–†–û–ô–ö–ò');
        }
        process.exit(success ? 0 : 1);
    })
    .catch(error => {
        console.error('üí• –§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê:', error);
        process.exit(1);
    });
