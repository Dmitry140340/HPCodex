const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function assignLogisticRole() {
    try {
        const userEmail = 'zavalnyuk14@gmail.com';
        
        console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email: ${userEmail}`);
        
        // –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await prisma.user.findUnique({
            where: {
                email: userEmail
            }
        });
        
        if (!user) {
            console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email ${userEmail} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
            console.log('üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é –ª–æ–≥–∏—Å—Ç–∞...');
            
            // –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            const bcrypt = require('bcryptjs');
            const defaultPassword = 'logistic123456';
            const hashedPassword = await bcrypt.hash(defaultPassword, 10);
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é –ª–æ–≥–∏—Å—Ç–∞
            const newUser = await prisma.user.create({
                data: {
                    email: userEmail,
                    name: '–õ–æ–≥–∏—Å—Ç –ó–∞–≤–∞–ª—å–Ω—é–∫',
                    role: 'logistic',
                    isAdmin: false,
                    companyName: '–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
                    password: hashedPassword
                }
            });
            
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–ª–æ–≥–∏—Å—Ç:`);
            console.log(`   üìß Email: ${newUser.email}`);
            console.log(`   üë§ –ò–º—è: ${newUser.name}`);
            console.log(`   üé≠ –†–æ–ª—å: ${newUser.role}`);
            console.log(`   üè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${newUser.companyName}`);
            console.log(`   üîë –ü–∞—Ä–æ–ª—å: ${defaultPassword}`);
              } else {
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:`);
            console.log(`   üë§ –ò–º—è: ${user.name}`);
            console.log(`   üé≠ –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: ${user.role || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
            console.log(`   üëë –ê–¥–º–∏–Ω: ${user.isAdmin ? '–î–∞' : '–ù–µ—Ç'}`);
            
            console.log(`\nüîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –Ω–∞ "logistic"...`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –Ω–∞ –ª–æ–≥–∏—Å—Ç–∞
            const updatedUser = await prisma.user.update({
                where: {
                    email: userEmail
                },
                data: {
                    role: 'logistic',
                    isAdmin: false, // –£–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –±—ã–ª–∏
                    companyName: user.companyName || '–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è'
                }
            });
            
            console.log(`\nüéâ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!`);
            console.log(`   üìß Email: ${updatedUser.email}`);
            console.log(`   üë§ –ò–º—è: ${updatedUser.name}`);
            console.log(`   üé≠ –ù–æ–≤–∞—è —Ä–æ–ª—å: ${updatedUser.role}`);
            console.log(`   üëë –ê–¥–º–∏–Ω: ${updatedUser.isAdmin ? '–î–∞' : '–ù–µ—Ç'}`);
        }
        
        console.log(`\nüîë –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userEmail} –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –ª–æ–≥–∏—Å—Ç`);
        console.log(`üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Å—Ç–∞:`);
        console.log(`   - –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã`);
        console.log(`   - –í—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–æ–≤`);
        console.log(`   - –ó–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ`);
        console.log(`   - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–æ–∫`);
        console.log(`   - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ª–æ–≥–∏—Å—Ç–∏–∫–∏`);
        console.log(`   - –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ –ª–æ–≥–∏—Å—Ç–∞:', error);
        
        if (error.code === 'P2002') {
            console.log('üí° –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }
    } finally {
        await prisma.$disconnect();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
assignLogisticRole();
