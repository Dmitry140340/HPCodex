// –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö EcoTrack
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkDatabaseConnection() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö EcoTrack...\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...');
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!\n');
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü
    console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É User
    const userCount = await prisma.user.count();
    console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${userCount} –∑–∞–ø–∏—Å–µ–π`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É Order
    const orderCount = await prisma.order.count();
    console.log(`üì¶ –ó–∞–∫–∞–∑—ã: ${orderCount} –∑–∞–ø–∏—Å–µ–π`);
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    const adminUsers = await prisma.user.findMany({
      where: { isAdmin: true },
      select: { id: true, email: true, name: true }
    });
    
    console.log(`üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: ${adminUsers.length}`);
    adminUsers.forEach(admin => {
      console.log(`   - ${admin.name} (${admin.email})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const regularUsers = await prisma.user.findMany({
      where: { isAdmin: false },
      select: { id: true, email: true, name: true, companyName: true }
    });
    
    console.log(`üë• –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${regularUsers.length}`);
    if (regularUsers.length > 0) {
      regularUsers.slice(0, 3).forEach(user => {
        console.log(`   - ${user.name} (${user.email}) - ${user.companyName || '–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏'}`);
      });
      if (regularUsers.length > 3) {
        console.log(`   ... –∏ –µ—â–µ ${regularUsers.length - 3} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    if (orderCount > 0) {
      console.log('\n4Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–æ–≤...');
      const recentOrders = await prisma.order.findMany({
        take: 5,
        orderBy: { createdAt: 'desc' },
        include: {
          user: {
            select: { name: true, email: true }
          }
        }
      });
      
      console.log('üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:');
      recentOrders.forEach(order => {
        console.log(`   - ${order.materialType} (${order.volume}–∫–≥) - ${order.user.name} - ${order.status}`);
      });
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
      const statusStats = await prisma.order.groupBy({
        by: ['status'],
        _count: { status: true }
      });
      
      console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞–∫–∞–∑–æ–≤:');
      statusStats.forEach(stat => {
        console.log(`   - ${stat.status}: ${stat._count.status} –∑–∞–∫–∞–∑–æ–≤`);
      });
    }
    
    // 5. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    if (adminUsers.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤! –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞...');
      const testAdmin = await prisma.user.create({
        data: {
          email: 'admin@himka-plastic.ru',
          name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –°–∏—Å—Ç–µ–º—ã',
          password: '$2b$10$K7L/VxwtkIVOKWwlk.E5z.qQK5TB8Q5Y.jGtjNzQfZZK8EhP.jzWm', // password123
          isAdmin: true,
          role: 'admin',
          companyName: '–•–∏–º–∫–∞–ü–ª–∞—Å—Ç–∏–∫',
          inn: '7700000000',
          kpp: '770001001'
        }
      });
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω: ${testAdmin.name} (${testAdmin.email})`);
    }
    
    if (regularUsers.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      
      const testUsers = [
        {
          email: 'client1@test.ru',
          name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
          password: '$2b$10$K7L/VxwtkIVOKWwlk.E5z.qQK5TB8Q5Y.jGtjNzQfZZK8EhP.jzWm',
          isAdmin: false,
          role: 'client',
          companyName: '–û–û–û –≠–∫–æ–ø–ª–∞—Å—Ç',
          inn: '7701000001'
        },
        {
          email: 'client2@test.ru', 
          name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
          password: '$2b$10$K7L/VxwtkIVOKWwlk.E5z.qQK5TB8Q5Y.jGtjNzQfZZK8EhP.jzWm',
          isAdmin: false,
          role: 'client',
          companyName: '–ò–ü –°–∏–¥–æ—Ä–æ–≤–∞ –ú.–ê.',
          inn: '7702000002'
        }
      ];
      
      for (const userData of testUsers) {
        const user = await prisma.user.create({ data: userData });
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name} (${user.email})`);
      }
    }
    
    if (orderCount === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤! –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã...');
      
      const users = await prisma.user.findMany({
        where: { isAdmin: false },
        take: 2
      });
      
      if (users.length > 0) {
        const testOrders = [
          {
            userId: users[0].id,
            materialType: '–ü–≠–¢ –±—É—Ç—ã–ª–∫–∏',
            volume: 500.0,
            price: 15000.0,
            environmentalImpact: 2.5,
            status: 'pending',
            pickupAddress: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è, –¥. 15',
            paymentStatus: 'unpaid',
            paymentMethod: 'bank_transfer'
          },
          {
            userId: users[0].id,
            materialType: '–ü–æ–ª–∏—ç—Ç–∏–ª–µ–Ω',
            volume: 1000.0,
            price: 25000.0,
            environmentalImpact: 4.2,
            status: 'confirmed',
            pickupAddress: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ó–∞–≤–æ–¥—Å–∫–∞—è, –¥. 7',
            paymentStatus: 'paid',
            paymentMethod: 'cash'
          }
        ];
        
        if (users.length > 1) {
          testOrders.push({
            userId: users[1].id,
            materialType: '–ü–æ–ª–∏—Å—Ç–∏—Ä–æ–ª',
            volume: 300.0,
            price: 9000.0,
            environmentalImpact: 1.8,
            status: 'completed',
            pickupAddress: '–≥. –ú–æ—Å–∫–≤–∞, –ø—Ä-—Ç –ú–∏—Ä–∞, –¥. 45',
            paymentStatus: 'paid',
            paymentMethod: 'card'
          });
        }
        
        for (const orderData of testOrders) {
          const order = await prisma.order.create({ data: orderData });
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑: ${order.materialType} (${order.volume}–∫–≥)`);
        }
      }
    }
    
    // 6. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log('\n6Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const finalUserCount = await prisma.user.count();
    const finalOrderCount = await prisma.order.count();
    const finalAdminCount = await prisma.user.count({ where: { isAdmin: true } });
    
    console.log(`üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${finalUserCount}`);
    console.log(`   üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${finalAdminCount}`);
    console.log(`   üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${finalOrderCount}`);
    
    // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ö–æ–¥–∞
    console.log('\n7Ô∏è‚É£ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('üîê –î–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
    console.log('   üìß Email: admin@himka-plastic.ru');
    console.log('   üîë –ü–∞—Ä–æ–ª—å: password123');
    console.log('   üëë –†–æ–ª—å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä');
    console.log('');
    console.log('   üìß Email: client1@test.ru');
    console.log('   üîë –ü–∞—Ä–æ–ª—å: password123'); 
    console.log('   üë§ –†–æ–ª—å: –ö–ª–∏–µ–Ω—Ç');
    
    console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!');
    console.log('‚úÖ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å frontend –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:', error.message);
    
    if (error.code === 'P1001') {
      console.log('\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
      console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω');
      console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DATABASE_URL –≤ .env —Ñ–∞–π–ª–µ');
      console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
    return false;
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkDatabaseConnection()
  .then(success => {
    if (success) {
      console.log('\nüöÄ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞! –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å:');
      console.log('   npm start (–¥–ª—è frontend)');
      console.log('   –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ start-clean.ps1');
    } else {
      console.log('\n‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
    }
    process.exit(success ? 0 : 1);
  })
  .catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
