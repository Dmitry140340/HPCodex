"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.seedDatabase = seedDatabase;
// Script to seed the database with test data
const client_1 = require("@prisma/client");
const prisma = new client_1.PrismaClient();
async function seedDatabase() {
    try {
        console.log('üå± Seeding database with test data...');
        // Create test users
        const testUsers = [
            {
                email: 'test@example.com',
                name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                password: 'password123',
                isAdmin: false,
                role: 'client',
                companyName: '–û–û–û –¢–µ—Å—Ç',
                dashboardSettings: JSON.stringify([
                    { id: 'w1', type: 'totalOrders', position: 0, size: 'small' },
                    { id: 'w2', type: 'totalEarnings', position: 1, size: 'small' },
                    { id: 'w3', type: 'environmentalImpact', position: 2, size: 'small' },
                ])
            },
            {
                email: 'admin@admin.com',
                name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                password: 'admin123',
                isAdmin: true,
                role: 'admin',
                companyName: '–û–û–û –•–∏–º–∫–∞ –ü–ª–∞—Å—Ç–∏–∫',
                dashboardSettings: JSON.stringify([
                    { id: 'w1', type: 'totalOrders', position: 0, size: 'small' },
                    { id: 'w2', type: 'totalEarnings', position: 1, size: 'small' },
                    { id: 'w3', type: 'environmentalImpact', position: 2, size: 'small' },
                ])
            },
            {
                email: 'manager@manager.com',
                name: '–ú–µ–Ω–µ–¥–∂–µ—Ä',
                password: 'manager123',
                isAdmin: false,
                role: 'manager',
                companyName: '–û–û–û –•–∏–º–∫–∞ –ü–ª–∞—Å—Ç–∏–∫',
                dashboardSettings: JSON.stringify([
                    { id: 'w1', type: 'totalOrders', position: 0, size: 'small' },
                    { id: 'w2', type: 'totalEarnings', position: 1, size: 'small' },
                    { id: 'w3', type: 'environmentalImpact', position: 2, size: 'small' },
                ])
            },
            {
                email: 'logistic@logistic.com',
                name: '–õ–æ–≥–∏—Å—Ç',
                password: 'logistic123',
                isAdmin: false,
                role: 'logistic',
                companyName: '–û–û–û –•–∏–º–∫–∞ –ü–ª–∞—Å—Ç–∏–∫',
                dashboardSettings: JSON.stringify([
                    { id: 'w1', type: 'totalOrders', position: 0, size: 'small' },
                    { id: 'w2', type: 'totalEarnings', position: 1, size: 'small' },
                    { id: 'w3', type: 'environmentalImpact', position: 2, size: 'small' },
                ])
            }
        ];
        // Check if users already exist, if not create them
        for (const userData of testUsers) {
            const existingUser = await prisma.user.findUnique({
                where: { email: userData.email }
            });
            if (!existingUser) {
                const user = await prisma.user.create({
                    data: userData
                });
                console.log(`‚úÖ Created user: ${user.email} (${user.role})`);
            }
            else {
                console.log(`‚ö†Ô∏è  User already exists: ${userData.email}`);
            }
        }
        console.log('üéâ Database seeding completed!');
        console.log('\nüìã Test credentials:');
        console.log('  Client: test@example.com / password123');
        console.log('  Admin: admin@admin.com / admin123');
        console.log('  Manager: manager@manager.com / manager123');
        console.log('  Logistic: logistic@logistic.com / logistic123');
    }
    catch (error) {
        console.error('‚ùå Error seeding database:', error);
    }
    finally {
        await prisma.$disconnect();
    }
}
// Run the seed function if this script is executed directly
if (require.main === module) {
    seedDatabase();
}
