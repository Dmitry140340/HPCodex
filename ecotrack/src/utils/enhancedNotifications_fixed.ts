/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è HimkaPlastic EcoTrack
 * Email, SMS, Push, Telegram, WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —á–∞—Ç-–±–æ—Ç
 */

import nodemailer from 'nodemailer';
import webpush from 'web-push';
import TelegramBot from 'telegram-bot-api';
import twilio from 'twilio';
import { v4 as uuidv4 } from 'uuid';

export interface NotificationData {
  userId: string;
  orderId?: string;
  type: 'email' | 'sms' | 'push' | 'telegram' | 'whatsapp' | 'in-app';
  title: string;
  message: string;
  status?: string;
  userEmail?: string;
  userPhone?: string;
  telegramChatId?: string;
  priority: 'low' | 'medium' | 'high' | 'urgent';
  category: 'order' | 'payment' | 'delivery' | 'system' | 'marketing' | 'analytics';
  metadata?: Record<string, any>;
  scheduledFor?: Date;
  expiresAt?: Date;
}

export interface NotificationPreferences {
  userId: string;
  email: boolean;
  sms: boolean;
  push: boolean;
  telegram: boolean;
  whatsapp: boolean;
  inApp: boolean;
  categories: {
    order: boolean;
    payment: boolean;
    delivery: boolean;
    system: boolean;
    marketing: boolean;
    analytics: boolean;
  };
  quietHours: {
    enabled: boolean;
    start: string; // "22:00"
    end: string;   // "08:00"
    timezone: string;
  };
}

export interface NotificationTemplate {
  id: string;
  name: string;
  type: NotificationData['type'];
  category: NotificationData['category'];
  subject: string;
  body: string;
  variables: string[];
}

export interface ChatBotCommand {
  command: string;
  description: string;
  handler: (chatId: string, args: string[]) => Promise<string>;
}

export interface NotificationHistory {
  id: string;
  userId: string;
  type: NotificationData['type'];
  title: string;
  message: string;
  status: 'pending' | 'sent' | 'delivered' | 'failed' | 'expired';
  sentAt?: Date;
  deliveredAt?: Date;
  failureReason?: string;
  retryCount: number;
  metadata?: Record<string, any>;
}

export interface RecipientGroup {
  id: string;
  name: string;
  description: string;
  userIds: string[];
  createdAt: Date;
  isActive: boolean;
}

export interface NotificationStats {
  total: number;
  sent: number;
  delivered: number;
  failed: number;
  pending: number;
  byType: {
    email: number;
    sms: number;
    push: number;
    telegram: number;
    whatsapp: number;
    'in-app': number;
  };
  byCategory: {
    order: number;
    payment: number;
    delivery: number;
    system: number;
    marketing: number;
    analytics: number;
  };
  period: string;
  startDate: Date;
  endDate: Date;
}

class EnhancedNotificationService {
  private emailTransporter: nodemailer.Transporter;
  private telegramBot: TelegramBot;
  private twilioClient: any;
  private notificationQueue: NotificationData[] = [];
  private templates: Map<string, NotificationTemplate> = new Map();
  private userPreferences: Map<string, NotificationPreferences> = new Map();
  private chatBotCommands: Map<string, ChatBotCommand> = new Map();
  private notificationHistory: Map<string, NotificationHistory> = new Map();
  private isProcessing = false;
  private webPushSubscriptions: Map<string, any> = new Map(); // userId -> subscription

  constructor() {
    this.initializeServices();
    this.initializeTemplates();
    this.initializeChatBot();
    this.startQueueProcessor();
  }

  private initializeServices() {
    // Email —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    this.emailTransporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST || 'smtp.yandex.ru',
      port: parseInt(process.env.SMTP_PORT || '587'),
      secure: false,
      auth: {
        user: process.env.SMTP_USER || 'noreply@himkaplastic.ru',
        pass: process.env.SMTP_PASS || 'your-smtp-password'
      }
    });

    // Web Push –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    webpush.setVapidDetails(
      'mailto:admin@himkaplastic.ru',
      process.env.VAPID_PUBLIC_KEY || 'your-vapid-public-key',
      process.env.VAPID_PRIVATE_KEY || 'your-vapid-private-key'
    );

    // Telegram Bot
    if (process.env.TELEGRAM_BOT_TOKEN) {
      this.telegramBot = new TelegramBot({
        token: process.env.TELEGRAM_BOT_TOKEN
      });
    }

    // Twilio –¥–ª—è SMS –∏ WhatsApp
    if (process.env.TWILIO_ACCOUNT_SID && process.env.TWILIO_AUTH_TOKEN) {
      this.twilioClient = twilio(
        process.env.TWILIO_ACCOUNT_SID,
        process.env.TWILIO_AUTH_TOKEN
      );
    }
  }

  private initializeTemplates() {
    const templates: NotificationTemplate[] = [
      {
        id: 'order-created',
        name: '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω',
        type: 'email',
        category: 'order',
        subject: '–ó–∞–∫–∞–∑ ‚Ññ{{orderId}} –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É',
        body: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {{userName}}!\n\n–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{{orderId}} –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {{orderAmount}} —Ä—É–±.\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–¥–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.',
        variables: ['userName', 'orderId', 'orderAmount']
      },
      {
        id: 'order-status-changed',
        name: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞',
        type: 'push',
        category: 'order',
        subject: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Ññ{{orderId}}',
        body: '–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ ‚Ññ{{orderId}} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {{newStatus}}',
        variables: ['orderId', 'newStatus']
      },
      {
        id: 'payment-received',
        name: '–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω',
        type: 'sms',
        category: 'payment',
        subject: '–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
        body: '–ü–ª–∞—Ç–µ–∂ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{{orderId}} –Ω–∞ —Å—É–º–º—É {{amount}} —Ä—É–±. –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.',
        variables: ['orderId', 'amount']
      },
      {
        id: 'delivery-notification',
        name: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ',
        type: 'telegram',
        category: 'delivery',
        subject: 'üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ{{orderId}}',
        body: '–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{{orderId}} –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω {{deliveryDate}} —Å {{deliveryTime}}.\n–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: {{trackingNumber}}',
        variables: ['orderId', 'deliveryDate', 'deliveryTime', 'trackingNumber']
      },
      {
        id: 'system-maintenance',
        name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
        type: 'email',
        category: 'system',
        subject: '–ü–ª–∞–Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã',
        body: '–£–≤–∞–∂–∞–µ–º—ã–µ –∫–ª–∏–µ–Ω—Ç—ã!\n\n{{maintenanceDate}} —Å {{startTime}} –¥–æ {{endTime}} –±—É–¥—É—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –ø–ª–∞–Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã.\n–í–æ–∑–º–æ–∂–Ω—ã –ø–µ—Ä–µ–±–æ–∏ –≤ —Ä–∞–±–æ—Ç–µ —Å–µ—Ä–≤–∏—Å–∞.',
        variables: ['maintenanceDate', 'startTime', 'endTime']
      }
    ];

    templates.forEach(template => {
      this.templates.set(template.id, template);
    });
  }

  private initializeChatBot() {
    // –ö–æ–º–∞–Ω–¥—ã —á–∞—Ç-–±–æ—Ç–∞
    const commands: ChatBotCommand[] = [
      {
        command: '/start',
        description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º',
        handler: async (chatId: string) => {
          return '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EcoTrack –æ—Ç –û–û–û "–•–∏–º–∫–∞ –ü–ª–∞—Å—Ç–∏–∫"!\n\n' +
                 '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
                 '/orders - –ú–æ–∏ –∑–∞–∫–∞–∑—ã\n' +
                 '/status <–Ω–æ–º–µ—Ä_–∑–∞–∫–∞–∑–∞> - –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞\n' +
                 '/help - –ü–æ–º–æ—â—å\n' +
                 '/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π';
        }
      },
      {
        command: '/orders',
        description: '–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–∫–∞–∑—ã',
        handler: async (chatId: string) => {
          // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –ë–î
          return '–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n\n' +
                 'üì¶ –ó–∞–∫–∞–∑ ‚ÑñECO-2025-001 - –í –æ–±—Ä–∞–±–æ—Ç–∫–µ\n' +
                 'üì¶ –ó–∞–∫–∞–∑ ‚ÑñECO-2025-002 - –î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è\n' +
                 '‚úÖ –ó–∞–∫–∞–∑ ‚ÑñECO-2024-999 - –ó–∞–≤–µ—Ä—à–µ–Ω';
        }
      },
      {
        command: '/status',
        description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞',
        handler: async (chatId: string, args: string[]) => {
          const orderId = args[0];
          if (!orderId) {
            return '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞. –ü—Ä–∏–º–µ—Ä: /status ECO-2025-001';
          }
          // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –ë–î
          return `üì¶ –ó–∞–∫–∞–∑ ‚Ññ${orderId}\n` +
                 'üìç –°—Ç–∞—Ç—É—Å: –í –æ–±—Ä–∞–±–æ—Ç–∫–µ\n' +
                 'üí∞ –°—É–º–º–∞: 15,500 —Ä—É–±.\n' +
                 'üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 15.01.2025\n' +
                 'üöö –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: 20.01.2025';
        }
      },
      {
        command: '/help',
        description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É',
        handler: async (chatId: string) => {
          return 'ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ EcoTrack –±–æ—Ç—É\n\n' +
                 '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:\n' +
                 '‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã\n' +
                 '‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n' +
                 '‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏\n\n' +
                 '–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: +7 (495) 123-45-67';
        }
      },
      {
        command: '/settings',
        description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
        handler: async (chatId: string) => {
          return '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n' +
                 '–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.\n\n' +
                 '–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n' +
                 '‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö\n' +
                 '‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ\n' +
                 '‚ùå –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏';
        }
      }
    ];

    commands.forEach(command => {
      this.chatBotCommands.set(command.command, command);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
    if (this.telegramBot) {
      this.telegramBot.on('message', async (message) => {
        const chatId = message.chat.id.toString();
        const text = message.text || '';
        
        if (text.startsWith('/')) {
          const [command, ...args] = text.split(' ');
          const botCommand = this.chatBotCommands.get(command);
          
          if (botCommand) {
            const response = await botCommand.handler(chatId, args);
            await this.sendTelegramMessage(chatId, response);
          } else {
            await this.sendTelegramMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.');
          }
        } else {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
          await this.sendTelegramMessage(chatId, 
            '–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:\n/start, /orders, /help'
          );
        }
      });
    }
  }

  private startQueueProcessor() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    setInterval(async () => {
      if (!this.isProcessing && this.notificationQueue.length > 0) {
        this.isProcessing = true;
        await this.processNotificationQueue();
        this.isProcessing = false;
      }
    }, 5000); // –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  }

  private async processNotificationQueue() {
    const now = new Date();
    const pendingNotifications = this.notificationQueue.filter(notification => {
      return !notification.scheduledFor || notification.scheduledFor <= now;
    });

    for (const notification of pendingNotifications) {
      if (notification.expiresAt && notification.expiresAt < now) {
        this.removeFromQueue(notification);
        continue;
      }

      const preferences = this.userPreferences.get(notification.userId);
      if (preferences && !this.shouldSendNotification(notification, preferences)) {
        continue;
      }

      try {
        await this.sendNotification(notification);
        this.removeFromQueue(notification);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        // –õ–æ–≥–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
      }
    }
  }

  private shouldSendNotification(notification: NotificationData, preferences: NotificationPreferences): boolean {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const typeEnabled = {
      'email': preferences.email,
      'sms': preferences.sms,
      'push': preferences.push,
      'telegram': preferences.telegram,
      'whatsapp': preferences.whatsapp,
      'in-app': preferences.inApp
    }[notification.type];

    if (!typeEnabled) return false;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryEnabled = preferences.categories[notification.category];
    if (!categoryEnabled) return false;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤
    if (preferences.quietHours.enabled) {
      const now = new Date();
      const currentTime = now.toTimeString().substr(0, 5);
      const startTime = preferences.quietHours.start;
      const endTime = preferences.quietHours.end;

      if (startTime > endTime) {
        // –ù–æ—á–Ω–æ–π –ø–µ—Ä–∏–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 22:00 - 08:00)
        if (currentTime >= startTime || currentTime <= endTime) {
          return notification.priority === 'urgent';
        }
      } else {
        // –î–Ω–µ–≤–Ω–æ–π –ø–µ—Ä–∏–æ–¥
        if (currentTime >= startTime && currentTime <= endTime) {
          return notification.priority === 'urgent';
        }
      }
    }

    return true;
  }

  private removeFromQueue(notification: NotificationData) {
    const index = this.notificationQueue.indexOf(notification);
    if (index > -1) {
      this.notificationQueue.splice(index, 1);
    }
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  
  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
   */
  async queueNotification(data: NotificationData): Promise<string> {
    const notificationId = uuidv4();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    const historyRecord: NotificationHistory = {
      id: notificationId,
      userId: data.userId,
      type: data.type,
      title: data.title,
      message: data.message,
      status: 'pending',
      retryCount: 0,
      metadata: data.metadata
    };
    
    this.notificationHistory.set(notificationId, historyRecord);
    this.notificationQueue.push(data);
    
    console.log(`üìù –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: ${notificationId}`);
    return notificationId;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —à–∞–±–ª–æ–Ω—É
   */
  async sendNotificationFromTemplate(
    templateId: string,
    userId: string,
    variables: Record<string, string>,
    overrides?: Partial<NotificationData>
  ): Promise<string> {
    const template = this.templates.get(templateId);
    if (!template) {
      throw new Error(`–®–∞–±–ª–æ–Ω ${templateId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    let subject = template.subject;
    let body = template.body;

    // –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    for (const [key, value] of Object.entries(variables)) {
      subject = subject.replace(new RegExp(`{{${key}}}`, 'g'), value);
      body = body.replace(new RegExp(`{{${key}}}`, 'g'), value);
    }

    const notificationData: NotificationData = {
      userId,
      type: template.type,
      category: template.category,
      title: subject,
      message: body,
      priority: 'medium',
      ...overrides
    };

    return await this.queueNotification(notificationData);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async sendNotification(data: NotificationData): Promise<boolean> {
    try {
      switch (data.type) {
        case 'email':
          return await this.sendEmailNotification(data);
        case 'sms':
          return await this.sendSmsNotification(data);
        case 'push':
          return await this.sendPushNotification(data);
        case 'telegram':
          return await this.sendTelegramNotification(data);
        case 'whatsapp':
          return await this.sendWhatsAppNotification(data);
        case 'in-app':
          return await this.sendInAppNotification(data);
        default:
          throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${data.type}`);
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${data.type} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:`, error);
      return false;
    }
  }

  /**
   * Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async sendEmailNotification(data: NotificationData): Promise<boolean> {
    try {
      const emailContent = this.generateEmailTemplate(data);
      
      await this.emailTransporter.sendMail({
        from: process.env.SMTP_FROM || '"–û–û–û –•–∏–º–∫–∞ –ü–ª–∞—Å—Ç–∏–∫" <noreply@himkaplastic.ru>',
        to: data.userEmail,
        subject: data.title,
        html: emailContent,
        text: data.message
      });

      console.log(`‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${data.userId}`);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
      return false;
    }
  }

  /**
   * SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Twilio
   */
  async sendSmsNotification(data: NotificationData): Promise<boolean> {
    try {
      if (!this.twilioClient || !data.userPhone) {
        console.log(`üì± SMS —Å–∏–º—É–ª—è—Ü–∏—è –¥–ª—è ${data.userPhone}: ${data.message}`);
        return true;
      }

      await this.twilioClient.messages.create({
        body: data.message,
        from: process.env.TWILIO_PHONE_NUMBER,
        to: data.userPhone
      });

      console.log(`‚úÖ SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${data.userPhone}`);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:', error);
      return false;
    }
  }

  /**
   * Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async sendPushNotification(data: NotificationData): Promise<boolean> {
    try {
      const subscription = this.webPushSubscriptions.get(data.userId);
      
      if (!subscription) {
        console.log(`üîî Push —Å–∏–º—É–ª—è—Ü–∏—è –¥–ª—è ${data.userId}: ${data.message}`);
        return true;
      }

      const payload = JSON.stringify({
        title: data.title,
        body: data.message,
        icon: '/icon-192x192.png',
        badge: '/badge-72x72.png',
        data: {
          orderId: data.orderId,
          category: data.category,
          userId: data.userId
        }
      });

      await webpush.sendNotification(subscription, payload);
      console.log(`‚úÖ Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${data.userId}`);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Push:', error);
      return false;
    }
  }

  /**
   * Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async sendTelegramNotification(data: NotificationData): Promise<boolean> {
    try {
      if (!data.telegramChatId) {
        console.log(`üì± Telegram —Å–∏–º—É–ª—è—Ü–∏—è: ${data.message}`);
        return true;
      }

      await this.sendTelegramMessage(data.telegramChatId, `${data.title}\n\n${data.message}`);
      console.log(`‚úÖ Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${data.telegramChatId}`);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram:', error);
      return false;
    }
  }

  /**
   * WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Twilio
   */
  async sendWhatsAppNotification(data: NotificationData): Promise<boolean> {
    try {
      if (!this.twilioClient || !data.userPhone) {
        console.log(`üì± WhatsApp —Å–∏–º—É–ª—è—Ü–∏—è –¥–ª—è ${data.userPhone}: ${data.message}`);
        return true;
      }

      await this.twilioClient.messages.create({
        body: data.message,
        from: `whatsapp:${process.env.TWILIO_WHATSAPP_NUMBER}`,
        to: `whatsapp:${data.userPhone}`
      });

      console.log(`‚úÖ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${data.userPhone}`);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WhatsApp:', error);
      return false;
    }
  }

  /**
   * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  async sendInAppNotification(data: NotificationData): Promise<boolean> {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ WebSocket
      console.log(`üîî –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è ${data.userId}: ${data.message}`);
      
      // –≠–º—É–ª—è—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      // await db.notification.create({
      //   data: {
      //     userId: data.userId,
      //     title: data.title,
      //     message: data.message,
      //     type: 'in-app',
      //     read: false,
      //     createdAt: new Date()
      //   }
      // });

      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ in-app —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return false;
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  private async sendTelegramMessage(chatId: string, text: string): Promise<void> {
    if (this.telegramBot) {
      await this.telegramBot.sendMessage({
        chat_id: chatId,
        text: text,
        parse_mode: 'HTML'
      });
    }
  }

  private generateEmailTemplate(data: NotificationData): string {
    const priorityColors = {
      low: '#10b981',
      medium: '#3b82f6',
      high: '#f59e0b',
      urgent: '#ef4444'
    };

    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>${data.title}</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: #2563eb; color: white; padding: 20px; text-align: center; }
          .content { padding: 20px; background: #f9f9f9; }
          .footer { padding: 20px; text-align: center; font-size: 12px; color: #666; }
          .priority-badge { 
            display: inline-block; 
            padding: 4px 12px; 
            border-radius: 20px; 
            font-size: 12px; 
            font-weight: bold; 
            color: white;
            background: ${priorityColors[data.priority]};
          }
          .category-badge { 
            display: inline-block; 
            padding: 4px 8px; 
            border-radius: 4px; 
            font-size: 11px; 
            background: #e5e7eb; 
            color: #374151;
            margin-left: 8px;
          }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>–û–û–û ¬´–•–∏–º–∫–∞ –ü–ª–∞—Å—Ç–∏–∫¬ª</h1>
            <p>–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Ö–æ–¥–æ–≤ EcoTrack</p>
          </div>
          <div class="content">
            <h2>${data.title}</h2>
            <p>
              <span class="priority-badge">${data.priority.toUpperCase()}</span>
              <span class="category-badge">${data.category}</span>
            </p>
            <p>${data.message}</p>
            ${data.orderId ? `<p><strong>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</strong> ${data.orderId}</p>` : ''}
            <p>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${new Date().toLocaleString('ru-RU')}</p>
          </div>
          <div class="footer">
            <p>¬© 2025 –û–û–û ¬´–•–∏–º–∫–∞ –ü–ª–∞—Å—Ç–∏–∫¬ª. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
            <p>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.</p>
          </div>
        </div>
      </body>
      </html>
    `;
  }

  // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  setUserPreferences(userId: string, preferences: NotificationPreferences): void {
    this.userPreferences.set(userId, preferences);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  getUserPreferences(userId: string): NotificationPreferences | null {
    return this.userPreferences.get(userId) || null;
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Web Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  subscribeWebPush(userId: string, subscription: any): void {
    this.webPushSubscriptions.set(userId, subscription);
  }

  /**
   * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç Web Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  unsubscribeWebPush(userId: string): void {
    this.webPushSubscriptions.delete(userId);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
   */
  async getNotificationHistory(params?: {
    page?: number;
    limit?: number;
    status?: string;
    type?: string;
    userId?: string;
  }): Promise<{ notifications: NotificationHistory[]; total: number; page: number; limit: number }> {
    let notifications = Array.from(this.notificationHistory.values());
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if (params?.userId) {
      notifications = notifications.filter(n => n.userId === params.userId);
    }
    if (params?.status) {
      notifications = notifications.filter(n => n.status === params.status);
    }
    if (params?.type) {
      notifications = notifications.filter(n => n.type === params.type);
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    notifications.sort((a, b) => {
      const dateA = a.sentAt || new Date(0);
      const dateB = b.sentAt || new Date(0);
      return dateB.getTime() - dateA.getTime();
    });

    const total = notifications.length;
    const page = params?.page || 1;
    const limit = params?.limit || 50;
    const startIndex = (page - 1) * limit;
    const endIndex = startIndex + limit;

    const paginatedNotifications = notifications.slice(startIndex, endIndex);

    return {
      notifications: paginatedNotifications,
      total,
      page,
      limit
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–∏–æ–¥–∞)
   */
  async getNotificationStats(period?: string): Promise<NotificationStats> {
    const history = Array.from(this.notificationHistory.values());
    const now = new Date();
    let startDate: Date;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞
    switch (period) {
      case 'day':
        startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        break;
      case 'week':
        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        break;
      case 'year':
        startDate = new Date(now.getFullYear(), 0, 1);
        break;
      case 'month':
      default:
        startDate = new Date(now.getFullYear(), now.getMonth(), 1);
        break;
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥—É
    const periodHistory = history.filter(record => {
      const recordDate = record.sentAt || new Date();
      return recordDate >= startDate;
    });

    const stats: NotificationStats = {
      total: periodHistory.length,
      sent: 0,
      delivered: 0,
      failed: 0,
      pending: 0,
      byType: {
        email: 0,
        sms: 0,
        push: 0,
        telegram: 0,
        whatsapp: 0,
        'in-app': 0
      },
      byCategory: {
        order: 0,
        payment: 0,
        delivery: 0,
        system: 0,
        marketing: 0,
        analytics: 0
      },
      period: period || 'month',
      startDate,
      endDate: now
    };

    periodHistory.forEach(record => {
      // –ü–æ–¥—Å—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å—É
      if (record.status === 'sent') stats.sent++;
      else if (record.status === 'delivered') stats.delivered++;
      else if (record.status === 'failed') stats.failed++;
      else if (record.status === 'pending') stats.pending++;
      
      // –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç–∏–ø—É
      stats.byType[record.type]++;
      
      // –ü–æ–¥—Å—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö)
      const category = record.metadata?.category || 'system';
      if (stats.byCategory[category as keyof typeof stats.byCategory] !== undefined) {
        stats.byCategory[category as keyof typeof stats.byCategory]++;
      }
    });

    return stats;
  }

  /**
   * –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async sendBulkNotifications(
    userIds: string[],
    templateId: string,
    variables: Record<string, string>
  ): Promise<string[]> {
    const notificationIds: string[] = [];

    for (const userId of userIds) {
      try {
        const id = await this.sendNotificationFromTemplate(templateId, userId, variables);
        notificationIds.push(id);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
      }
    }

    return notificationIds;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async getTemplates(): Promise<NotificationTemplate[]> {
    return Array.from(this.templates.values());
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async createTemplate(templateData: Partial<NotificationTemplate>): Promise<NotificationTemplate> {
    const template: NotificationTemplate = {
      id: uuidv4(),
      name: templateData.name || '–ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω',
      type: templateData.type || 'email',
      category: templateData.category || 'system',
      subject: templateData.subject || '',
      body: templateData.body || '',
      variables: templateData.variables || []
    };

    this.templates.set(template.id, template);
    console.log(`‚úÖ –®–∞–±–ª–æ–Ω ${template.name} —Å–æ–∑–¥–∞–Ω —Å ID: ${template.id}`);
    return template;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞
   */
  async updateTemplate(templateId: string, templateData: Partial<NotificationTemplate>): Promise<NotificationTemplate> {
    const existingTemplate = this.templates.get(templateId);
    if (!existingTemplate) {
      throw new Error(`–®–∞–±–ª–æ–Ω —Å ID ${templateId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    const updatedTemplate: NotificationTemplate = {
      ...existingTemplate,
      ...templateData,
      id: templateId // Ensure ID doesn't change
    };

    this.templates.set(templateId, updatedTemplate);
    console.log(`‚úÖ –®–∞–±–ª–æ–Ω ${templateId} –æ–±–Ω–æ–≤–ª–µ–Ω`);
    return updatedTemplate;
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
   */
  async deleteTemplate(templateId: string): Promise<boolean> {
    const deleted = this.templates.delete(templateId);
    if (deleted) {
      console.log(`‚úÖ –®–∞–±–ª–æ–Ω ${templateId} —É–¥–∞–ª–µ–Ω`);
    } else {
      throw new Error(`–®–∞–±–ª–æ–Ω —Å ID ${templateId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
    return deleted;
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è subscribeWebPush)
   */
  async subscribeToPush(userId: string, subscription: any): Promise<{ success: boolean }> {
    this.subscribeWebPush(userId, subscription);
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`);
    return { success: true };
  }

  /**
   * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è unsubscribeWebPush —Å endpoint)
   */
  async unsubscribeFromPush(userId: string, endpoint?: string): Promise<{ success: boolean }> {
    this.unsubscribeWebPush(userId);
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
    return { success: true };
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async testChannel(channel: string, recipient: string, message: string): Promise<{ success: boolean; result: string }> {
    try {
      const testNotification: NotificationData = {
        userId: 'test-user',
        type: channel as NotificationData['type'],
        title: '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
        message: message || '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
        priority: 'low',
        category: 'system',
        userEmail: channel === 'email' ? recipient : undefined,
        userPhone: (channel === 'sms' || channel === 'whatsapp') ? recipient : undefined,
        telegramChatId: channel === 'telegram' ? recipient : undefined
      };

      const result = await this.sendNotification(testNotification);
      
      return {
        success: result,
        result: result ? 
          `–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${channel} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${recipient}` :
          `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ ${channel}`
      };
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ ${channel}:`, error);
      return {
        success: false,
        result: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ ${channel}: ${(error as Error).message}`
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
   */
  async getRecipientGroups(): Promise<RecipientGroup[]> {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –ë–î
    return [
      {
        id: 'all-customers',
        name: '–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã',
        description: '–í—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã',
        userIds: ['user1', 'user2', 'user3'],
        createdAt: new Date(),
        isActive: true
      },
      {
        id: 'premium-customers',
        name: '–ü—Ä–µ–º–∏—É–º –∫–ª–∏–µ–Ω—Ç—ã',
        description: '–ö–ª–∏–µ–Ω—Ç—ã —Å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–æ–π',
        userIds: ['user1'],
        createdAt: new Date(),
        isActive: true
      },
      {
        id: 'managers',
        name: '–ú–µ–Ω–µ–¥–∂–µ—Ä—ã',
        description: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏',
        userIds: ['manager1', 'manager2'],
        createdAt: new Date(),
        isActive: true
      }
    ];
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
   */
  async createRecipientGroup(groupData: Partial<RecipientGroup>): Promise<RecipientGroup> {
    const group: RecipientGroup = {
      id: uuidv4(),
      name: groupData.name || '–ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞',
      description: groupData.description || '',
      userIds: groupData.userIds || [],
      createdAt: new Date(),
      isActive: groupData.isActive !== undefined ? groupData.isActive : true
    };

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    console.log(`‚úÖ –ì—Ä—É–ø–ø–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π "${group.name}" —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${group.id}`);
    return group;
  }

  /**
   * –û—Ç–ø–∏—Å–∫–∞ –ø–æ —Ç–æ–∫–µ–Ω—É
   */
  async unsubscribeByToken(token: string): Promise<{ success: boolean }> {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤ –ë–î –∏ –æ—Ç–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–Ω –ø–æ —Ç–æ–∫–µ–Ω—É: ${token}`);
    return { success: true };
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
   */
  async sendOrderStatusNotification(orderId: string, status: string, userEmail: string, userPhone?: string): Promise<void> {
    const statusMessages = {
      pending: '–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É',
      processing: '–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ',
      delivery: '–í–∞—à –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ –¥–æ—Å—Ç–∞–≤–∫—É',
      completed: '–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω',
      cancelled: '–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω'
    };

    const message = statusMessages[status as keyof typeof statusMessages] || `–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: ${status}`;
    
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ userId –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ email (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–∑ –ë–î)
    const userId = `user_${userEmail.split('@')[0]}`;

    await this.sendNotificationFromTemplate('order-status-changed', userId, {
      orderId,
      newStatus: status
    }, {
      userEmail,
      userPhone,
      priority: 'medium'
    });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export const enhancedNotificationService = new EnhancedNotificationService();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const notificationService = enhancedNotificationService;
