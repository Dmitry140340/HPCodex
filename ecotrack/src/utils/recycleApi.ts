/**
 * API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∏—Ä–∂–∞–º–∏ –≤—Ç–æ—Ä—Å—ã—Ä—å—è (Backend)
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –æ—Ç—Ö–æ–¥—ã
 */

import axios from 'axios';

export interface MarketRate {
  materialType: string;
  pricePerKg: number;
  currency: 'RUB' | 'USD' | 'EUR';
  lastUpdated: Date;
  source: string;
  region?: string;
}

export interface RecycleApiResponse {
  success: boolean;
  data: MarketRate[];
  timestamp: string;
  source: string;
}

class RecycleApiClient {
  private baseUrl = 'https://api.recycle.com/v1'; // –ü—Ä–∏–º–µ—Ä–Ω—ã–π URL API –±–∏—Ä–∂–∏
  private apiKey = process.env.RECYCLE_API_KEY;
  private fallbackRates: Record<string, number> = {
    'PET': 52.0,
    'HDPE': 48.5, 
    'PVC': 35.0,
    'LDPE': 45.0,
    'PP': 50.0,
    'PS': 30.0,
    'OTHER': 25.0
  };

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ü–µ–Ω —Å –±–∏—Ä–∂–∏ –≤—Ç–æ—Ä—Å—ã—Ä—å—è
   */
  async getMarketRates(region: string = 'RU'): Promise<MarketRate[]> {
    try {
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
      const response = await axios.get(`${this.baseUrl}/market-rates`, {
        params: { region },
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: 10000
      });      if (response.status === 200 && (response.data as any).success) {
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã —Å –±–∏—Ä–∂–∏ –≤—Ç–æ—Ä—Å—ã—Ä—å—è');
        return (response.data as any).data;
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏ –≤—Ç–æ—Ä—Å—ã—Ä—å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ:', error);
    }

    // Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    return this.getFallbackRates();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
   */
  async getMaterialPrice(materialType: string, region?: string): Promise<number> {
    try {
      const rates = await this.getMarketRates(region);
      const rate = rates.find(r => r.materialType === materialType);
      const price = rate?.pricePerKg || this.fallbackRates[materialType] || 40.0;
      
      console.log(`üí∞ –¶–µ–Ω–∞ –¥–ª—è ${materialType}: ${price} —Ä—É–±/–∫–≥ (–∏—Å—Ç–æ—á–Ω–∏–∫: ${rate?.source || 'fallback'})`);
      return price;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', error);
      return this.fallbackRates[materialType] || 40.0;
    }
  }

  /**
   * Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –¥–µ–∫–∞–±—Ä—å 2024)
   */
  private getFallbackRates(): MarketRate[] {
    const now = new Date();
    return Object.entries(this.fallbackRates).map(([materialType, price]) => ({
      materialType,
      pricePerKg: price,
      currency: 'RUB' as const,
      lastUpdated: now,
      source: 'fallback',
      region: 'RU'
    }));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –±–∏—Ä–∂–∏
   */
  async checkApiHealth(): Promise<boolean> {
    try {
      const response = await axios.get(`${this.baseUrl}/health`, {
        timeout: 5000
      });
      return response.status === 200;
    } catch {
      return false;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async updateCachedRates(): Promise<void> {
    try {
      const rates = await this.getMarketRates();
      // TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Prisma
      console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ü–µ–Ω—ã:', rates.length, '–ø–æ–∑–∏—Ü–∏–π');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω:', error);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export const recycleApi = new RecycleApiClient();
