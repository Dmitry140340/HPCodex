
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model InventoryItem
 * 
 */
export type InventoryItem = $Result.DefaultSelection<Prisma.$InventoryItemPayload>
/**
 * Model LogisticRoute
 * 
 */
export type LogisticRoute = $Result.DefaultSelection<Prisma.$LogisticRoutePayload>
/**
 * Model RouteOption
 * 
 */
export type RouteOption = $Result.DefaultSelection<Prisma.$RouteOptionPayload>
/**
 * Model OrderDocument
 * 
 */
export type OrderDocument = $Result.DefaultSelection<Prisma.$OrderDocumentPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.inventoryItem`: Exposes CRUD operations for the **InventoryItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InventoryItems
    * const inventoryItems = await prisma.inventoryItem.findMany()
    * ```
    */
  get inventoryItem(): Prisma.InventoryItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.logisticRoute`: Exposes CRUD operations for the **LogisticRoute** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LogisticRoutes
    * const logisticRoutes = await prisma.logisticRoute.findMany()
    * ```
    */
  get logisticRoute(): Prisma.LogisticRouteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.routeOption`: Exposes CRUD operations for the **RouteOption** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RouteOptions
    * const routeOptions = await prisma.routeOption.findMany()
    * ```
    */
  get routeOption(): Prisma.RouteOptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orderDocument`: Exposes CRUD operations for the **OrderDocument** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderDocuments
    * const orderDocuments = await prisma.orderDocument.findMany()
    * ```
    */
  get orderDocument(): Prisma.OrderDocumentDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Order: 'Order',
    InventoryItem: 'InventoryItem',
    LogisticRoute: 'LogisticRoute',
    RouteOption: 'RouteOption',
    OrderDocument: 'OrderDocument'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "order" | "inventoryItem" | "logisticRoute" | "routeOption" | "orderDocument"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      InventoryItem: {
        payload: Prisma.$InventoryItemPayload<ExtArgs>
        fields: Prisma.InventoryItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          findFirst: {
            args: Prisma.InventoryItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          findMany: {
            args: Prisma.InventoryItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>[]
          }
          create: {
            args: Prisma.InventoryItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          createMany: {
            args: Prisma.InventoryItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InventoryItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>[]
          }
          delete: {
            args: Prisma.InventoryItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          update: {
            args: Prisma.InventoryItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          deleteMany: {
            args: Prisma.InventoryItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InventoryItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>[]
          }
          upsert: {
            args: Prisma.InventoryItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          aggregate: {
            args: Prisma.InventoryItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventoryItem>
          }
          groupBy: {
            args: Prisma.InventoryItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryItemCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryItemCountAggregateOutputType> | number
          }
        }
      }
      LogisticRoute: {
        payload: Prisma.$LogisticRoutePayload<ExtArgs>
        fields: Prisma.LogisticRouteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LogisticRouteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticRoutePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LogisticRouteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticRoutePayload>
          }
          findFirst: {
            args: Prisma.LogisticRouteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticRoutePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LogisticRouteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticRoutePayload>
          }
          findMany: {
            args: Prisma.LogisticRouteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticRoutePayload>[]
          }
          create: {
            args: Prisma.LogisticRouteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticRoutePayload>
          }
          createMany: {
            args: Prisma.LogisticRouteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LogisticRouteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticRoutePayload>[]
          }
          delete: {
            args: Prisma.LogisticRouteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticRoutePayload>
          }
          update: {
            args: Prisma.LogisticRouteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticRoutePayload>
          }
          deleteMany: {
            args: Prisma.LogisticRouteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LogisticRouteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LogisticRouteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticRoutePayload>[]
          }
          upsert: {
            args: Prisma.LogisticRouteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogisticRoutePayload>
          }
          aggregate: {
            args: Prisma.LogisticRouteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLogisticRoute>
          }
          groupBy: {
            args: Prisma.LogisticRouteGroupByArgs<ExtArgs>
            result: $Utils.Optional<LogisticRouteGroupByOutputType>[]
          }
          count: {
            args: Prisma.LogisticRouteCountArgs<ExtArgs>
            result: $Utils.Optional<LogisticRouteCountAggregateOutputType> | number
          }
        }
      }
      RouteOption: {
        payload: Prisma.$RouteOptionPayload<ExtArgs>
        fields: Prisma.RouteOptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RouteOptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteOptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RouteOptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteOptionPayload>
          }
          findFirst: {
            args: Prisma.RouteOptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteOptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RouteOptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteOptionPayload>
          }
          findMany: {
            args: Prisma.RouteOptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteOptionPayload>[]
          }
          create: {
            args: Prisma.RouteOptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteOptionPayload>
          }
          createMany: {
            args: Prisma.RouteOptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RouteOptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteOptionPayload>[]
          }
          delete: {
            args: Prisma.RouteOptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteOptionPayload>
          }
          update: {
            args: Prisma.RouteOptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteOptionPayload>
          }
          deleteMany: {
            args: Prisma.RouteOptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RouteOptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RouteOptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteOptionPayload>[]
          }
          upsert: {
            args: Prisma.RouteOptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteOptionPayload>
          }
          aggregate: {
            args: Prisma.RouteOptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRouteOption>
          }
          groupBy: {
            args: Prisma.RouteOptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<RouteOptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RouteOptionCountArgs<ExtArgs>
            result: $Utils.Optional<RouteOptionCountAggregateOutputType> | number
          }
        }
      }
      OrderDocument: {
        payload: Prisma.$OrderDocumentPayload<ExtArgs>
        fields: Prisma.OrderDocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderDocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderDocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderDocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderDocumentPayload>
          }
          findFirst: {
            args: Prisma.OrderDocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderDocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderDocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderDocumentPayload>
          }
          findMany: {
            args: Prisma.OrderDocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderDocumentPayload>[]
          }
          create: {
            args: Prisma.OrderDocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderDocumentPayload>
          }
          createMany: {
            args: Prisma.OrderDocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderDocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderDocumentPayload>[]
          }
          delete: {
            args: Prisma.OrderDocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderDocumentPayload>
          }
          update: {
            args: Prisma.OrderDocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderDocumentPayload>
          }
          deleteMany: {
            args: Prisma.OrderDocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderDocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderDocumentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderDocumentPayload>[]
          }
          upsert: {
            args: Prisma.OrderDocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderDocumentPayload>
          }
          aggregate: {
            args: Prisma.OrderDocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderDocument>
          }
          groupBy: {
            args: Prisma.OrderDocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderDocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderDocumentCountArgs<ExtArgs>
            result: $Utils.Optional<OrderDocumentCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    order?: OrderOmit
    inventoryItem?: InventoryItemOmit
    logisticRoute?: LogisticRouteOmit
    routeOption?: RouteOptionOmit
    orderDocument?: OrderDocumentOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    orders: number
    assignedRoutes: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | UserCountOutputTypeCountOrdersArgs
    assignedRoutes?: boolean | UserCountOutputTypeCountAssignedRoutesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedRoutesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogisticRouteWhereInput
  }


  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    logisticRoutes: number
    documents: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    logisticRoutes?: boolean | OrderCountOutputTypeCountLogisticRoutesArgs
    documents?: boolean | OrderCountOutputTypeCountDocumentsArgs
  }

  // Custom InputTypes
  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountLogisticRoutesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogisticRouteWhereInput
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderDocumentWhereInput
  }


  /**
   * Count Type LogisticRouteCountOutputType
   */

  export type LogisticRouteCountOutputType = {
    routeOptions: number
  }

  export type LogisticRouteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    routeOptions?: boolean | LogisticRouteCountOutputTypeCountRouteOptionsArgs
  }

  // Custom InputTypes
  /**
   * LogisticRouteCountOutputType without action
   */
  export type LogisticRouteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticRouteCountOutputType
     */
    select?: LogisticRouteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LogisticRouteCountOutputType without action
   */
  export type LogisticRouteCountOutputTypeCountRouteOptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RouteOptionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    isAdmin: boolean | null
    role: string | null
    companyName: string | null
    inn: string | null
    kpp: string | null
    billingAddress: string | null
    dashboardSettings: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    isAdmin: boolean | null
    role: string | null
    companyName: string | null
    inn: string | null
    kpp: string | null
    billingAddress: string | null
    dashboardSettings: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    isAdmin: number
    role: number
    companyName: number
    inn: number
    kpp: number
    billingAddress: number
    dashboardSettings: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    isAdmin?: true
    role?: true
    companyName?: true
    inn?: true
    kpp?: true
    billingAddress?: true
    dashboardSettings?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    isAdmin?: true
    role?: true
    companyName?: true
    inn?: true
    kpp?: true
    billingAddress?: true
    dashboardSettings?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    isAdmin?: true
    role?: true
    companyName?: true
    inn?: true
    kpp?: true
    billingAddress?: true
    dashboardSettings?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string
    password: string
    isAdmin: boolean
    role: string | null
    companyName: string | null
    inn: string | null
    kpp: string | null
    billingAddress: string | null
    dashboardSettings: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    isAdmin?: boolean
    role?: boolean
    companyName?: boolean
    inn?: boolean
    kpp?: boolean
    billingAddress?: boolean
    dashboardSettings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    orders?: boolean | User$ordersArgs<ExtArgs>
    assignedRoutes?: boolean | User$assignedRoutesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    isAdmin?: boolean
    role?: boolean
    companyName?: boolean
    inn?: boolean
    kpp?: boolean
    billingAddress?: boolean
    dashboardSettings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    isAdmin?: boolean
    role?: boolean
    companyName?: boolean
    inn?: boolean
    kpp?: boolean
    billingAddress?: boolean
    dashboardSettings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    isAdmin?: boolean
    role?: boolean
    companyName?: boolean
    inn?: boolean
    kpp?: boolean
    billingAddress?: boolean
    dashboardSettings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "password" | "isAdmin" | "role" | "companyName" | "inn" | "kpp" | "billingAddress" | "dashboardSettings" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | User$ordersArgs<ExtArgs>
    assignedRoutes?: boolean | User$assignedRoutesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      orders: Prisma.$OrderPayload<ExtArgs>[]
      assignedRoutes: Prisma.$LogisticRoutePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string
      password: string
      isAdmin: boolean
      role: string | null
      companyName: string | null
      inn: string | null
      kpp: string | null
      billingAddress: string | null
      dashboardSettings: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orders<T extends User$ordersArgs<ExtArgs> = {}>(args?: Subset<T, User$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignedRoutes<T extends User$assignedRoutesArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedRoutesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogisticRoutePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly isAdmin: FieldRef<"User", 'Boolean'>
    readonly role: FieldRef<"User", 'String'>
    readonly companyName: FieldRef<"User", 'String'>
    readonly inn: FieldRef<"User", 'String'>
    readonly kpp: FieldRef<"User", 'String'>
    readonly billingAddress: FieldRef<"User", 'String'>
    readonly dashboardSettings: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.orders
   */
  export type User$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * User.assignedRoutes
   */
  export type User$assignedRoutesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticRoute
     */
    select?: LogisticRouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticRoute
     */
    omit?: LogisticRouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticRouteInclude<ExtArgs> | null
    where?: LogisticRouteWhereInput
    orderBy?: LogisticRouteOrderByWithRelationInput | LogisticRouteOrderByWithRelationInput[]
    cursor?: LogisticRouteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogisticRouteScalarFieldEnum | LogisticRouteScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    volume: number | null
    price: number | null
    environmentalImpact: number | null
  }

  export type OrderSumAggregateOutputType = {
    volume: number | null
    price: number | null
    environmentalImpact: number | null
  }

  export type OrderMinAggregateOutputType = {
    id: string | null
    userId: string | null
    materialType: string | null
    volume: number | null
    price: number | null
    environmentalImpact: number | null
    status: string | null
    pickupAddress: string | null
    paymentStatus: string | null
    paymentMethod: string | null
    invoiceNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    materialType: string | null
    volume: number | null
    price: number | null
    environmentalImpact: number | null
    status: string | null
    pickupAddress: string | null
    paymentStatus: string | null
    paymentMethod: string | null
    invoiceNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    userId: number
    materialType: number
    volume: number
    price: number
    environmentalImpact: number
    status: number
    pickupAddress: number
    paymentStatus: number
    paymentMethod: number
    invoiceNumber: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    volume?: true
    price?: true
    environmentalImpact?: true
  }

  export type OrderSumAggregateInputType = {
    volume?: true
    price?: true
    environmentalImpact?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    userId?: true
    materialType?: true
    volume?: true
    price?: true
    environmentalImpact?: true
    status?: true
    pickupAddress?: true
    paymentStatus?: true
    paymentMethod?: true
    invoiceNumber?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    userId?: true
    materialType?: true
    volume?: true
    price?: true
    environmentalImpact?: true
    status?: true
    pickupAddress?: true
    paymentStatus?: true
    paymentMethod?: true
    invoiceNumber?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    userId?: true
    materialType?: true
    volume?: true
    price?: true
    environmentalImpact?: true
    status?: true
    pickupAddress?: true
    paymentStatus?: true
    paymentMethod?: true
    invoiceNumber?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: string
    userId: string
    materialType: string
    volume: number
    price: number
    environmentalImpact: number
    status: string
    pickupAddress: string
    paymentStatus: string
    paymentMethod: string | null
    invoiceNumber: string | null
    createdAt: Date
    updatedAt: Date
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    materialType?: boolean
    volume?: boolean
    price?: boolean
    environmentalImpact?: boolean
    status?: boolean
    pickupAddress?: boolean
    paymentStatus?: boolean
    paymentMethod?: boolean
    invoiceNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    logisticRoutes?: boolean | Order$logisticRoutesArgs<ExtArgs>
    documents?: boolean | Order$documentsArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    materialType?: boolean
    volume?: boolean
    price?: boolean
    environmentalImpact?: boolean
    status?: boolean
    pickupAddress?: boolean
    paymentStatus?: boolean
    paymentMethod?: boolean
    invoiceNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    materialType?: boolean
    volume?: boolean
    price?: boolean
    environmentalImpact?: boolean
    status?: boolean
    pickupAddress?: boolean
    paymentStatus?: boolean
    paymentMethod?: boolean
    invoiceNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectScalar = {
    id?: boolean
    userId?: boolean
    materialType?: boolean
    volume?: boolean
    price?: boolean
    environmentalImpact?: boolean
    status?: boolean
    pickupAddress?: boolean
    paymentStatus?: boolean
    paymentMethod?: boolean
    invoiceNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "materialType" | "volume" | "price" | "environmentalImpact" | "status" | "pickupAddress" | "paymentStatus" | "paymentMethod" | "invoiceNumber" | "createdAt" | "updatedAt", ExtArgs["result"]["order"]>
  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    logisticRoutes?: boolean | Order$logisticRoutesArgs<ExtArgs>
    documents?: boolean | Order$documentsArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      logisticRoutes: Prisma.$LogisticRoutePayload<ExtArgs>[]
      documents: Prisma.$OrderDocumentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      materialType: string
      volume: number
      price: number
      environmentalImpact: number
      status: string
      pickupAddress: string
      paymentStatus: string
      paymentMethod: string | null
      invoiceNumber: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderFindUniqueArgs>(args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderFindFirstArgs>(args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderFindManyArgs>(args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends OrderCreateArgs>(args: SelectSubset<T, OrderCreateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Orders.
     * @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderCreateManyArgs>(args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Orders and returns the data saved in the database.
     * @param {OrderCreateManyAndReturnArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends OrderDeleteArgs>(args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderUpdateArgs>(args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderDeleteManyArgs>(args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderUpdateManyArgs>(args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders and returns the data updated in the database.
     * @param {OrderUpdateManyAndReturnArgs} args - Arguments to update many Orders.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends OrderUpsertArgs>(args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    logisticRoutes<T extends Order$logisticRoutesArgs<ExtArgs> = {}>(args?: Subset<T, Order$logisticRoutesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogisticRoutePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documents<T extends Order$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Order$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Order model
   */
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", 'String'>
    readonly userId: FieldRef<"Order", 'String'>
    readonly materialType: FieldRef<"Order", 'String'>
    readonly volume: FieldRef<"Order", 'Float'>
    readonly price: FieldRef<"Order", 'Float'>
    readonly environmentalImpact: FieldRef<"Order", 'Float'>
    readonly status: FieldRef<"Order", 'String'>
    readonly pickupAddress: FieldRef<"Order", 'String'>
    readonly paymentStatus: FieldRef<"Order", 'String'>
    readonly paymentMethod: FieldRef<"Order", 'String'>
    readonly invoiceNumber: FieldRef<"Order", 'String'>
    readonly createdAt: FieldRef<"Order", 'DateTime'>
    readonly updatedAt: FieldRef<"Order", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }

  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Order createManyAndReturn
   */
  export type OrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
  }

  /**
   * Order updateManyAndReturn
   */
  export type OrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }

  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to delete.
     */
    limit?: number
  }

  /**
   * Order.logisticRoutes
   */
  export type Order$logisticRoutesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticRoute
     */
    select?: LogisticRouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticRoute
     */
    omit?: LogisticRouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticRouteInclude<ExtArgs> | null
    where?: LogisticRouteWhereInput
    orderBy?: LogisticRouteOrderByWithRelationInput | LogisticRouteOrderByWithRelationInput[]
    cursor?: LogisticRouteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogisticRouteScalarFieldEnum | LogisticRouteScalarFieldEnum[]
  }

  /**
   * Order.documents
   */
  export type Order$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderDocument
     */
    select?: OrderDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderDocument
     */
    omit?: OrderDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderDocumentInclude<ExtArgs> | null
    where?: OrderDocumentWhereInput
    orderBy?: OrderDocumentOrderByWithRelationInput | OrderDocumentOrderByWithRelationInput[]
    cursor?: OrderDocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderDocumentScalarFieldEnum | OrderDocumentScalarFieldEnum[]
  }

  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
  }


  /**
   * Model InventoryItem
   */

  export type AggregateInventoryItem = {
    _count: InventoryItemCountAggregateOutputType | null
    _avg: InventoryItemAvgAggregateOutputType | null
    _sum: InventoryItemSumAggregateOutputType | null
    _min: InventoryItemMinAggregateOutputType | null
    _max: InventoryItemMaxAggregateOutputType | null
  }

  export type InventoryItemAvgAggregateOutputType = {
    availableQuantity: number | null
    reservedQuantity: number | null
    minThreshold: number | null
    maxCapacity: number | null
  }

  export type InventoryItemSumAggregateOutputType = {
    availableQuantity: number | null
    reservedQuantity: number | null
    minThreshold: number | null
    maxCapacity: number | null
  }

  export type InventoryItemMinAggregateOutputType = {
    id: string | null
    materialType: string | null
    availableQuantity: number | null
    reservedQuantity: number | null
    location: string | null
    minThreshold: number | null
    maxCapacity: number | null
    lastUpdated: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InventoryItemMaxAggregateOutputType = {
    id: string | null
    materialType: string | null
    availableQuantity: number | null
    reservedQuantity: number | null
    location: string | null
    minThreshold: number | null
    maxCapacity: number | null
    lastUpdated: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InventoryItemCountAggregateOutputType = {
    id: number
    materialType: number
    availableQuantity: number
    reservedQuantity: number
    location: number
    minThreshold: number
    maxCapacity: number
    lastUpdated: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InventoryItemAvgAggregateInputType = {
    availableQuantity?: true
    reservedQuantity?: true
    minThreshold?: true
    maxCapacity?: true
  }

  export type InventoryItemSumAggregateInputType = {
    availableQuantity?: true
    reservedQuantity?: true
    minThreshold?: true
    maxCapacity?: true
  }

  export type InventoryItemMinAggregateInputType = {
    id?: true
    materialType?: true
    availableQuantity?: true
    reservedQuantity?: true
    location?: true
    minThreshold?: true
    maxCapacity?: true
    lastUpdated?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InventoryItemMaxAggregateInputType = {
    id?: true
    materialType?: true
    availableQuantity?: true
    reservedQuantity?: true
    location?: true
    minThreshold?: true
    maxCapacity?: true
    lastUpdated?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InventoryItemCountAggregateInputType = {
    id?: true
    materialType?: true
    availableQuantity?: true
    reservedQuantity?: true
    location?: true
    minThreshold?: true
    maxCapacity?: true
    lastUpdated?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InventoryItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryItem to aggregate.
     */
    where?: InventoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItems to fetch.
     */
    orderBy?: InventoryItemOrderByWithRelationInput | InventoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InventoryItems
    **/
    _count?: true | InventoryItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InventoryItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InventoryItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryItemMaxAggregateInputType
  }

  export type GetInventoryItemAggregateType<T extends InventoryItemAggregateArgs> = {
        [P in keyof T & keyof AggregateInventoryItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventoryItem[P]>
      : GetScalarType<T[P], AggregateInventoryItem[P]>
  }




  export type InventoryItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryItemWhereInput
    orderBy?: InventoryItemOrderByWithAggregationInput | InventoryItemOrderByWithAggregationInput[]
    by: InventoryItemScalarFieldEnum[] | InventoryItemScalarFieldEnum
    having?: InventoryItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryItemCountAggregateInputType | true
    _avg?: InventoryItemAvgAggregateInputType
    _sum?: InventoryItemSumAggregateInputType
    _min?: InventoryItemMinAggregateInputType
    _max?: InventoryItemMaxAggregateInputType
  }

  export type InventoryItemGroupByOutputType = {
    id: string
    materialType: string
    availableQuantity: number
    reservedQuantity: number
    location: string
    minThreshold: number
    maxCapacity: number
    lastUpdated: Date
    createdAt: Date
    updatedAt: Date
    _count: InventoryItemCountAggregateOutputType | null
    _avg: InventoryItemAvgAggregateOutputType | null
    _sum: InventoryItemSumAggregateOutputType | null
    _min: InventoryItemMinAggregateOutputType | null
    _max: InventoryItemMaxAggregateOutputType | null
  }

  type GetInventoryItemGroupByPayload<T extends InventoryItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryItemGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryItemGroupByOutputType[P]>
        }
      >
    >


  export type InventoryItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    materialType?: boolean
    availableQuantity?: boolean
    reservedQuantity?: boolean
    location?: boolean
    minThreshold?: boolean
    maxCapacity?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["inventoryItem"]>

  export type InventoryItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    materialType?: boolean
    availableQuantity?: boolean
    reservedQuantity?: boolean
    location?: boolean
    minThreshold?: boolean
    maxCapacity?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["inventoryItem"]>

  export type InventoryItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    materialType?: boolean
    availableQuantity?: boolean
    reservedQuantity?: boolean
    location?: boolean
    minThreshold?: boolean
    maxCapacity?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["inventoryItem"]>

  export type InventoryItemSelectScalar = {
    id?: boolean
    materialType?: boolean
    availableQuantity?: boolean
    reservedQuantity?: boolean
    location?: boolean
    minThreshold?: boolean
    maxCapacity?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InventoryItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "materialType" | "availableQuantity" | "reservedQuantity" | "location" | "minThreshold" | "maxCapacity" | "lastUpdated" | "createdAt" | "updatedAt", ExtArgs["result"]["inventoryItem"]>

  export type $InventoryItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InventoryItem"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      materialType: string
      availableQuantity: number
      reservedQuantity: number
      location: string
      minThreshold: number
      maxCapacity: number
      lastUpdated: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["inventoryItem"]>
    composites: {}
  }

  type InventoryItemGetPayload<S extends boolean | null | undefined | InventoryItemDefaultArgs> = $Result.GetResult<Prisma.$InventoryItemPayload, S>

  type InventoryItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InventoryItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InventoryItemCountAggregateInputType | true
    }

  export interface InventoryItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InventoryItem'], meta: { name: 'InventoryItem' } }
    /**
     * Find zero or one InventoryItem that matches the filter.
     * @param {InventoryItemFindUniqueArgs} args - Arguments to find a InventoryItem
     * @example
     * // Get one InventoryItem
     * const inventoryItem = await prisma.inventoryItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InventoryItemFindUniqueArgs>(args: SelectSubset<T, InventoryItemFindUniqueArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InventoryItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InventoryItemFindUniqueOrThrowArgs} args - Arguments to find a InventoryItem
     * @example
     * // Get one InventoryItem
     * const inventoryItem = await prisma.inventoryItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InventoryItemFindUniqueOrThrowArgs>(args: SelectSubset<T, InventoryItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InventoryItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemFindFirstArgs} args - Arguments to find a InventoryItem
     * @example
     * // Get one InventoryItem
     * const inventoryItem = await prisma.inventoryItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InventoryItemFindFirstArgs>(args?: SelectSubset<T, InventoryItemFindFirstArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InventoryItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemFindFirstOrThrowArgs} args - Arguments to find a InventoryItem
     * @example
     * // Get one InventoryItem
     * const inventoryItem = await prisma.inventoryItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InventoryItemFindFirstOrThrowArgs>(args?: SelectSubset<T, InventoryItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InventoryItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InventoryItems
     * const inventoryItems = await prisma.inventoryItem.findMany()
     * 
     * // Get first 10 InventoryItems
     * const inventoryItems = await prisma.inventoryItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inventoryItemWithIdOnly = await prisma.inventoryItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InventoryItemFindManyArgs>(args?: SelectSubset<T, InventoryItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InventoryItem.
     * @param {InventoryItemCreateArgs} args - Arguments to create a InventoryItem.
     * @example
     * // Create one InventoryItem
     * const InventoryItem = await prisma.inventoryItem.create({
     *   data: {
     *     // ... data to create a InventoryItem
     *   }
     * })
     * 
     */
    create<T extends InventoryItemCreateArgs>(args: SelectSubset<T, InventoryItemCreateArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InventoryItems.
     * @param {InventoryItemCreateManyArgs} args - Arguments to create many InventoryItems.
     * @example
     * // Create many InventoryItems
     * const inventoryItem = await prisma.inventoryItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InventoryItemCreateManyArgs>(args?: SelectSubset<T, InventoryItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InventoryItems and returns the data saved in the database.
     * @param {InventoryItemCreateManyAndReturnArgs} args - Arguments to create many InventoryItems.
     * @example
     * // Create many InventoryItems
     * const inventoryItem = await prisma.inventoryItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InventoryItems and only return the `id`
     * const inventoryItemWithIdOnly = await prisma.inventoryItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InventoryItemCreateManyAndReturnArgs>(args?: SelectSubset<T, InventoryItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InventoryItem.
     * @param {InventoryItemDeleteArgs} args - Arguments to delete one InventoryItem.
     * @example
     * // Delete one InventoryItem
     * const InventoryItem = await prisma.inventoryItem.delete({
     *   where: {
     *     // ... filter to delete one InventoryItem
     *   }
     * })
     * 
     */
    delete<T extends InventoryItemDeleteArgs>(args: SelectSubset<T, InventoryItemDeleteArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InventoryItem.
     * @param {InventoryItemUpdateArgs} args - Arguments to update one InventoryItem.
     * @example
     * // Update one InventoryItem
     * const inventoryItem = await prisma.inventoryItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InventoryItemUpdateArgs>(args: SelectSubset<T, InventoryItemUpdateArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InventoryItems.
     * @param {InventoryItemDeleteManyArgs} args - Arguments to filter InventoryItems to delete.
     * @example
     * // Delete a few InventoryItems
     * const { count } = await prisma.inventoryItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InventoryItemDeleteManyArgs>(args?: SelectSubset<T, InventoryItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InventoryItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InventoryItems
     * const inventoryItem = await prisma.inventoryItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InventoryItemUpdateManyArgs>(args: SelectSubset<T, InventoryItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InventoryItems and returns the data updated in the database.
     * @param {InventoryItemUpdateManyAndReturnArgs} args - Arguments to update many InventoryItems.
     * @example
     * // Update many InventoryItems
     * const inventoryItem = await prisma.inventoryItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InventoryItems and only return the `id`
     * const inventoryItemWithIdOnly = await prisma.inventoryItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InventoryItemUpdateManyAndReturnArgs>(args: SelectSubset<T, InventoryItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InventoryItem.
     * @param {InventoryItemUpsertArgs} args - Arguments to update or create a InventoryItem.
     * @example
     * // Update or create a InventoryItem
     * const inventoryItem = await prisma.inventoryItem.upsert({
     *   create: {
     *     // ... data to create a InventoryItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InventoryItem we want to update
     *   }
     * })
     */
    upsert<T extends InventoryItemUpsertArgs>(args: SelectSubset<T, InventoryItemUpsertArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InventoryItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemCountArgs} args - Arguments to filter InventoryItems to count.
     * @example
     * // Count the number of InventoryItems
     * const count = await prisma.inventoryItem.count({
     *   where: {
     *     // ... the filter for the InventoryItems we want to count
     *   }
     * })
    **/
    count<T extends InventoryItemCountArgs>(
      args?: Subset<T, InventoryItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InventoryItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryItemAggregateArgs>(args: Subset<T, InventoryItemAggregateArgs>): Prisma.PrismaPromise<GetInventoryItemAggregateType<T>>

    /**
     * Group by InventoryItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryItemGroupByArgs['orderBy'] }
        : { orderBy?: InventoryItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InventoryItem model
   */
  readonly fields: InventoryItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InventoryItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InventoryItem model
   */
  interface InventoryItemFieldRefs {
    readonly id: FieldRef<"InventoryItem", 'String'>
    readonly materialType: FieldRef<"InventoryItem", 'String'>
    readonly availableQuantity: FieldRef<"InventoryItem", 'Float'>
    readonly reservedQuantity: FieldRef<"InventoryItem", 'Float'>
    readonly location: FieldRef<"InventoryItem", 'String'>
    readonly minThreshold: FieldRef<"InventoryItem", 'Float'>
    readonly maxCapacity: FieldRef<"InventoryItem", 'Float'>
    readonly lastUpdated: FieldRef<"InventoryItem", 'DateTime'>
    readonly createdAt: FieldRef<"InventoryItem", 'DateTime'>
    readonly updatedAt: FieldRef<"InventoryItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InventoryItem findUnique
   */
  export type InventoryItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Filter, which InventoryItem to fetch.
     */
    where: InventoryItemWhereUniqueInput
  }

  /**
   * InventoryItem findUniqueOrThrow
   */
  export type InventoryItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Filter, which InventoryItem to fetch.
     */
    where: InventoryItemWhereUniqueInput
  }

  /**
   * InventoryItem findFirst
   */
  export type InventoryItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Filter, which InventoryItem to fetch.
     */
    where?: InventoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItems to fetch.
     */
    orderBy?: InventoryItemOrderByWithRelationInput | InventoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryItems.
     */
    cursor?: InventoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryItems.
     */
    distinct?: InventoryItemScalarFieldEnum | InventoryItemScalarFieldEnum[]
  }

  /**
   * InventoryItem findFirstOrThrow
   */
  export type InventoryItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Filter, which InventoryItem to fetch.
     */
    where?: InventoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItems to fetch.
     */
    orderBy?: InventoryItemOrderByWithRelationInput | InventoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryItems.
     */
    cursor?: InventoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryItems.
     */
    distinct?: InventoryItemScalarFieldEnum | InventoryItemScalarFieldEnum[]
  }

  /**
   * InventoryItem findMany
   */
  export type InventoryItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Filter, which InventoryItems to fetch.
     */
    where?: InventoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItems to fetch.
     */
    orderBy?: InventoryItemOrderByWithRelationInput | InventoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InventoryItems.
     */
    cursor?: InventoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItems.
     */
    skip?: number
    distinct?: InventoryItemScalarFieldEnum | InventoryItemScalarFieldEnum[]
  }

  /**
   * InventoryItem create
   */
  export type InventoryItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * The data needed to create a InventoryItem.
     */
    data: XOR<InventoryItemCreateInput, InventoryItemUncheckedCreateInput>
  }

  /**
   * InventoryItem createMany
   */
  export type InventoryItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InventoryItems.
     */
    data: InventoryItemCreateManyInput | InventoryItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InventoryItem createManyAndReturn
   */
  export type InventoryItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * The data used to create many InventoryItems.
     */
    data: InventoryItemCreateManyInput | InventoryItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InventoryItem update
   */
  export type InventoryItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * The data needed to update a InventoryItem.
     */
    data: XOR<InventoryItemUpdateInput, InventoryItemUncheckedUpdateInput>
    /**
     * Choose, which InventoryItem to update.
     */
    where: InventoryItemWhereUniqueInput
  }

  /**
   * InventoryItem updateMany
   */
  export type InventoryItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InventoryItems.
     */
    data: XOR<InventoryItemUpdateManyMutationInput, InventoryItemUncheckedUpdateManyInput>
    /**
     * Filter which InventoryItems to update
     */
    where?: InventoryItemWhereInput
    /**
     * Limit how many InventoryItems to update.
     */
    limit?: number
  }

  /**
   * InventoryItem updateManyAndReturn
   */
  export type InventoryItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * The data used to update InventoryItems.
     */
    data: XOR<InventoryItemUpdateManyMutationInput, InventoryItemUncheckedUpdateManyInput>
    /**
     * Filter which InventoryItems to update
     */
    where?: InventoryItemWhereInput
    /**
     * Limit how many InventoryItems to update.
     */
    limit?: number
  }

  /**
   * InventoryItem upsert
   */
  export type InventoryItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * The filter to search for the InventoryItem to update in case it exists.
     */
    where: InventoryItemWhereUniqueInput
    /**
     * In case the InventoryItem found by the `where` argument doesn't exist, create a new InventoryItem with this data.
     */
    create: XOR<InventoryItemCreateInput, InventoryItemUncheckedCreateInput>
    /**
     * In case the InventoryItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryItemUpdateInput, InventoryItemUncheckedUpdateInput>
  }

  /**
   * InventoryItem delete
   */
  export type InventoryItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Filter which InventoryItem to delete.
     */
    where: InventoryItemWhereUniqueInput
  }

  /**
   * InventoryItem deleteMany
   */
  export type InventoryItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryItems to delete
     */
    where?: InventoryItemWhereInput
    /**
     * Limit how many InventoryItems to delete.
     */
    limit?: number
  }

  /**
   * InventoryItem without action
   */
  export type InventoryItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
  }


  /**
   * Model LogisticRoute
   */

  export type AggregateLogisticRoute = {
    _count: LogisticRouteCountAggregateOutputType | null
    _avg: LogisticRouteAvgAggregateOutputType | null
    _sum: LogisticRouteSumAggregateOutputType | null
    _min: LogisticRouteMinAggregateOutputType | null
    _max: LogisticRouteMaxAggregateOutputType | null
  }

  export type LogisticRouteAvgAggregateOutputType = {
    estimatedDistance: number | null
  }

  export type LogisticRouteSumAggregateOutputType = {
    estimatedDistance: number | null
  }

  export type LogisticRouteMinAggregateOutputType = {
    id: string | null
    orderId: string | null
    pickupAddress: string | null
    deliveryAddress: string | null
    estimatedDistance: number | null
    status: string | null
    assignedLogisticianId: string | null
    selectedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LogisticRouteMaxAggregateOutputType = {
    id: string | null
    orderId: string | null
    pickupAddress: string | null
    deliveryAddress: string | null
    estimatedDistance: number | null
    status: string | null
    assignedLogisticianId: string | null
    selectedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LogisticRouteCountAggregateOutputType = {
    id: number
    orderId: number
    pickupAddress: number
    deliveryAddress: number
    estimatedDistance: number
    status: number
    assignedLogisticianId: number
    selectedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LogisticRouteAvgAggregateInputType = {
    estimatedDistance?: true
  }

  export type LogisticRouteSumAggregateInputType = {
    estimatedDistance?: true
  }

  export type LogisticRouteMinAggregateInputType = {
    id?: true
    orderId?: true
    pickupAddress?: true
    deliveryAddress?: true
    estimatedDistance?: true
    status?: true
    assignedLogisticianId?: true
    selectedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LogisticRouteMaxAggregateInputType = {
    id?: true
    orderId?: true
    pickupAddress?: true
    deliveryAddress?: true
    estimatedDistance?: true
    status?: true
    assignedLogisticianId?: true
    selectedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LogisticRouteCountAggregateInputType = {
    id?: true
    orderId?: true
    pickupAddress?: true
    deliveryAddress?: true
    estimatedDistance?: true
    status?: true
    assignedLogisticianId?: true
    selectedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LogisticRouteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LogisticRoute to aggregate.
     */
    where?: LogisticRouteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogisticRoutes to fetch.
     */
    orderBy?: LogisticRouteOrderByWithRelationInput | LogisticRouteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LogisticRouteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogisticRoutes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogisticRoutes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LogisticRoutes
    **/
    _count?: true | LogisticRouteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LogisticRouteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LogisticRouteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogisticRouteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogisticRouteMaxAggregateInputType
  }

  export type GetLogisticRouteAggregateType<T extends LogisticRouteAggregateArgs> = {
        [P in keyof T & keyof AggregateLogisticRoute]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLogisticRoute[P]>
      : GetScalarType<T[P], AggregateLogisticRoute[P]>
  }




  export type LogisticRouteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogisticRouteWhereInput
    orderBy?: LogisticRouteOrderByWithAggregationInput | LogisticRouteOrderByWithAggregationInput[]
    by: LogisticRouteScalarFieldEnum[] | LogisticRouteScalarFieldEnum
    having?: LogisticRouteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogisticRouteCountAggregateInputType | true
    _avg?: LogisticRouteAvgAggregateInputType
    _sum?: LogisticRouteSumAggregateInputType
    _min?: LogisticRouteMinAggregateInputType
    _max?: LogisticRouteMaxAggregateInputType
  }

  export type LogisticRouteGroupByOutputType = {
    id: string
    orderId: string
    pickupAddress: string
    deliveryAddress: string
    estimatedDistance: number
    status: string
    assignedLogisticianId: string
    selectedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: LogisticRouteCountAggregateOutputType | null
    _avg: LogisticRouteAvgAggregateOutputType | null
    _sum: LogisticRouteSumAggregateOutputType | null
    _min: LogisticRouteMinAggregateOutputType | null
    _max: LogisticRouteMaxAggregateOutputType | null
  }

  type GetLogisticRouteGroupByPayload<T extends LogisticRouteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LogisticRouteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LogisticRouteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LogisticRouteGroupByOutputType[P]>
            : GetScalarType<T[P], LogisticRouteGroupByOutputType[P]>
        }
      >
    >


  export type LogisticRouteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    pickupAddress?: boolean
    deliveryAddress?: boolean
    estimatedDistance?: boolean
    status?: boolean
    assignedLogisticianId?: boolean
    selectedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    assignedLogistician?: boolean | UserDefaultArgs<ExtArgs>
    routeOptions?: boolean | LogisticRoute$routeOptionsArgs<ExtArgs>
    _count?: boolean | LogisticRouteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["logisticRoute"]>

  export type LogisticRouteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    pickupAddress?: boolean
    deliveryAddress?: boolean
    estimatedDistance?: boolean
    status?: boolean
    assignedLogisticianId?: boolean
    selectedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    assignedLogistician?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["logisticRoute"]>

  export type LogisticRouteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    pickupAddress?: boolean
    deliveryAddress?: boolean
    estimatedDistance?: boolean
    status?: boolean
    assignedLogisticianId?: boolean
    selectedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    assignedLogistician?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["logisticRoute"]>

  export type LogisticRouteSelectScalar = {
    id?: boolean
    orderId?: boolean
    pickupAddress?: boolean
    deliveryAddress?: boolean
    estimatedDistance?: boolean
    status?: boolean
    assignedLogisticianId?: boolean
    selectedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LogisticRouteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderId" | "pickupAddress" | "deliveryAddress" | "estimatedDistance" | "status" | "assignedLogisticianId" | "selectedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["logisticRoute"]>
  export type LogisticRouteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    assignedLogistician?: boolean | UserDefaultArgs<ExtArgs>
    routeOptions?: boolean | LogisticRoute$routeOptionsArgs<ExtArgs>
    _count?: boolean | LogisticRouteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LogisticRouteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    assignedLogistician?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LogisticRouteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    assignedLogistician?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LogisticRoutePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LogisticRoute"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
      assignedLogistician: Prisma.$UserPayload<ExtArgs>
      routeOptions: Prisma.$RouteOptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      orderId: string
      pickupAddress: string
      deliveryAddress: string
      estimatedDistance: number
      status: string
      assignedLogisticianId: string
      selectedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["logisticRoute"]>
    composites: {}
  }

  type LogisticRouteGetPayload<S extends boolean | null | undefined | LogisticRouteDefaultArgs> = $Result.GetResult<Prisma.$LogisticRoutePayload, S>

  type LogisticRouteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LogisticRouteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LogisticRouteCountAggregateInputType | true
    }

  export interface LogisticRouteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LogisticRoute'], meta: { name: 'LogisticRoute' } }
    /**
     * Find zero or one LogisticRoute that matches the filter.
     * @param {LogisticRouteFindUniqueArgs} args - Arguments to find a LogisticRoute
     * @example
     * // Get one LogisticRoute
     * const logisticRoute = await prisma.logisticRoute.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LogisticRouteFindUniqueArgs>(args: SelectSubset<T, LogisticRouteFindUniqueArgs<ExtArgs>>): Prisma__LogisticRouteClient<$Result.GetResult<Prisma.$LogisticRoutePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LogisticRoute that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LogisticRouteFindUniqueOrThrowArgs} args - Arguments to find a LogisticRoute
     * @example
     * // Get one LogisticRoute
     * const logisticRoute = await prisma.logisticRoute.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LogisticRouteFindUniqueOrThrowArgs>(args: SelectSubset<T, LogisticRouteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LogisticRouteClient<$Result.GetResult<Prisma.$LogisticRoutePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LogisticRoute that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogisticRouteFindFirstArgs} args - Arguments to find a LogisticRoute
     * @example
     * // Get one LogisticRoute
     * const logisticRoute = await prisma.logisticRoute.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LogisticRouteFindFirstArgs>(args?: SelectSubset<T, LogisticRouteFindFirstArgs<ExtArgs>>): Prisma__LogisticRouteClient<$Result.GetResult<Prisma.$LogisticRoutePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LogisticRoute that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogisticRouteFindFirstOrThrowArgs} args - Arguments to find a LogisticRoute
     * @example
     * // Get one LogisticRoute
     * const logisticRoute = await prisma.logisticRoute.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LogisticRouteFindFirstOrThrowArgs>(args?: SelectSubset<T, LogisticRouteFindFirstOrThrowArgs<ExtArgs>>): Prisma__LogisticRouteClient<$Result.GetResult<Prisma.$LogisticRoutePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LogisticRoutes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogisticRouteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LogisticRoutes
     * const logisticRoutes = await prisma.logisticRoute.findMany()
     * 
     * // Get first 10 LogisticRoutes
     * const logisticRoutes = await prisma.logisticRoute.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const logisticRouteWithIdOnly = await prisma.logisticRoute.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LogisticRouteFindManyArgs>(args?: SelectSubset<T, LogisticRouteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogisticRoutePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LogisticRoute.
     * @param {LogisticRouteCreateArgs} args - Arguments to create a LogisticRoute.
     * @example
     * // Create one LogisticRoute
     * const LogisticRoute = await prisma.logisticRoute.create({
     *   data: {
     *     // ... data to create a LogisticRoute
     *   }
     * })
     * 
     */
    create<T extends LogisticRouteCreateArgs>(args: SelectSubset<T, LogisticRouteCreateArgs<ExtArgs>>): Prisma__LogisticRouteClient<$Result.GetResult<Prisma.$LogisticRoutePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LogisticRoutes.
     * @param {LogisticRouteCreateManyArgs} args - Arguments to create many LogisticRoutes.
     * @example
     * // Create many LogisticRoutes
     * const logisticRoute = await prisma.logisticRoute.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LogisticRouteCreateManyArgs>(args?: SelectSubset<T, LogisticRouteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LogisticRoutes and returns the data saved in the database.
     * @param {LogisticRouteCreateManyAndReturnArgs} args - Arguments to create many LogisticRoutes.
     * @example
     * // Create many LogisticRoutes
     * const logisticRoute = await prisma.logisticRoute.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LogisticRoutes and only return the `id`
     * const logisticRouteWithIdOnly = await prisma.logisticRoute.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LogisticRouteCreateManyAndReturnArgs>(args?: SelectSubset<T, LogisticRouteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogisticRoutePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LogisticRoute.
     * @param {LogisticRouteDeleteArgs} args - Arguments to delete one LogisticRoute.
     * @example
     * // Delete one LogisticRoute
     * const LogisticRoute = await prisma.logisticRoute.delete({
     *   where: {
     *     // ... filter to delete one LogisticRoute
     *   }
     * })
     * 
     */
    delete<T extends LogisticRouteDeleteArgs>(args: SelectSubset<T, LogisticRouteDeleteArgs<ExtArgs>>): Prisma__LogisticRouteClient<$Result.GetResult<Prisma.$LogisticRoutePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LogisticRoute.
     * @param {LogisticRouteUpdateArgs} args - Arguments to update one LogisticRoute.
     * @example
     * // Update one LogisticRoute
     * const logisticRoute = await prisma.logisticRoute.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LogisticRouteUpdateArgs>(args: SelectSubset<T, LogisticRouteUpdateArgs<ExtArgs>>): Prisma__LogisticRouteClient<$Result.GetResult<Prisma.$LogisticRoutePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LogisticRoutes.
     * @param {LogisticRouteDeleteManyArgs} args - Arguments to filter LogisticRoutes to delete.
     * @example
     * // Delete a few LogisticRoutes
     * const { count } = await prisma.logisticRoute.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LogisticRouteDeleteManyArgs>(args?: SelectSubset<T, LogisticRouteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LogisticRoutes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogisticRouteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LogisticRoutes
     * const logisticRoute = await prisma.logisticRoute.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LogisticRouteUpdateManyArgs>(args: SelectSubset<T, LogisticRouteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LogisticRoutes and returns the data updated in the database.
     * @param {LogisticRouteUpdateManyAndReturnArgs} args - Arguments to update many LogisticRoutes.
     * @example
     * // Update many LogisticRoutes
     * const logisticRoute = await prisma.logisticRoute.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LogisticRoutes and only return the `id`
     * const logisticRouteWithIdOnly = await prisma.logisticRoute.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LogisticRouteUpdateManyAndReturnArgs>(args: SelectSubset<T, LogisticRouteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogisticRoutePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LogisticRoute.
     * @param {LogisticRouteUpsertArgs} args - Arguments to update or create a LogisticRoute.
     * @example
     * // Update or create a LogisticRoute
     * const logisticRoute = await prisma.logisticRoute.upsert({
     *   create: {
     *     // ... data to create a LogisticRoute
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LogisticRoute we want to update
     *   }
     * })
     */
    upsert<T extends LogisticRouteUpsertArgs>(args: SelectSubset<T, LogisticRouteUpsertArgs<ExtArgs>>): Prisma__LogisticRouteClient<$Result.GetResult<Prisma.$LogisticRoutePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LogisticRoutes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogisticRouteCountArgs} args - Arguments to filter LogisticRoutes to count.
     * @example
     * // Count the number of LogisticRoutes
     * const count = await prisma.logisticRoute.count({
     *   where: {
     *     // ... the filter for the LogisticRoutes we want to count
     *   }
     * })
    **/
    count<T extends LogisticRouteCountArgs>(
      args?: Subset<T, LogisticRouteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogisticRouteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LogisticRoute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogisticRouteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogisticRouteAggregateArgs>(args: Subset<T, LogisticRouteAggregateArgs>): Prisma.PrismaPromise<GetLogisticRouteAggregateType<T>>

    /**
     * Group by LogisticRoute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogisticRouteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LogisticRouteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LogisticRouteGroupByArgs['orderBy'] }
        : { orderBy?: LogisticRouteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LogisticRouteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogisticRouteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LogisticRoute model
   */
  readonly fields: LogisticRouteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LogisticRoute.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LogisticRouteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assignedLogistician<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    routeOptions<T extends LogisticRoute$routeOptionsArgs<ExtArgs> = {}>(args?: Subset<T, LogisticRoute$routeOptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RouteOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LogisticRoute model
   */
  interface LogisticRouteFieldRefs {
    readonly id: FieldRef<"LogisticRoute", 'String'>
    readonly orderId: FieldRef<"LogisticRoute", 'String'>
    readonly pickupAddress: FieldRef<"LogisticRoute", 'String'>
    readonly deliveryAddress: FieldRef<"LogisticRoute", 'String'>
    readonly estimatedDistance: FieldRef<"LogisticRoute", 'Float'>
    readonly status: FieldRef<"LogisticRoute", 'String'>
    readonly assignedLogisticianId: FieldRef<"LogisticRoute", 'String'>
    readonly selectedAt: FieldRef<"LogisticRoute", 'DateTime'>
    readonly createdAt: FieldRef<"LogisticRoute", 'DateTime'>
    readonly updatedAt: FieldRef<"LogisticRoute", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LogisticRoute findUnique
   */
  export type LogisticRouteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticRoute
     */
    select?: LogisticRouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticRoute
     */
    omit?: LogisticRouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticRouteInclude<ExtArgs> | null
    /**
     * Filter, which LogisticRoute to fetch.
     */
    where: LogisticRouteWhereUniqueInput
  }

  /**
   * LogisticRoute findUniqueOrThrow
   */
  export type LogisticRouteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticRoute
     */
    select?: LogisticRouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticRoute
     */
    omit?: LogisticRouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticRouteInclude<ExtArgs> | null
    /**
     * Filter, which LogisticRoute to fetch.
     */
    where: LogisticRouteWhereUniqueInput
  }

  /**
   * LogisticRoute findFirst
   */
  export type LogisticRouteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticRoute
     */
    select?: LogisticRouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticRoute
     */
    omit?: LogisticRouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticRouteInclude<ExtArgs> | null
    /**
     * Filter, which LogisticRoute to fetch.
     */
    where?: LogisticRouteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogisticRoutes to fetch.
     */
    orderBy?: LogisticRouteOrderByWithRelationInput | LogisticRouteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LogisticRoutes.
     */
    cursor?: LogisticRouteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogisticRoutes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogisticRoutes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LogisticRoutes.
     */
    distinct?: LogisticRouteScalarFieldEnum | LogisticRouteScalarFieldEnum[]
  }

  /**
   * LogisticRoute findFirstOrThrow
   */
  export type LogisticRouteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticRoute
     */
    select?: LogisticRouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticRoute
     */
    omit?: LogisticRouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticRouteInclude<ExtArgs> | null
    /**
     * Filter, which LogisticRoute to fetch.
     */
    where?: LogisticRouteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogisticRoutes to fetch.
     */
    orderBy?: LogisticRouteOrderByWithRelationInput | LogisticRouteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LogisticRoutes.
     */
    cursor?: LogisticRouteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogisticRoutes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogisticRoutes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LogisticRoutes.
     */
    distinct?: LogisticRouteScalarFieldEnum | LogisticRouteScalarFieldEnum[]
  }

  /**
   * LogisticRoute findMany
   */
  export type LogisticRouteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticRoute
     */
    select?: LogisticRouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticRoute
     */
    omit?: LogisticRouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticRouteInclude<ExtArgs> | null
    /**
     * Filter, which LogisticRoutes to fetch.
     */
    where?: LogisticRouteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LogisticRoutes to fetch.
     */
    orderBy?: LogisticRouteOrderByWithRelationInput | LogisticRouteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LogisticRoutes.
     */
    cursor?: LogisticRouteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LogisticRoutes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LogisticRoutes.
     */
    skip?: number
    distinct?: LogisticRouteScalarFieldEnum | LogisticRouteScalarFieldEnum[]
  }

  /**
   * LogisticRoute create
   */
  export type LogisticRouteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticRoute
     */
    select?: LogisticRouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticRoute
     */
    omit?: LogisticRouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticRouteInclude<ExtArgs> | null
    /**
     * The data needed to create a LogisticRoute.
     */
    data: XOR<LogisticRouteCreateInput, LogisticRouteUncheckedCreateInput>
  }

  /**
   * LogisticRoute createMany
   */
  export type LogisticRouteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LogisticRoutes.
     */
    data: LogisticRouteCreateManyInput | LogisticRouteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LogisticRoute createManyAndReturn
   */
  export type LogisticRouteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticRoute
     */
    select?: LogisticRouteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticRoute
     */
    omit?: LogisticRouteOmit<ExtArgs> | null
    /**
     * The data used to create many LogisticRoutes.
     */
    data: LogisticRouteCreateManyInput | LogisticRouteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticRouteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LogisticRoute update
   */
  export type LogisticRouteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticRoute
     */
    select?: LogisticRouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticRoute
     */
    omit?: LogisticRouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticRouteInclude<ExtArgs> | null
    /**
     * The data needed to update a LogisticRoute.
     */
    data: XOR<LogisticRouteUpdateInput, LogisticRouteUncheckedUpdateInput>
    /**
     * Choose, which LogisticRoute to update.
     */
    where: LogisticRouteWhereUniqueInput
  }

  /**
   * LogisticRoute updateMany
   */
  export type LogisticRouteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LogisticRoutes.
     */
    data: XOR<LogisticRouteUpdateManyMutationInput, LogisticRouteUncheckedUpdateManyInput>
    /**
     * Filter which LogisticRoutes to update
     */
    where?: LogisticRouteWhereInput
    /**
     * Limit how many LogisticRoutes to update.
     */
    limit?: number
  }

  /**
   * LogisticRoute updateManyAndReturn
   */
  export type LogisticRouteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticRoute
     */
    select?: LogisticRouteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticRoute
     */
    omit?: LogisticRouteOmit<ExtArgs> | null
    /**
     * The data used to update LogisticRoutes.
     */
    data: XOR<LogisticRouteUpdateManyMutationInput, LogisticRouteUncheckedUpdateManyInput>
    /**
     * Filter which LogisticRoutes to update
     */
    where?: LogisticRouteWhereInput
    /**
     * Limit how many LogisticRoutes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticRouteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LogisticRoute upsert
   */
  export type LogisticRouteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticRoute
     */
    select?: LogisticRouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticRoute
     */
    omit?: LogisticRouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticRouteInclude<ExtArgs> | null
    /**
     * The filter to search for the LogisticRoute to update in case it exists.
     */
    where: LogisticRouteWhereUniqueInput
    /**
     * In case the LogisticRoute found by the `where` argument doesn't exist, create a new LogisticRoute with this data.
     */
    create: XOR<LogisticRouteCreateInput, LogisticRouteUncheckedCreateInput>
    /**
     * In case the LogisticRoute was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LogisticRouteUpdateInput, LogisticRouteUncheckedUpdateInput>
  }

  /**
   * LogisticRoute delete
   */
  export type LogisticRouteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticRoute
     */
    select?: LogisticRouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticRoute
     */
    omit?: LogisticRouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticRouteInclude<ExtArgs> | null
    /**
     * Filter which LogisticRoute to delete.
     */
    where: LogisticRouteWhereUniqueInput
  }

  /**
   * LogisticRoute deleteMany
   */
  export type LogisticRouteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LogisticRoutes to delete
     */
    where?: LogisticRouteWhereInput
    /**
     * Limit how many LogisticRoutes to delete.
     */
    limit?: number
  }

  /**
   * LogisticRoute.routeOptions
   */
  export type LogisticRoute$routeOptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteOption
     */
    select?: RouteOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RouteOption
     */
    omit?: RouteOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteOptionInclude<ExtArgs> | null
    where?: RouteOptionWhereInput
    orderBy?: RouteOptionOrderByWithRelationInput | RouteOptionOrderByWithRelationInput[]
    cursor?: RouteOptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RouteOptionScalarFieldEnum | RouteOptionScalarFieldEnum[]
  }

  /**
   * LogisticRoute without action
   */
  export type LogisticRouteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LogisticRoute
     */
    select?: LogisticRouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LogisticRoute
     */
    omit?: LogisticRouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogisticRouteInclude<ExtArgs> | null
  }


  /**
   * Model RouteOption
   */

  export type AggregateRouteOption = {
    _count: RouteOptionCountAggregateOutputType | null
    _avg: RouteOptionAvgAggregateOutputType | null
    _sum: RouteOptionSumAggregateOutputType | null
    _min: RouteOptionMinAggregateOutputType | null
    _max: RouteOptionMaxAggregateOutputType | null
  }

  export type RouteOptionAvgAggregateOutputType = {
    estimatedCost: number | null
    estimatedTime: number | null
  }

  export type RouteOptionSumAggregateOutputType = {
    estimatedCost: number | null
    estimatedTime: number | null
  }

  export type RouteOptionMinAggregateOutputType = {
    id: string | null
    logisticRouteId: string | null
    name: string | null
    estimatedCost: number | null
    estimatedTime: number | null
    transportType: string | null
    description: string | null
    isSelected: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RouteOptionMaxAggregateOutputType = {
    id: string | null
    logisticRouteId: string | null
    name: string | null
    estimatedCost: number | null
    estimatedTime: number | null
    transportType: string | null
    description: string | null
    isSelected: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RouteOptionCountAggregateOutputType = {
    id: number
    logisticRouteId: number
    name: number
    estimatedCost: number
    estimatedTime: number
    transportType: number
    description: number
    isSelected: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RouteOptionAvgAggregateInputType = {
    estimatedCost?: true
    estimatedTime?: true
  }

  export type RouteOptionSumAggregateInputType = {
    estimatedCost?: true
    estimatedTime?: true
  }

  export type RouteOptionMinAggregateInputType = {
    id?: true
    logisticRouteId?: true
    name?: true
    estimatedCost?: true
    estimatedTime?: true
    transportType?: true
    description?: true
    isSelected?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RouteOptionMaxAggregateInputType = {
    id?: true
    logisticRouteId?: true
    name?: true
    estimatedCost?: true
    estimatedTime?: true
    transportType?: true
    description?: true
    isSelected?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RouteOptionCountAggregateInputType = {
    id?: true
    logisticRouteId?: true
    name?: true
    estimatedCost?: true
    estimatedTime?: true
    transportType?: true
    description?: true
    isSelected?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RouteOptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RouteOption to aggregate.
     */
    where?: RouteOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RouteOptions to fetch.
     */
    orderBy?: RouteOptionOrderByWithRelationInput | RouteOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RouteOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RouteOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RouteOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RouteOptions
    **/
    _count?: true | RouteOptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RouteOptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RouteOptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RouteOptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RouteOptionMaxAggregateInputType
  }

  export type GetRouteOptionAggregateType<T extends RouteOptionAggregateArgs> = {
        [P in keyof T & keyof AggregateRouteOption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRouteOption[P]>
      : GetScalarType<T[P], AggregateRouteOption[P]>
  }




  export type RouteOptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RouteOptionWhereInput
    orderBy?: RouteOptionOrderByWithAggregationInput | RouteOptionOrderByWithAggregationInput[]
    by: RouteOptionScalarFieldEnum[] | RouteOptionScalarFieldEnum
    having?: RouteOptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RouteOptionCountAggregateInputType | true
    _avg?: RouteOptionAvgAggregateInputType
    _sum?: RouteOptionSumAggregateInputType
    _min?: RouteOptionMinAggregateInputType
    _max?: RouteOptionMaxAggregateInputType
  }

  export type RouteOptionGroupByOutputType = {
    id: string
    logisticRouteId: string
    name: string
    estimatedCost: number
    estimatedTime: number
    transportType: string
    description: string | null
    isSelected: boolean
    createdAt: Date
    updatedAt: Date
    _count: RouteOptionCountAggregateOutputType | null
    _avg: RouteOptionAvgAggregateOutputType | null
    _sum: RouteOptionSumAggregateOutputType | null
    _min: RouteOptionMinAggregateOutputType | null
    _max: RouteOptionMaxAggregateOutputType | null
  }

  type GetRouteOptionGroupByPayload<T extends RouteOptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RouteOptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RouteOptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RouteOptionGroupByOutputType[P]>
            : GetScalarType<T[P], RouteOptionGroupByOutputType[P]>
        }
      >
    >


  export type RouteOptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    logisticRouteId?: boolean
    name?: boolean
    estimatedCost?: boolean
    estimatedTime?: boolean
    transportType?: boolean
    description?: boolean
    isSelected?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    logisticRoute?: boolean | LogisticRouteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["routeOption"]>

  export type RouteOptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    logisticRouteId?: boolean
    name?: boolean
    estimatedCost?: boolean
    estimatedTime?: boolean
    transportType?: boolean
    description?: boolean
    isSelected?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    logisticRoute?: boolean | LogisticRouteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["routeOption"]>

  export type RouteOptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    logisticRouteId?: boolean
    name?: boolean
    estimatedCost?: boolean
    estimatedTime?: boolean
    transportType?: boolean
    description?: boolean
    isSelected?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    logisticRoute?: boolean | LogisticRouteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["routeOption"]>

  export type RouteOptionSelectScalar = {
    id?: boolean
    logisticRouteId?: boolean
    name?: boolean
    estimatedCost?: boolean
    estimatedTime?: boolean
    transportType?: boolean
    description?: boolean
    isSelected?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RouteOptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "logisticRouteId" | "name" | "estimatedCost" | "estimatedTime" | "transportType" | "description" | "isSelected" | "createdAt" | "updatedAt", ExtArgs["result"]["routeOption"]>
  export type RouteOptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    logisticRoute?: boolean | LogisticRouteDefaultArgs<ExtArgs>
  }
  export type RouteOptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    logisticRoute?: boolean | LogisticRouteDefaultArgs<ExtArgs>
  }
  export type RouteOptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    logisticRoute?: boolean | LogisticRouteDefaultArgs<ExtArgs>
  }

  export type $RouteOptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RouteOption"
    objects: {
      logisticRoute: Prisma.$LogisticRoutePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      logisticRouteId: string
      name: string
      estimatedCost: number
      estimatedTime: number
      transportType: string
      description: string | null
      isSelected: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["routeOption"]>
    composites: {}
  }

  type RouteOptionGetPayload<S extends boolean | null | undefined | RouteOptionDefaultArgs> = $Result.GetResult<Prisma.$RouteOptionPayload, S>

  type RouteOptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RouteOptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RouteOptionCountAggregateInputType | true
    }

  export interface RouteOptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RouteOption'], meta: { name: 'RouteOption' } }
    /**
     * Find zero or one RouteOption that matches the filter.
     * @param {RouteOptionFindUniqueArgs} args - Arguments to find a RouteOption
     * @example
     * // Get one RouteOption
     * const routeOption = await prisma.routeOption.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RouteOptionFindUniqueArgs>(args: SelectSubset<T, RouteOptionFindUniqueArgs<ExtArgs>>): Prisma__RouteOptionClient<$Result.GetResult<Prisma.$RouteOptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RouteOption that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RouteOptionFindUniqueOrThrowArgs} args - Arguments to find a RouteOption
     * @example
     * // Get one RouteOption
     * const routeOption = await prisma.routeOption.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RouteOptionFindUniqueOrThrowArgs>(args: SelectSubset<T, RouteOptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RouteOptionClient<$Result.GetResult<Prisma.$RouteOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RouteOption that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteOptionFindFirstArgs} args - Arguments to find a RouteOption
     * @example
     * // Get one RouteOption
     * const routeOption = await prisma.routeOption.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RouteOptionFindFirstArgs>(args?: SelectSubset<T, RouteOptionFindFirstArgs<ExtArgs>>): Prisma__RouteOptionClient<$Result.GetResult<Prisma.$RouteOptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RouteOption that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteOptionFindFirstOrThrowArgs} args - Arguments to find a RouteOption
     * @example
     * // Get one RouteOption
     * const routeOption = await prisma.routeOption.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RouteOptionFindFirstOrThrowArgs>(args?: SelectSubset<T, RouteOptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__RouteOptionClient<$Result.GetResult<Prisma.$RouteOptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RouteOptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteOptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RouteOptions
     * const routeOptions = await prisma.routeOption.findMany()
     * 
     * // Get first 10 RouteOptions
     * const routeOptions = await prisma.routeOption.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const routeOptionWithIdOnly = await prisma.routeOption.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RouteOptionFindManyArgs>(args?: SelectSubset<T, RouteOptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RouteOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RouteOption.
     * @param {RouteOptionCreateArgs} args - Arguments to create a RouteOption.
     * @example
     * // Create one RouteOption
     * const RouteOption = await prisma.routeOption.create({
     *   data: {
     *     // ... data to create a RouteOption
     *   }
     * })
     * 
     */
    create<T extends RouteOptionCreateArgs>(args: SelectSubset<T, RouteOptionCreateArgs<ExtArgs>>): Prisma__RouteOptionClient<$Result.GetResult<Prisma.$RouteOptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RouteOptions.
     * @param {RouteOptionCreateManyArgs} args - Arguments to create many RouteOptions.
     * @example
     * // Create many RouteOptions
     * const routeOption = await prisma.routeOption.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RouteOptionCreateManyArgs>(args?: SelectSubset<T, RouteOptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RouteOptions and returns the data saved in the database.
     * @param {RouteOptionCreateManyAndReturnArgs} args - Arguments to create many RouteOptions.
     * @example
     * // Create many RouteOptions
     * const routeOption = await prisma.routeOption.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RouteOptions and only return the `id`
     * const routeOptionWithIdOnly = await prisma.routeOption.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RouteOptionCreateManyAndReturnArgs>(args?: SelectSubset<T, RouteOptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RouteOptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RouteOption.
     * @param {RouteOptionDeleteArgs} args - Arguments to delete one RouteOption.
     * @example
     * // Delete one RouteOption
     * const RouteOption = await prisma.routeOption.delete({
     *   where: {
     *     // ... filter to delete one RouteOption
     *   }
     * })
     * 
     */
    delete<T extends RouteOptionDeleteArgs>(args: SelectSubset<T, RouteOptionDeleteArgs<ExtArgs>>): Prisma__RouteOptionClient<$Result.GetResult<Prisma.$RouteOptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RouteOption.
     * @param {RouteOptionUpdateArgs} args - Arguments to update one RouteOption.
     * @example
     * // Update one RouteOption
     * const routeOption = await prisma.routeOption.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RouteOptionUpdateArgs>(args: SelectSubset<T, RouteOptionUpdateArgs<ExtArgs>>): Prisma__RouteOptionClient<$Result.GetResult<Prisma.$RouteOptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RouteOptions.
     * @param {RouteOptionDeleteManyArgs} args - Arguments to filter RouteOptions to delete.
     * @example
     * // Delete a few RouteOptions
     * const { count } = await prisma.routeOption.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RouteOptionDeleteManyArgs>(args?: SelectSubset<T, RouteOptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RouteOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteOptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RouteOptions
     * const routeOption = await prisma.routeOption.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RouteOptionUpdateManyArgs>(args: SelectSubset<T, RouteOptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RouteOptions and returns the data updated in the database.
     * @param {RouteOptionUpdateManyAndReturnArgs} args - Arguments to update many RouteOptions.
     * @example
     * // Update many RouteOptions
     * const routeOption = await prisma.routeOption.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RouteOptions and only return the `id`
     * const routeOptionWithIdOnly = await prisma.routeOption.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RouteOptionUpdateManyAndReturnArgs>(args: SelectSubset<T, RouteOptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RouteOptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RouteOption.
     * @param {RouteOptionUpsertArgs} args - Arguments to update or create a RouteOption.
     * @example
     * // Update or create a RouteOption
     * const routeOption = await prisma.routeOption.upsert({
     *   create: {
     *     // ... data to create a RouteOption
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RouteOption we want to update
     *   }
     * })
     */
    upsert<T extends RouteOptionUpsertArgs>(args: SelectSubset<T, RouteOptionUpsertArgs<ExtArgs>>): Prisma__RouteOptionClient<$Result.GetResult<Prisma.$RouteOptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RouteOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteOptionCountArgs} args - Arguments to filter RouteOptions to count.
     * @example
     * // Count the number of RouteOptions
     * const count = await prisma.routeOption.count({
     *   where: {
     *     // ... the filter for the RouteOptions we want to count
     *   }
     * })
    **/
    count<T extends RouteOptionCountArgs>(
      args?: Subset<T, RouteOptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RouteOptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RouteOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteOptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RouteOptionAggregateArgs>(args: Subset<T, RouteOptionAggregateArgs>): Prisma.PrismaPromise<GetRouteOptionAggregateType<T>>

    /**
     * Group by RouteOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteOptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RouteOptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RouteOptionGroupByArgs['orderBy'] }
        : { orderBy?: RouteOptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RouteOptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRouteOptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RouteOption model
   */
  readonly fields: RouteOptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RouteOption.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RouteOptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    logisticRoute<T extends LogisticRouteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LogisticRouteDefaultArgs<ExtArgs>>): Prisma__LogisticRouteClient<$Result.GetResult<Prisma.$LogisticRoutePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RouteOption model
   */
  interface RouteOptionFieldRefs {
    readonly id: FieldRef<"RouteOption", 'String'>
    readonly logisticRouteId: FieldRef<"RouteOption", 'String'>
    readonly name: FieldRef<"RouteOption", 'String'>
    readonly estimatedCost: FieldRef<"RouteOption", 'Float'>
    readonly estimatedTime: FieldRef<"RouteOption", 'Int'>
    readonly transportType: FieldRef<"RouteOption", 'String'>
    readonly description: FieldRef<"RouteOption", 'String'>
    readonly isSelected: FieldRef<"RouteOption", 'Boolean'>
    readonly createdAt: FieldRef<"RouteOption", 'DateTime'>
    readonly updatedAt: FieldRef<"RouteOption", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RouteOption findUnique
   */
  export type RouteOptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteOption
     */
    select?: RouteOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RouteOption
     */
    omit?: RouteOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteOptionInclude<ExtArgs> | null
    /**
     * Filter, which RouteOption to fetch.
     */
    where: RouteOptionWhereUniqueInput
  }

  /**
   * RouteOption findUniqueOrThrow
   */
  export type RouteOptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteOption
     */
    select?: RouteOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RouteOption
     */
    omit?: RouteOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteOptionInclude<ExtArgs> | null
    /**
     * Filter, which RouteOption to fetch.
     */
    where: RouteOptionWhereUniqueInput
  }

  /**
   * RouteOption findFirst
   */
  export type RouteOptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteOption
     */
    select?: RouteOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RouteOption
     */
    omit?: RouteOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteOptionInclude<ExtArgs> | null
    /**
     * Filter, which RouteOption to fetch.
     */
    where?: RouteOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RouteOptions to fetch.
     */
    orderBy?: RouteOptionOrderByWithRelationInput | RouteOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RouteOptions.
     */
    cursor?: RouteOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RouteOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RouteOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RouteOptions.
     */
    distinct?: RouteOptionScalarFieldEnum | RouteOptionScalarFieldEnum[]
  }

  /**
   * RouteOption findFirstOrThrow
   */
  export type RouteOptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteOption
     */
    select?: RouteOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RouteOption
     */
    omit?: RouteOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteOptionInclude<ExtArgs> | null
    /**
     * Filter, which RouteOption to fetch.
     */
    where?: RouteOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RouteOptions to fetch.
     */
    orderBy?: RouteOptionOrderByWithRelationInput | RouteOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RouteOptions.
     */
    cursor?: RouteOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RouteOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RouteOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RouteOptions.
     */
    distinct?: RouteOptionScalarFieldEnum | RouteOptionScalarFieldEnum[]
  }

  /**
   * RouteOption findMany
   */
  export type RouteOptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteOption
     */
    select?: RouteOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RouteOption
     */
    omit?: RouteOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteOptionInclude<ExtArgs> | null
    /**
     * Filter, which RouteOptions to fetch.
     */
    where?: RouteOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RouteOptions to fetch.
     */
    orderBy?: RouteOptionOrderByWithRelationInput | RouteOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RouteOptions.
     */
    cursor?: RouteOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RouteOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RouteOptions.
     */
    skip?: number
    distinct?: RouteOptionScalarFieldEnum | RouteOptionScalarFieldEnum[]
  }

  /**
   * RouteOption create
   */
  export type RouteOptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteOption
     */
    select?: RouteOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RouteOption
     */
    omit?: RouteOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteOptionInclude<ExtArgs> | null
    /**
     * The data needed to create a RouteOption.
     */
    data: XOR<RouteOptionCreateInput, RouteOptionUncheckedCreateInput>
  }

  /**
   * RouteOption createMany
   */
  export type RouteOptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RouteOptions.
     */
    data: RouteOptionCreateManyInput | RouteOptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RouteOption createManyAndReturn
   */
  export type RouteOptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteOption
     */
    select?: RouteOptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RouteOption
     */
    omit?: RouteOptionOmit<ExtArgs> | null
    /**
     * The data used to create many RouteOptions.
     */
    data: RouteOptionCreateManyInput | RouteOptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteOptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RouteOption update
   */
  export type RouteOptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteOption
     */
    select?: RouteOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RouteOption
     */
    omit?: RouteOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteOptionInclude<ExtArgs> | null
    /**
     * The data needed to update a RouteOption.
     */
    data: XOR<RouteOptionUpdateInput, RouteOptionUncheckedUpdateInput>
    /**
     * Choose, which RouteOption to update.
     */
    where: RouteOptionWhereUniqueInput
  }

  /**
   * RouteOption updateMany
   */
  export type RouteOptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RouteOptions.
     */
    data: XOR<RouteOptionUpdateManyMutationInput, RouteOptionUncheckedUpdateManyInput>
    /**
     * Filter which RouteOptions to update
     */
    where?: RouteOptionWhereInput
    /**
     * Limit how many RouteOptions to update.
     */
    limit?: number
  }

  /**
   * RouteOption updateManyAndReturn
   */
  export type RouteOptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteOption
     */
    select?: RouteOptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RouteOption
     */
    omit?: RouteOptionOmit<ExtArgs> | null
    /**
     * The data used to update RouteOptions.
     */
    data: XOR<RouteOptionUpdateManyMutationInput, RouteOptionUncheckedUpdateManyInput>
    /**
     * Filter which RouteOptions to update
     */
    where?: RouteOptionWhereInput
    /**
     * Limit how many RouteOptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteOptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RouteOption upsert
   */
  export type RouteOptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteOption
     */
    select?: RouteOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RouteOption
     */
    omit?: RouteOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteOptionInclude<ExtArgs> | null
    /**
     * The filter to search for the RouteOption to update in case it exists.
     */
    where: RouteOptionWhereUniqueInput
    /**
     * In case the RouteOption found by the `where` argument doesn't exist, create a new RouteOption with this data.
     */
    create: XOR<RouteOptionCreateInput, RouteOptionUncheckedCreateInput>
    /**
     * In case the RouteOption was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RouteOptionUpdateInput, RouteOptionUncheckedUpdateInput>
  }

  /**
   * RouteOption delete
   */
  export type RouteOptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteOption
     */
    select?: RouteOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RouteOption
     */
    omit?: RouteOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteOptionInclude<ExtArgs> | null
    /**
     * Filter which RouteOption to delete.
     */
    where: RouteOptionWhereUniqueInput
  }

  /**
   * RouteOption deleteMany
   */
  export type RouteOptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RouteOptions to delete
     */
    where?: RouteOptionWhereInput
    /**
     * Limit how many RouteOptions to delete.
     */
    limit?: number
  }

  /**
   * RouteOption without action
   */
  export type RouteOptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteOption
     */
    select?: RouteOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RouteOption
     */
    omit?: RouteOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteOptionInclude<ExtArgs> | null
  }


  /**
   * Model OrderDocument
   */

  export type AggregateOrderDocument = {
    _count: OrderDocumentCountAggregateOutputType | null
    _min: OrderDocumentMinAggregateOutputType | null
    _max: OrderDocumentMaxAggregateOutputType | null
  }

  export type OrderDocumentMinAggregateOutputType = {
    id: string | null
    orderId: string | null
    documentType: string | null
    status: string | null
    generatedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderDocumentMaxAggregateOutputType = {
    id: string | null
    orderId: string | null
    documentType: string | null
    status: string | null
    generatedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderDocumentCountAggregateOutputType = {
    id: number
    orderId: number
    documentType: number
    customerInfo: number
    orderDetails: number
    logisticsInfo: number
    status: number
    generatedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrderDocumentMinAggregateInputType = {
    id?: true
    orderId?: true
    documentType?: true
    status?: true
    generatedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderDocumentMaxAggregateInputType = {
    id?: true
    orderId?: true
    documentType?: true
    status?: true
    generatedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderDocumentCountAggregateInputType = {
    id?: true
    orderId?: true
    documentType?: true
    customerInfo?: true
    orderDetails?: true
    logisticsInfo?: true
    status?: true
    generatedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrderDocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderDocument to aggregate.
     */
    where?: OrderDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderDocuments to fetch.
     */
    orderBy?: OrderDocumentOrderByWithRelationInput | OrderDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderDocuments
    **/
    _count?: true | OrderDocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderDocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderDocumentMaxAggregateInputType
  }

  export type GetOrderDocumentAggregateType<T extends OrderDocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderDocument[P]>
      : GetScalarType<T[P], AggregateOrderDocument[P]>
  }




  export type OrderDocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderDocumentWhereInput
    orderBy?: OrderDocumentOrderByWithAggregationInput | OrderDocumentOrderByWithAggregationInput[]
    by: OrderDocumentScalarFieldEnum[] | OrderDocumentScalarFieldEnum
    having?: OrderDocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderDocumentCountAggregateInputType | true
    _min?: OrderDocumentMinAggregateInputType
    _max?: OrderDocumentMaxAggregateInputType
  }

  export type OrderDocumentGroupByOutputType = {
    id: string
    orderId: string
    documentType: string
    customerInfo: JsonValue
    orderDetails: JsonValue
    logisticsInfo: JsonValue | null
    status: string
    generatedAt: Date
    createdAt: Date
    updatedAt: Date
    _count: OrderDocumentCountAggregateOutputType | null
    _min: OrderDocumentMinAggregateOutputType | null
    _max: OrderDocumentMaxAggregateOutputType | null
  }

  type GetOrderDocumentGroupByPayload<T extends OrderDocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderDocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderDocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderDocumentGroupByOutputType[P]>
            : GetScalarType<T[P], OrderDocumentGroupByOutputType[P]>
        }
      >
    >


  export type OrderDocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    documentType?: boolean
    customerInfo?: boolean
    orderDetails?: boolean
    logisticsInfo?: boolean
    status?: boolean
    generatedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderDocument"]>

  export type OrderDocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    documentType?: boolean
    customerInfo?: boolean
    orderDetails?: boolean
    logisticsInfo?: boolean
    status?: boolean
    generatedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderDocument"]>

  export type OrderDocumentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    documentType?: boolean
    customerInfo?: boolean
    orderDetails?: boolean
    logisticsInfo?: boolean
    status?: boolean
    generatedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderDocument"]>

  export type OrderDocumentSelectScalar = {
    id?: boolean
    orderId?: boolean
    documentType?: boolean
    customerInfo?: boolean
    orderDetails?: boolean
    logisticsInfo?: boolean
    status?: boolean
    generatedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OrderDocumentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderId" | "documentType" | "customerInfo" | "orderDetails" | "logisticsInfo" | "status" | "generatedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["orderDocument"]>
  export type OrderDocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }
  export type OrderDocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }
  export type OrderDocumentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }

  export type $OrderDocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderDocument"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      orderId: string
      documentType: string
      customerInfo: Prisma.JsonValue
      orderDetails: Prisma.JsonValue
      logisticsInfo: Prisma.JsonValue | null
      status: string
      generatedAt: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["orderDocument"]>
    composites: {}
  }

  type OrderDocumentGetPayload<S extends boolean | null | undefined | OrderDocumentDefaultArgs> = $Result.GetResult<Prisma.$OrderDocumentPayload, S>

  type OrderDocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderDocumentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderDocumentCountAggregateInputType | true
    }

  export interface OrderDocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderDocument'], meta: { name: 'OrderDocument' } }
    /**
     * Find zero or one OrderDocument that matches the filter.
     * @param {OrderDocumentFindUniqueArgs} args - Arguments to find a OrderDocument
     * @example
     * // Get one OrderDocument
     * const orderDocument = await prisma.orderDocument.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderDocumentFindUniqueArgs>(args: SelectSubset<T, OrderDocumentFindUniqueArgs<ExtArgs>>): Prisma__OrderDocumentClient<$Result.GetResult<Prisma.$OrderDocumentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OrderDocument that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderDocumentFindUniqueOrThrowArgs} args - Arguments to find a OrderDocument
     * @example
     * // Get one OrderDocument
     * const orderDocument = await prisma.orderDocument.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderDocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderDocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderDocumentClient<$Result.GetResult<Prisma.$OrderDocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderDocument that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderDocumentFindFirstArgs} args - Arguments to find a OrderDocument
     * @example
     * // Get one OrderDocument
     * const orderDocument = await prisma.orderDocument.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderDocumentFindFirstArgs>(args?: SelectSubset<T, OrderDocumentFindFirstArgs<ExtArgs>>): Prisma__OrderDocumentClient<$Result.GetResult<Prisma.$OrderDocumentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderDocument that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderDocumentFindFirstOrThrowArgs} args - Arguments to find a OrderDocument
     * @example
     * // Get one OrderDocument
     * const orderDocument = await prisma.orderDocument.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderDocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderDocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderDocumentClient<$Result.GetResult<Prisma.$OrderDocumentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OrderDocuments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderDocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderDocuments
     * const orderDocuments = await prisma.orderDocument.findMany()
     * 
     * // Get first 10 OrderDocuments
     * const orderDocuments = await prisma.orderDocument.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderDocumentWithIdOnly = await prisma.orderDocument.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderDocumentFindManyArgs>(args?: SelectSubset<T, OrderDocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OrderDocument.
     * @param {OrderDocumentCreateArgs} args - Arguments to create a OrderDocument.
     * @example
     * // Create one OrderDocument
     * const OrderDocument = await prisma.orderDocument.create({
     *   data: {
     *     // ... data to create a OrderDocument
     *   }
     * })
     * 
     */
    create<T extends OrderDocumentCreateArgs>(args: SelectSubset<T, OrderDocumentCreateArgs<ExtArgs>>): Prisma__OrderDocumentClient<$Result.GetResult<Prisma.$OrderDocumentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OrderDocuments.
     * @param {OrderDocumentCreateManyArgs} args - Arguments to create many OrderDocuments.
     * @example
     * // Create many OrderDocuments
     * const orderDocument = await prisma.orderDocument.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderDocumentCreateManyArgs>(args?: SelectSubset<T, OrderDocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrderDocuments and returns the data saved in the database.
     * @param {OrderDocumentCreateManyAndReturnArgs} args - Arguments to create many OrderDocuments.
     * @example
     * // Create many OrderDocuments
     * const orderDocument = await prisma.orderDocument.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrderDocuments and only return the `id`
     * const orderDocumentWithIdOnly = await prisma.orderDocument.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderDocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderDocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderDocumentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OrderDocument.
     * @param {OrderDocumentDeleteArgs} args - Arguments to delete one OrderDocument.
     * @example
     * // Delete one OrderDocument
     * const OrderDocument = await prisma.orderDocument.delete({
     *   where: {
     *     // ... filter to delete one OrderDocument
     *   }
     * })
     * 
     */
    delete<T extends OrderDocumentDeleteArgs>(args: SelectSubset<T, OrderDocumentDeleteArgs<ExtArgs>>): Prisma__OrderDocumentClient<$Result.GetResult<Prisma.$OrderDocumentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OrderDocument.
     * @param {OrderDocumentUpdateArgs} args - Arguments to update one OrderDocument.
     * @example
     * // Update one OrderDocument
     * const orderDocument = await prisma.orderDocument.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderDocumentUpdateArgs>(args: SelectSubset<T, OrderDocumentUpdateArgs<ExtArgs>>): Prisma__OrderDocumentClient<$Result.GetResult<Prisma.$OrderDocumentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OrderDocuments.
     * @param {OrderDocumentDeleteManyArgs} args - Arguments to filter OrderDocuments to delete.
     * @example
     * // Delete a few OrderDocuments
     * const { count } = await prisma.orderDocument.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderDocumentDeleteManyArgs>(args?: SelectSubset<T, OrderDocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderDocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderDocuments
     * const orderDocument = await prisma.orderDocument.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderDocumentUpdateManyArgs>(args: SelectSubset<T, OrderDocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderDocuments and returns the data updated in the database.
     * @param {OrderDocumentUpdateManyAndReturnArgs} args - Arguments to update many OrderDocuments.
     * @example
     * // Update many OrderDocuments
     * const orderDocument = await prisma.orderDocument.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OrderDocuments and only return the `id`
     * const orderDocumentWithIdOnly = await prisma.orderDocument.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderDocumentUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderDocumentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderDocumentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OrderDocument.
     * @param {OrderDocumentUpsertArgs} args - Arguments to update or create a OrderDocument.
     * @example
     * // Update or create a OrderDocument
     * const orderDocument = await prisma.orderDocument.upsert({
     *   create: {
     *     // ... data to create a OrderDocument
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderDocument we want to update
     *   }
     * })
     */
    upsert<T extends OrderDocumentUpsertArgs>(args: SelectSubset<T, OrderDocumentUpsertArgs<ExtArgs>>): Prisma__OrderDocumentClient<$Result.GetResult<Prisma.$OrderDocumentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OrderDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderDocumentCountArgs} args - Arguments to filter OrderDocuments to count.
     * @example
     * // Count the number of OrderDocuments
     * const count = await prisma.orderDocument.count({
     *   where: {
     *     // ... the filter for the OrderDocuments we want to count
     *   }
     * })
    **/
    count<T extends OrderDocumentCountArgs>(
      args?: Subset<T, OrderDocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderDocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderDocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderDocumentAggregateArgs>(args: Subset<T, OrderDocumentAggregateArgs>): Prisma.PrismaPromise<GetOrderDocumentAggregateType<T>>

    /**
     * Group by OrderDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderDocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderDocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderDocumentGroupByArgs['orderBy'] }
        : { orderBy?: OrderDocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderDocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderDocument model
   */
  readonly fields: OrderDocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderDocument.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderDocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderDocument model
   */
  interface OrderDocumentFieldRefs {
    readonly id: FieldRef<"OrderDocument", 'String'>
    readonly orderId: FieldRef<"OrderDocument", 'String'>
    readonly documentType: FieldRef<"OrderDocument", 'String'>
    readonly customerInfo: FieldRef<"OrderDocument", 'Json'>
    readonly orderDetails: FieldRef<"OrderDocument", 'Json'>
    readonly logisticsInfo: FieldRef<"OrderDocument", 'Json'>
    readonly status: FieldRef<"OrderDocument", 'String'>
    readonly generatedAt: FieldRef<"OrderDocument", 'DateTime'>
    readonly createdAt: FieldRef<"OrderDocument", 'DateTime'>
    readonly updatedAt: FieldRef<"OrderDocument", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OrderDocument findUnique
   */
  export type OrderDocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderDocument
     */
    select?: OrderDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderDocument
     */
    omit?: OrderDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderDocumentInclude<ExtArgs> | null
    /**
     * Filter, which OrderDocument to fetch.
     */
    where: OrderDocumentWhereUniqueInput
  }

  /**
   * OrderDocument findUniqueOrThrow
   */
  export type OrderDocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderDocument
     */
    select?: OrderDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderDocument
     */
    omit?: OrderDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderDocumentInclude<ExtArgs> | null
    /**
     * Filter, which OrderDocument to fetch.
     */
    where: OrderDocumentWhereUniqueInput
  }

  /**
   * OrderDocument findFirst
   */
  export type OrderDocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderDocument
     */
    select?: OrderDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderDocument
     */
    omit?: OrderDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderDocumentInclude<ExtArgs> | null
    /**
     * Filter, which OrderDocument to fetch.
     */
    where?: OrderDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderDocuments to fetch.
     */
    orderBy?: OrderDocumentOrderByWithRelationInput | OrderDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderDocuments.
     */
    cursor?: OrderDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderDocuments.
     */
    distinct?: OrderDocumentScalarFieldEnum | OrderDocumentScalarFieldEnum[]
  }

  /**
   * OrderDocument findFirstOrThrow
   */
  export type OrderDocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderDocument
     */
    select?: OrderDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderDocument
     */
    omit?: OrderDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderDocumentInclude<ExtArgs> | null
    /**
     * Filter, which OrderDocument to fetch.
     */
    where?: OrderDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderDocuments to fetch.
     */
    orderBy?: OrderDocumentOrderByWithRelationInput | OrderDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderDocuments.
     */
    cursor?: OrderDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderDocuments.
     */
    distinct?: OrderDocumentScalarFieldEnum | OrderDocumentScalarFieldEnum[]
  }

  /**
   * OrderDocument findMany
   */
  export type OrderDocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderDocument
     */
    select?: OrderDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderDocument
     */
    omit?: OrderDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderDocumentInclude<ExtArgs> | null
    /**
     * Filter, which OrderDocuments to fetch.
     */
    where?: OrderDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderDocuments to fetch.
     */
    orderBy?: OrderDocumentOrderByWithRelationInput | OrderDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderDocuments.
     */
    cursor?: OrderDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderDocuments.
     */
    skip?: number
    distinct?: OrderDocumentScalarFieldEnum | OrderDocumentScalarFieldEnum[]
  }

  /**
   * OrderDocument create
   */
  export type OrderDocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderDocument
     */
    select?: OrderDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderDocument
     */
    omit?: OrderDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderDocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderDocument.
     */
    data: XOR<OrderDocumentCreateInput, OrderDocumentUncheckedCreateInput>
  }

  /**
   * OrderDocument createMany
   */
  export type OrderDocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderDocuments.
     */
    data: OrderDocumentCreateManyInput | OrderDocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderDocument createManyAndReturn
   */
  export type OrderDocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderDocument
     */
    select?: OrderDocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderDocument
     */
    omit?: OrderDocumentOmit<ExtArgs> | null
    /**
     * The data used to create many OrderDocuments.
     */
    data: OrderDocumentCreateManyInput | OrderDocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderDocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderDocument update
   */
  export type OrderDocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderDocument
     */
    select?: OrderDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderDocument
     */
    omit?: OrderDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderDocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderDocument.
     */
    data: XOR<OrderDocumentUpdateInput, OrderDocumentUncheckedUpdateInput>
    /**
     * Choose, which OrderDocument to update.
     */
    where: OrderDocumentWhereUniqueInput
  }

  /**
   * OrderDocument updateMany
   */
  export type OrderDocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderDocuments.
     */
    data: XOR<OrderDocumentUpdateManyMutationInput, OrderDocumentUncheckedUpdateManyInput>
    /**
     * Filter which OrderDocuments to update
     */
    where?: OrderDocumentWhereInput
    /**
     * Limit how many OrderDocuments to update.
     */
    limit?: number
  }

  /**
   * OrderDocument updateManyAndReturn
   */
  export type OrderDocumentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderDocument
     */
    select?: OrderDocumentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderDocument
     */
    omit?: OrderDocumentOmit<ExtArgs> | null
    /**
     * The data used to update OrderDocuments.
     */
    data: XOR<OrderDocumentUpdateManyMutationInput, OrderDocumentUncheckedUpdateManyInput>
    /**
     * Filter which OrderDocuments to update
     */
    where?: OrderDocumentWhereInput
    /**
     * Limit how many OrderDocuments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderDocumentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderDocument upsert
   */
  export type OrderDocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderDocument
     */
    select?: OrderDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderDocument
     */
    omit?: OrderDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderDocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderDocument to update in case it exists.
     */
    where: OrderDocumentWhereUniqueInput
    /**
     * In case the OrderDocument found by the `where` argument doesn't exist, create a new OrderDocument with this data.
     */
    create: XOR<OrderDocumentCreateInput, OrderDocumentUncheckedCreateInput>
    /**
     * In case the OrderDocument was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderDocumentUpdateInput, OrderDocumentUncheckedUpdateInput>
  }

  /**
   * OrderDocument delete
   */
  export type OrderDocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderDocument
     */
    select?: OrderDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderDocument
     */
    omit?: OrderDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderDocumentInclude<ExtArgs> | null
    /**
     * Filter which OrderDocument to delete.
     */
    where: OrderDocumentWhereUniqueInput
  }

  /**
   * OrderDocument deleteMany
   */
  export type OrderDocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderDocuments to delete
     */
    where?: OrderDocumentWhereInput
    /**
     * Limit how many OrderDocuments to delete.
     */
    limit?: number
  }

  /**
   * OrderDocument without action
   */
  export type OrderDocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderDocument
     */
    select?: OrderDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderDocument
     */
    omit?: OrderDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderDocumentInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    isAdmin: 'isAdmin',
    role: 'role',
    companyName: 'companyName',
    inn: 'inn',
    kpp: 'kpp',
    billingAddress: 'billingAddress',
    dashboardSettings: 'dashboardSettings',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    materialType: 'materialType',
    volume: 'volume',
    price: 'price',
    environmentalImpact: 'environmentalImpact',
    status: 'status',
    pickupAddress: 'pickupAddress',
    paymentStatus: 'paymentStatus',
    paymentMethod: 'paymentMethod',
    invoiceNumber: 'invoiceNumber',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const InventoryItemScalarFieldEnum: {
    id: 'id',
    materialType: 'materialType',
    availableQuantity: 'availableQuantity',
    reservedQuantity: 'reservedQuantity',
    location: 'location',
    minThreshold: 'minThreshold',
    maxCapacity: 'maxCapacity',
    lastUpdated: 'lastUpdated',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InventoryItemScalarFieldEnum = (typeof InventoryItemScalarFieldEnum)[keyof typeof InventoryItemScalarFieldEnum]


  export const LogisticRouteScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    pickupAddress: 'pickupAddress',
    deliveryAddress: 'deliveryAddress',
    estimatedDistance: 'estimatedDistance',
    status: 'status',
    assignedLogisticianId: 'assignedLogisticianId',
    selectedAt: 'selectedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LogisticRouteScalarFieldEnum = (typeof LogisticRouteScalarFieldEnum)[keyof typeof LogisticRouteScalarFieldEnum]


  export const RouteOptionScalarFieldEnum: {
    id: 'id',
    logisticRouteId: 'logisticRouteId',
    name: 'name',
    estimatedCost: 'estimatedCost',
    estimatedTime: 'estimatedTime',
    transportType: 'transportType',
    description: 'description',
    isSelected: 'isSelected',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RouteOptionScalarFieldEnum = (typeof RouteOptionScalarFieldEnum)[keyof typeof RouteOptionScalarFieldEnum]


  export const OrderDocumentScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    documentType: 'documentType',
    customerInfo: 'customerInfo',
    orderDetails: 'orderDetails',
    logisticsInfo: 'logisticsInfo',
    status: 'status',
    generatedAt: 'generatedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrderDocumentScalarFieldEnum = (typeof OrderDocumentScalarFieldEnum)[keyof typeof OrderDocumentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    isAdmin?: BoolFilter<"User"> | boolean
    role?: StringNullableFilter<"User"> | string | null
    companyName?: StringNullableFilter<"User"> | string | null
    inn?: StringNullableFilter<"User"> | string | null
    kpp?: StringNullableFilter<"User"> | string | null
    billingAddress?: StringNullableFilter<"User"> | string | null
    dashboardSettings?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    orders?: OrderListRelationFilter
    assignedRoutes?: LogisticRouteListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    isAdmin?: SortOrder
    role?: SortOrderInput | SortOrder
    companyName?: SortOrderInput | SortOrder
    inn?: SortOrderInput | SortOrder
    kpp?: SortOrderInput | SortOrder
    billingAddress?: SortOrderInput | SortOrder
    dashboardSettings?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orders?: OrderOrderByRelationAggregateInput
    assignedRoutes?: LogisticRouteOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    isAdmin?: BoolFilter<"User"> | boolean
    role?: StringNullableFilter<"User"> | string | null
    companyName?: StringNullableFilter<"User"> | string | null
    inn?: StringNullableFilter<"User"> | string | null
    kpp?: StringNullableFilter<"User"> | string | null
    billingAddress?: StringNullableFilter<"User"> | string | null
    dashboardSettings?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    orders?: OrderListRelationFilter
    assignedRoutes?: LogisticRouteListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    isAdmin?: SortOrder
    role?: SortOrderInput | SortOrder
    companyName?: SortOrderInput | SortOrder
    inn?: SortOrderInput | SortOrder
    kpp?: SortOrderInput | SortOrder
    billingAddress?: SortOrderInput | SortOrder
    dashboardSettings?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    isAdmin?: BoolWithAggregatesFilter<"User"> | boolean
    role?: StringNullableWithAggregatesFilter<"User"> | string | null
    companyName?: StringNullableWithAggregatesFilter<"User"> | string | null
    inn?: StringNullableWithAggregatesFilter<"User"> | string | null
    kpp?: StringNullableWithAggregatesFilter<"User"> | string | null
    billingAddress?: StringNullableWithAggregatesFilter<"User"> | string | null
    dashboardSettings?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id?: StringFilter<"Order"> | string
    userId?: StringFilter<"Order"> | string
    materialType?: StringFilter<"Order"> | string
    volume?: FloatFilter<"Order"> | number
    price?: FloatFilter<"Order"> | number
    environmentalImpact?: FloatFilter<"Order"> | number
    status?: StringFilter<"Order"> | string
    pickupAddress?: StringFilter<"Order"> | string
    paymentStatus?: StringFilter<"Order"> | string
    paymentMethod?: StringNullableFilter<"Order"> | string | null
    invoiceNumber?: StringNullableFilter<"Order"> | string | null
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    logisticRoutes?: LogisticRouteListRelationFilter
    documents?: OrderDocumentListRelationFilter
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    materialType?: SortOrder
    volume?: SortOrder
    price?: SortOrder
    environmentalImpact?: SortOrder
    status?: SortOrder
    pickupAddress?: SortOrder
    paymentStatus?: SortOrder
    paymentMethod?: SortOrderInput | SortOrder
    invoiceNumber?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    logisticRoutes?: LogisticRouteOrderByRelationAggregateInput
    documents?: OrderDocumentOrderByRelationAggregateInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    userId?: StringFilter<"Order"> | string
    materialType?: StringFilter<"Order"> | string
    volume?: FloatFilter<"Order"> | number
    price?: FloatFilter<"Order"> | number
    environmentalImpact?: FloatFilter<"Order"> | number
    status?: StringFilter<"Order"> | string
    pickupAddress?: StringFilter<"Order"> | string
    paymentStatus?: StringFilter<"Order"> | string
    paymentMethod?: StringNullableFilter<"Order"> | string | null
    invoiceNumber?: StringNullableFilter<"Order"> | string | null
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    logisticRoutes?: LogisticRouteListRelationFilter
    documents?: OrderDocumentListRelationFilter
  }, "id">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    materialType?: SortOrder
    volume?: SortOrder
    price?: SortOrder
    environmentalImpact?: SortOrder
    status?: SortOrder
    pickupAddress?: SortOrder
    paymentStatus?: SortOrder
    paymentMethod?: SortOrderInput | SortOrder
    invoiceNumber?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Order"> | string
    userId?: StringWithAggregatesFilter<"Order"> | string
    materialType?: StringWithAggregatesFilter<"Order"> | string
    volume?: FloatWithAggregatesFilter<"Order"> | number
    price?: FloatWithAggregatesFilter<"Order"> | number
    environmentalImpact?: FloatWithAggregatesFilter<"Order"> | number
    status?: StringWithAggregatesFilter<"Order"> | string
    pickupAddress?: StringWithAggregatesFilter<"Order"> | string
    paymentStatus?: StringWithAggregatesFilter<"Order"> | string
    paymentMethod?: StringNullableWithAggregatesFilter<"Order"> | string | null
    invoiceNumber?: StringNullableWithAggregatesFilter<"Order"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
  }

  export type InventoryItemWhereInput = {
    AND?: InventoryItemWhereInput | InventoryItemWhereInput[]
    OR?: InventoryItemWhereInput[]
    NOT?: InventoryItemWhereInput | InventoryItemWhereInput[]
    id?: StringFilter<"InventoryItem"> | string
    materialType?: StringFilter<"InventoryItem"> | string
    availableQuantity?: FloatFilter<"InventoryItem"> | number
    reservedQuantity?: FloatFilter<"InventoryItem"> | number
    location?: StringFilter<"InventoryItem"> | string
    minThreshold?: FloatFilter<"InventoryItem"> | number
    maxCapacity?: FloatFilter<"InventoryItem"> | number
    lastUpdated?: DateTimeFilter<"InventoryItem"> | Date | string
    createdAt?: DateTimeFilter<"InventoryItem"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryItem"> | Date | string
  }

  export type InventoryItemOrderByWithRelationInput = {
    id?: SortOrder
    materialType?: SortOrder
    availableQuantity?: SortOrder
    reservedQuantity?: SortOrder
    location?: SortOrder
    minThreshold?: SortOrder
    maxCapacity?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    materialType?: string
    AND?: InventoryItemWhereInput | InventoryItemWhereInput[]
    OR?: InventoryItemWhereInput[]
    NOT?: InventoryItemWhereInput | InventoryItemWhereInput[]
    availableQuantity?: FloatFilter<"InventoryItem"> | number
    reservedQuantity?: FloatFilter<"InventoryItem"> | number
    location?: StringFilter<"InventoryItem"> | string
    minThreshold?: FloatFilter<"InventoryItem"> | number
    maxCapacity?: FloatFilter<"InventoryItem"> | number
    lastUpdated?: DateTimeFilter<"InventoryItem"> | Date | string
    createdAt?: DateTimeFilter<"InventoryItem"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryItem"> | Date | string
  }, "id" | "materialType">

  export type InventoryItemOrderByWithAggregationInput = {
    id?: SortOrder
    materialType?: SortOrder
    availableQuantity?: SortOrder
    reservedQuantity?: SortOrder
    location?: SortOrder
    minThreshold?: SortOrder
    maxCapacity?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InventoryItemCountOrderByAggregateInput
    _avg?: InventoryItemAvgOrderByAggregateInput
    _max?: InventoryItemMaxOrderByAggregateInput
    _min?: InventoryItemMinOrderByAggregateInput
    _sum?: InventoryItemSumOrderByAggregateInput
  }

  export type InventoryItemScalarWhereWithAggregatesInput = {
    AND?: InventoryItemScalarWhereWithAggregatesInput | InventoryItemScalarWhereWithAggregatesInput[]
    OR?: InventoryItemScalarWhereWithAggregatesInput[]
    NOT?: InventoryItemScalarWhereWithAggregatesInput | InventoryItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"InventoryItem"> | string
    materialType?: StringWithAggregatesFilter<"InventoryItem"> | string
    availableQuantity?: FloatWithAggregatesFilter<"InventoryItem"> | number
    reservedQuantity?: FloatWithAggregatesFilter<"InventoryItem"> | number
    location?: StringWithAggregatesFilter<"InventoryItem"> | string
    minThreshold?: FloatWithAggregatesFilter<"InventoryItem"> | number
    maxCapacity?: FloatWithAggregatesFilter<"InventoryItem"> | number
    lastUpdated?: DateTimeWithAggregatesFilter<"InventoryItem"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"InventoryItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InventoryItem"> | Date | string
  }

  export type LogisticRouteWhereInput = {
    AND?: LogisticRouteWhereInput | LogisticRouteWhereInput[]
    OR?: LogisticRouteWhereInput[]
    NOT?: LogisticRouteWhereInput | LogisticRouteWhereInput[]
    id?: StringFilter<"LogisticRoute"> | string
    orderId?: StringFilter<"LogisticRoute"> | string
    pickupAddress?: StringFilter<"LogisticRoute"> | string
    deliveryAddress?: StringFilter<"LogisticRoute"> | string
    estimatedDistance?: FloatFilter<"LogisticRoute"> | number
    status?: StringFilter<"LogisticRoute"> | string
    assignedLogisticianId?: StringFilter<"LogisticRoute"> | string
    selectedAt?: DateTimeNullableFilter<"LogisticRoute"> | Date | string | null
    createdAt?: DateTimeFilter<"LogisticRoute"> | Date | string
    updatedAt?: DateTimeFilter<"LogisticRoute"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    assignedLogistician?: XOR<UserScalarRelationFilter, UserWhereInput>
    routeOptions?: RouteOptionListRelationFilter
  }

  export type LogisticRouteOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    pickupAddress?: SortOrder
    deliveryAddress?: SortOrder
    estimatedDistance?: SortOrder
    status?: SortOrder
    assignedLogisticianId?: SortOrder
    selectedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    order?: OrderOrderByWithRelationInput
    assignedLogistician?: UserOrderByWithRelationInput
    routeOptions?: RouteOptionOrderByRelationAggregateInput
  }

  export type LogisticRouteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LogisticRouteWhereInput | LogisticRouteWhereInput[]
    OR?: LogisticRouteWhereInput[]
    NOT?: LogisticRouteWhereInput | LogisticRouteWhereInput[]
    orderId?: StringFilter<"LogisticRoute"> | string
    pickupAddress?: StringFilter<"LogisticRoute"> | string
    deliveryAddress?: StringFilter<"LogisticRoute"> | string
    estimatedDistance?: FloatFilter<"LogisticRoute"> | number
    status?: StringFilter<"LogisticRoute"> | string
    assignedLogisticianId?: StringFilter<"LogisticRoute"> | string
    selectedAt?: DateTimeNullableFilter<"LogisticRoute"> | Date | string | null
    createdAt?: DateTimeFilter<"LogisticRoute"> | Date | string
    updatedAt?: DateTimeFilter<"LogisticRoute"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    assignedLogistician?: XOR<UserScalarRelationFilter, UserWhereInput>
    routeOptions?: RouteOptionListRelationFilter
  }, "id">

  export type LogisticRouteOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    pickupAddress?: SortOrder
    deliveryAddress?: SortOrder
    estimatedDistance?: SortOrder
    status?: SortOrder
    assignedLogisticianId?: SortOrder
    selectedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LogisticRouteCountOrderByAggregateInput
    _avg?: LogisticRouteAvgOrderByAggregateInput
    _max?: LogisticRouteMaxOrderByAggregateInput
    _min?: LogisticRouteMinOrderByAggregateInput
    _sum?: LogisticRouteSumOrderByAggregateInput
  }

  export type LogisticRouteScalarWhereWithAggregatesInput = {
    AND?: LogisticRouteScalarWhereWithAggregatesInput | LogisticRouteScalarWhereWithAggregatesInput[]
    OR?: LogisticRouteScalarWhereWithAggregatesInput[]
    NOT?: LogisticRouteScalarWhereWithAggregatesInput | LogisticRouteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LogisticRoute"> | string
    orderId?: StringWithAggregatesFilter<"LogisticRoute"> | string
    pickupAddress?: StringWithAggregatesFilter<"LogisticRoute"> | string
    deliveryAddress?: StringWithAggregatesFilter<"LogisticRoute"> | string
    estimatedDistance?: FloatWithAggregatesFilter<"LogisticRoute"> | number
    status?: StringWithAggregatesFilter<"LogisticRoute"> | string
    assignedLogisticianId?: StringWithAggregatesFilter<"LogisticRoute"> | string
    selectedAt?: DateTimeNullableWithAggregatesFilter<"LogisticRoute"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"LogisticRoute"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LogisticRoute"> | Date | string
  }

  export type RouteOptionWhereInput = {
    AND?: RouteOptionWhereInput | RouteOptionWhereInput[]
    OR?: RouteOptionWhereInput[]
    NOT?: RouteOptionWhereInput | RouteOptionWhereInput[]
    id?: StringFilter<"RouteOption"> | string
    logisticRouteId?: StringFilter<"RouteOption"> | string
    name?: StringFilter<"RouteOption"> | string
    estimatedCost?: FloatFilter<"RouteOption"> | number
    estimatedTime?: IntFilter<"RouteOption"> | number
    transportType?: StringFilter<"RouteOption"> | string
    description?: StringNullableFilter<"RouteOption"> | string | null
    isSelected?: BoolFilter<"RouteOption"> | boolean
    createdAt?: DateTimeFilter<"RouteOption"> | Date | string
    updatedAt?: DateTimeFilter<"RouteOption"> | Date | string
    logisticRoute?: XOR<LogisticRouteScalarRelationFilter, LogisticRouteWhereInput>
  }

  export type RouteOptionOrderByWithRelationInput = {
    id?: SortOrder
    logisticRouteId?: SortOrder
    name?: SortOrder
    estimatedCost?: SortOrder
    estimatedTime?: SortOrder
    transportType?: SortOrder
    description?: SortOrderInput | SortOrder
    isSelected?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    logisticRoute?: LogisticRouteOrderByWithRelationInput
  }

  export type RouteOptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RouteOptionWhereInput | RouteOptionWhereInput[]
    OR?: RouteOptionWhereInput[]
    NOT?: RouteOptionWhereInput | RouteOptionWhereInput[]
    logisticRouteId?: StringFilter<"RouteOption"> | string
    name?: StringFilter<"RouteOption"> | string
    estimatedCost?: FloatFilter<"RouteOption"> | number
    estimatedTime?: IntFilter<"RouteOption"> | number
    transportType?: StringFilter<"RouteOption"> | string
    description?: StringNullableFilter<"RouteOption"> | string | null
    isSelected?: BoolFilter<"RouteOption"> | boolean
    createdAt?: DateTimeFilter<"RouteOption"> | Date | string
    updatedAt?: DateTimeFilter<"RouteOption"> | Date | string
    logisticRoute?: XOR<LogisticRouteScalarRelationFilter, LogisticRouteWhereInput>
  }, "id">

  export type RouteOptionOrderByWithAggregationInput = {
    id?: SortOrder
    logisticRouteId?: SortOrder
    name?: SortOrder
    estimatedCost?: SortOrder
    estimatedTime?: SortOrder
    transportType?: SortOrder
    description?: SortOrderInput | SortOrder
    isSelected?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RouteOptionCountOrderByAggregateInput
    _avg?: RouteOptionAvgOrderByAggregateInput
    _max?: RouteOptionMaxOrderByAggregateInput
    _min?: RouteOptionMinOrderByAggregateInput
    _sum?: RouteOptionSumOrderByAggregateInput
  }

  export type RouteOptionScalarWhereWithAggregatesInput = {
    AND?: RouteOptionScalarWhereWithAggregatesInput | RouteOptionScalarWhereWithAggregatesInput[]
    OR?: RouteOptionScalarWhereWithAggregatesInput[]
    NOT?: RouteOptionScalarWhereWithAggregatesInput | RouteOptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RouteOption"> | string
    logisticRouteId?: StringWithAggregatesFilter<"RouteOption"> | string
    name?: StringWithAggregatesFilter<"RouteOption"> | string
    estimatedCost?: FloatWithAggregatesFilter<"RouteOption"> | number
    estimatedTime?: IntWithAggregatesFilter<"RouteOption"> | number
    transportType?: StringWithAggregatesFilter<"RouteOption"> | string
    description?: StringNullableWithAggregatesFilter<"RouteOption"> | string | null
    isSelected?: BoolWithAggregatesFilter<"RouteOption"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"RouteOption"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RouteOption"> | Date | string
  }

  export type OrderDocumentWhereInput = {
    AND?: OrderDocumentWhereInput | OrderDocumentWhereInput[]
    OR?: OrderDocumentWhereInput[]
    NOT?: OrderDocumentWhereInput | OrderDocumentWhereInput[]
    id?: StringFilter<"OrderDocument"> | string
    orderId?: StringFilter<"OrderDocument"> | string
    documentType?: StringFilter<"OrderDocument"> | string
    customerInfo?: JsonFilter<"OrderDocument">
    orderDetails?: JsonFilter<"OrderDocument">
    logisticsInfo?: JsonNullableFilter<"OrderDocument">
    status?: StringFilter<"OrderDocument"> | string
    generatedAt?: DateTimeFilter<"OrderDocument"> | Date | string
    createdAt?: DateTimeFilter<"OrderDocument"> | Date | string
    updatedAt?: DateTimeFilter<"OrderDocument"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
  }

  export type OrderDocumentOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    documentType?: SortOrder
    customerInfo?: SortOrder
    orderDetails?: SortOrder
    logisticsInfo?: SortOrderInput | SortOrder
    status?: SortOrder
    generatedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    order?: OrderOrderByWithRelationInput
  }

  export type OrderDocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OrderDocumentWhereInput | OrderDocumentWhereInput[]
    OR?: OrderDocumentWhereInput[]
    NOT?: OrderDocumentWhereInput | OrderDocumentWhereInput[]
    orderId?: StringFilter<"OrderDocument"> | string
    documentType?: StringFilter<"OrderDocument"> | string
    customerInfo?: JsonFilter<"OrderDocument">
    orderDetails?: JsonFilter<"OrderDocument">
    logisticsInfo?: JsonNullableFilter<"OrderDocument">
    status?: StringFilter<"OrderDocument"> | string
    generatedAt?: DateTimeFilter<"OrderDocument"> | Date | string
    createdAt?: DateTimeFilter<"OrderDocument"> | Date | string
    updatedAt?: DateTimeFilter<"OrderDocument"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
  }, "id">

  export type OrderDocumentOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    documentType?: SortOrder
    customerInfo?: SortOrder
    orderDetails?: SortOrder
    logisticsInfo?: SortOrderInput | SortOrder
    status?: SortOrder
    generatedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OrderDocumentCountOrderByAggregateInput
    _max?: OrderDocumentMaxOrderByAggregateInput
    _min?: OrderDocumentMinOrderByAggregateInput
  }

  export type OrderDocumentScalarWhereWithAggregatesInput = {
    AND?: OrderDocumentScalarWhereWithAggregatesInput | OrderDocumentScalarWhereWithAggregatesInput[]
    OR?: OrderDocumentScalarWhereWithAggregatesInput[]
    NOT?: OrderDocumentScalarWhereWithAggregatesInput | OrderDocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OrderDocument"> | string
    orderId?: StringWithAggregatesFilter<"OrderDocument"> | string
    documentType?: StringWithAggregatesFilter<"OrderDocument"> | string
    customerInfo?: JsonWithAggregatesFilter<"OrderDocument">
    orderDetails?: JsonWithAggregatesFilter<"OrderDocument">
    logisticsInfo?: JsonNullableWithAggregatesFilter<"OrderDocument">
    status?: StringWithAggregatesFilter<"OrderDocument"> | string
    generatedAt?: DateTimeWithAggregatesFilter<"OrderDocument"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"OrderDocument"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"OrderDocument"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    isAdmin?: boolean
    role?: string | null
    companyName?: string | null
    inn?: string | null
    kpp?: string | null
    billingAddress?: string | null
    dashboardSettings?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: OrderCreateNestedManyWithoutUserInput
    assignedRoutes?: LogisticRouteCreateNestedManyWithoutAssignedLogisticianInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    isAdmin?: boolean
    role?: string | null
    companyName?: string | null
    inn?: string | null
    kpp?: string | null
    billingAddress?: string | null
    dashboardSettings?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    assignedRoutes?: LogisticRouteUncheckedCreateNestedManyWithoutAssignedLogisticianInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    role?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    inn?: NullableStringFieldUpdateOperationsInput | string | null
    kpp?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    dashboardSettings?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUpdateManyWithoutUserNestedInput
    assignedRoutes?: LogisticRouteUpdateManyWithoutAssignedLogisticianNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    role?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    inn?: NullableStringFieldUpdateOperationsInput | string | null
    kpp?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    dashboardSettings?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    assignedRoutes?: LogisticRouteUncheckedUpdateManyWithoutAssignedLogisticianNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name: string
    password: string
    isAdmin?: boolean
    role?: string | null
    companyName?: string | null
    inn?: string | null
    kpp?: string | null
    billingAddress?: string | null
    dashboardSettings?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    role?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    inn?: NullableStringFieldUpdateOperationsInput | string | null
    kpp?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    dashboardSettings?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    role?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    inn?: NullableStringFieldUpdateOperationsInput | string | null
    kpp?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    dashboardSettings?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderCreateInput = {
    id?: string
    materialType: string
    volume: number
    price: number
    environmentalImpact: number
    status?: string
    pickupAddress: string
    paymentStatus?: string
    paymentMethod?: string | null
    invoiceNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutOrdersInput
    logisticRoutes?: LogisticRouteCreateNestedManyWithoutOrderInput
    documents?: OrderDocumentCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateInput = {
    id?: string
    userId: string
    materialType: string
    volume: number
    price: number
    environmentalImpact: number
    status?: string
    pickupAddress: string
    paymentStatus?: string
    paymentMethod?: string | null
    invoiceNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logisticRoutes?: LogisticRouteUncheckedCreateNestedManyWithoutOrderInput
    documents?: OrderDocumentUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialType?: StringFieldUpdateOperationsInput | string
    volume?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    environmentalImpact?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    pickupAddress?: StringFieldUpdateOperationsInput | string
    paymentStatus?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
    logisticRoutes?: LogisticRouteUpdateManyWithoutOrderNestedInput
    documents?: OrderDocumentUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    materialType?: StringFieldUpdateOperationsInput | string
    volume?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    environmentalImpact?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    pickupAddress?: StringFieldUpdateOperationsInput | string
    paymentStatus?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logisticRoutes?: LogisticRouteUncheckedUpdateManyWithoutOrderNestedInput
    documents?: OrderDocumentUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    id?: string
    userId: string
    materialType: string
    volume: number
    price: number
    environmentalImpact: number
    status?: string
    pickupAddress: string
    paymentStatus?: string
    paymentMethod?: string | null
    invoiceNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialType?: StringFieldUpdateOperationsInput | string
    volume?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    environmentalImpact?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    pickupAddress?: StringFieldUpdateOperationsInput | string
    paymentStatus?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    materialType?: StringFieldUpdateOperationsInput | string
    volume?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    environmentalImpact?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    pickupAddress?: StringFieldUpdateOperationsInput | string
    paymentStatus?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryItemCreateInput = {
    id?: string
    materialType: string
    availableQuantity: number
    reservedQuantity?: number
    location: string
    minThreshold: number
    maxCapacity: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryItemUncheckedCreateInput = {
    id?: string
    materialType: string
    availableQuantity: number
    reservedQuantity?: number
    location: string
    minThreshold: number
    maxCapacity: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialType?: StringFieldUpdateOperationsInput | string
    availableQuantity?: FloatFieldUpdateOperationsInput | number
    reservedQuantity?: FloatFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    minThreshold?: FloatFieldUpdateOperationsInput | number
    maxCapacity?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialType?: StringFieldUpdateOperationsInput | string
    availableQuantity?: FloatFieldUpdateOperationsInput | number
    reservedQuantity?: FloatFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    minThreshold?: FloatFieldUpdateOperationsInput | number
    maxCapacity?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryItemCreateManyInput = {
    id?: string
    materialType: string
    availableQuantity: number
    reservedQuantity?: number
    location: string
    minThreshold: number
    maxCapacity: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialType?: StringFieldUpdateOperationsInput | string
    availableQuantity?: FloatFieldUpdateOperationsInput | number
    reservedQuantity?: FloatFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    minThreshold?: FloatFieldUpdateOperationsInput | number
    maxCapacity?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialType?: StringFieldUpdateOperationsInput | string
    availableQuantity?: FloatFieldUpdateOperationsInput | number
    reservedQuantity?: FloatFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    minThreshold?: FloatFieldUpdateOperationsInput | number
    maxCapacity?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogisticRouteCreateInput = {
    id?: string
    pickupAddress: string
    deliveryAddress: string
    estimatedDistance: number
    status?: string
    selectedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    order: OrderCreateNestedOneWithoutLogisticRoutesInput
    assignedLogistician: UserCreateNestedOneWithoutAssignedRoutesInput
    routeOptions?: RouteOptionCreateNestedManyWithoutLogisticRouteInput
  }

  export type LogisticRouteUncheckedCreateInput = {
    id?: string
    orderId: string
    pickupAddress: string
    deliveryAddress: string
    estimatedDistance: number
    status?: string
    assignedLogisticianId: string
    selectedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    routeOptions?: RouteOptionUncheckedCreateNestedManyWithoutLogisticRouteInput
  }

  export type LogisticRouteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pickupAddress?: StringFieldUpdateOperationsInput | string
    deliveryAddress?: StringFieldUpdateOperationsInput | string
    estimatedDistance?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    selectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutLogisticRoutesNestedInput
    assignedLogistician?: UserUpdateOneRequiredWithoutAssignedRoutesNestedInput
    routeOptions?: RouteOptionUpdateManyWithoutLogisticRouteNestedInput
  }

  export type LogisticRouteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    pickupAddress?: StringFieldUpdateOperationsInput | string
    deliveryAddress?: StringFieldUpdateOperationsInput | string
    estimatedDistance?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    assignedLogisticianId?: StringFieldUpdateOperationsInput | string
    selectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    routeOptions?: RouteOptionUncheckedUpdateManyWithoutLogisticRouteNestedInput
  }

  export type LogisticRouteCreateManyInput = {
    id?: string
    orderId: string
    pickupAddress: string
    deliveryAddress: string
    estimatedDistance: number
    status?: string
    assignedLogisticianId: string
    selectedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LogisticRouteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    pickupAddress?: StringFieldUpdateOperationsInput | string
    deliveryAddress?: StringFieldUpdateOperationsInput | string
    estimatedDistance?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    selectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogisticRouteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    pickupAddress?: StringFieldUpdateOperationsInput | string
    deliveryAddress?: StringFieldUpdateOperationsInput | string
    estimatedDistance?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    assignedLogisticianId?: StringFieldUpdateOperationsInput | string
    selectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RouteOptionCreateInput = {
    id?: string
    name: string
    estimatedCost: number
    estimatedTime: number
    transportType: string
    description?: string | null
    isSelected?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    logisticRoute: LogisticRouteCreateNestedOneWithoutRouteOptionsInput
  }

  export type RouteOptionUncheckedCreateInput = {
    id?: string
    logisticRouteId: string
    name: string
    estimatedCost: number
    estimatedTime: number
    transportType: string
    description?: string | null
    isSelected?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RouteOptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    estimatedCost?: FloatFieldUpdateOperationsInput | number
    estimatedTime?: IntFieldUpdateOperationsInput | number
    transportType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logisticRoute?: LogisticRouteUpdateOneRequiredWithoutRouteOptionsNestedInput
  }

  export type RouteOptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    logisticRouteId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    estimatedCost?: FloatFieldUpdateOperationsInput | number
    estimatedTime?: IntFieldUpdateOperationsInput | number
    transportType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RouteOptionCreateManyInput = {
    id?: string
    logisticRouteId: string
    name: string
    estimatedCost: number
    estimatedTime: number
    transportType: string
    description?: string | null
    isSelected?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RouteOptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    estimatedCost?: FloatFieldUpdateOperationsInput | number
    estimatedTime?: IntFieldUpdateOperationsInput | number
    transportType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RouteOptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    logisticRouteId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    estimatedCost?: FloatFieldUpdateOperationsInput | number
    estimatedTime?: IntFieldUpdateOperationsInput | number
    transportType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderDocumentCreateInput = {
    id?: string
    documentType: string
    customerInfo: JsonNullValueInput | InputJsonValue
    orderDetails: JsonNullValueInput | InputJsonValue
    logisticsInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    generatedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    order: OrderCreateNestedOneWithoutDocumentsInput
  }

  export type OrderDocumentUncheckedCreateInput = {
    id?: string
    orderId: string
    documentType: string
    customerInfo: JsonNullValueInput | InputJsonValue
    orderDetails: JsonNullValueInput | InputJsonValue
    logisticsInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    generatedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderDocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: StringFieldUpdateOperationsInput | string
    customerInfo?: JsonNullValueInput | InputJsonValue
    orderDetails?: JsonNullValueInput | InputJsonValue
    logisticsInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type OrderDocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    documentType?: StringFieldUpdateOperationsInput | string
    customerInfo?: JsonNullValueInput | InputJsonValue
    orderDetails?: JsonNullValueInput | InputJsonValue
    logisticsInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderDocumentCreateManyInput = {
    id?: string
    orderId: string
    documentType: string
    customerInfo: JsonNullValueInput | InputJsonValue
    orderDetails: JsonNullValueInput | InputJsonValue
    logisticsInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    generatedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderDocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: StringFieldUpdateOperationsInput | string
    customerInfo?: JsonNullValueInput | InputJsonValue
    orderDetails?: JsonNullValueInput | InputJsonValue
    logisticsInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderDocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    documentType?: StringFieldUpdateOperationsInput | string
    customerInfo?: JsonNullValueInput | InputJsonValue
    orderDetails?: JsonNullValueInput | InputJsonValue
    logisticsInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type LogisticRouteListRelationFilter = {
    every?: LogisticRouteWhereInput
    some?: LogisticRouteWhereInput
    none?: LogisticRouteWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LogisticRouteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    isAdmin?: SortOrder
    role?: SortOrder
    companyName?: SortOrder
    inn?: SortOrder
    kpp?: SortOrder
    billingAddress?: SortOrder
    dashboardSettings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    isAdmin?: SortOrder
    role?: SortOrder
    companyName?: SortOrder
    inn?: SortOrder
    kpp?: SortOrder
    billingAddress?: SortOrder
    dashboardSettings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    isAdmin?: SortOrder
    role?: SortOrder
    companyName?: SortOrder
    inn?: SortOrder
    kpp?: SortOrder
    billingAddress?: SortOrder
    dashboardSettings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type OrderDocumentListRelationFilter = {
    every?: OrderDocumentWhereInput
    some?: OrderDocumentWhereInput
    none?: OrderDocumentWhereInput
  }

  export type OrderDocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    materialType?: SortOrder
    volume?: SortOrder
    price?: SortOrder
    environmentalImpact?: SortOrder
    status?: SortOrder
    pickupAddress?: SortOrder
    paymentStatus?: SortOrder
    paymentMethod?: SortOrder
    invoiceNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    volume?: SortOrder
    price?: SortOrder
    environmentalImpact?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    materialType?: SortOrder
    volume?: SortOrder
    price?: SortOrder
    environmentalImpact?: SortOrder
    status?: SortOrder
    pickupAddress?: SortOrder
    paymentStatus?: SortOrder
    paymentMethod?: SortOrder
    invoiceNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    materialType?: SortOrder
    volume?: SortOrder
    price?: SortOrder
    environmentalImpact?: SortOrder
    status?: SortOrder
    pickupAddress?: SortOrder
    paymentStatus?: SortOrder
    paymentMethod?: SortOrder
    invoiceNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    volume?: SortOrder
    price?: SortOrder
    environmentalImpact?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type InventoryItemCountOrderByAggregateInput = {
    id?: SortOrder
    materialType?: SortOrder
    availableQuantity?: SortOrder
    reservedQuantity?: SortOrder
    location?: SortOrder
    minThreshold?: SortOrder
    maxCapacity?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryItemAvgOrderByAggregateInput = {
    availableQuantity?: SortOrder
    reservedQuantity?: SortOrder
    minThreshold?: SortOrder
    maxCapacity?: SortOrder
  }

  export type InventoryItemMaxOrderByAggregateInput = {
    id?: SortOrder
    materialType?: SortOrder
    availableQuantity?: SortOrder
    reservedQuantity?: SortOrder
    location?: SortOrder
    minThreshold?: SortOrder
    maxCapacity?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryItemMinOrderByAggregateInput = {
    id?: SortOrder
    materialType?: SortOrder
    availableQuantity?: SortOrder
    reservedQuantity?: SortOrder
    location?: SortOrder
    minThreshold?: SortOrder
    maxCapacity?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryItemSumOrderByAggregateInput = {
    availableQuantity?: SortOrder
    reservedQuantity?: SortOrder
    minThreshold?: SortOrder
    maxCapacity?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type OrderScalarRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type RouteOptionListRelationFilter = {
    every?: RouteOptionWhereInput
    some?: RouteOptionWhereInput
    none?: RouteOptionWhereInput
  }

  export type RouteOptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LogisticRouteCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    pickupAddress?: SortOrder
    deliveryAddress?: SortOrder
    estimatedDistance?: SortOrder
    status?: SortOrder
    assignedLogisticianId?: SortOrder
    selectedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LogisticRouteAvgOrderByAggregateInput = {
    estimatedDistance?: SortOrder
  }

  export type LogisticRouteMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    pickupAddress?: SortOrder
    deliveryAddress?: SortOrder
    estimatedDistance?: SortOrder
    status?: SortOrder
    assignedLogisticianId?: SortOrder
    selectedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LogisticRouteMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    pickupAddress?: SortOrder
    deliveryAddress?: SortOrder
    estimatedDistance?: SortOrder
    status?: SortOrder
    assignedLogisticianId?: SortOrder
    selectedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LogisticRouteSumOrderByAggregateInput = {
    estimatedDistance?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type LogisticRouteScalarRelationFilter = {
    is?: LogisticRouteWhereInput
    isNot?: LogisticRouteWhereInput
  }

  export type RouteOptionCountOrderByAggregateInput = {
    id?: SortOrder
    logisticRouteId?: SortOrder
    name?: SortOrder
    estimatedCost?: SortOrder
    estimatedTime?: SortOrder
    transportType?: SortOrder
    description?: SortOrder
    isSelected?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RouteOptionAvgOrderByAggregateInput = {
    estimatedCost?: SortOrder
    estimatedTime?: SortOrder
  }

  export type RouteOptionMaxOrderByAggregateInput = {
    id?: SortOrder
    logisticRouteId?: SortOrder
    name?: SortOrder
    estimatedCost?: SortOrder
    estimatedTime?: SortOrder
    transportType?: SortOrder
    description?: SortOrder
    isSelected?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RouteOptionMinOrderByAggregateInput = {
    id?: SortOrder
    logisticRouteId?: SortOrder
    name?: SortOrder
    estimatedCost?: SortOrder
    estimatedTime?: SortOrder
    transportType?: SortOrder
    description?: SortOrder
    isSelected?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RouteOptionSumOrderByAggregateInput = {
    estimatedCost?: SortOrder
    estimatedTime?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type OrderDocumentCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    documentType?: SortOrder
    customerInfo?: SortOrder
    orderDetails?: SortOrder
    logisticsInfo?: SortOrder
    status?: SortOrder
    generatedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderDocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    documentType?: SortOrder
    status?: SortOrder
    generatedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderDocumentMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    documentType?: SortOrder
    status?: SortOrder
    generatedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type OrderCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type LogisticRouteCreateNestedManyWithoutAssignedLogisticianInput = {
    create?: XOR<LogisticRouteCreateWithoutAssignedLogisticianInput, LogisticRouteUncheckedCreateWithoutAssignedLogisticianInput> | LogisticRouteCreateWithoutAssignedLogisticianInput[] | LogisticRouteUncheckedCreateWithoutAssignedLogisticianInput[]
    connectOrCreate?: LogisticRouteCreateOrConnectWithoutAssignedLogisticianInput | LogisticRouteCreateOrConnectWithoutAssignedLogisticianInput[]
    createMany?: LogisticRouteCreateManyAssignedLogisticianInputEnvelope
    connect?: LogisticRouteWhereUniqueInput | LogisticRouteWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type LogisticRouteUncheckedCreateNestedManyWithoutAssignedLogisticianInput = {
    create?: XOR<LogisticRouteCreateWithoutAssignedLogisticianInput, LogisticRouteUncheckedCreateWithoutAssignedLogisticianInput> | LogisticRouteCreateWithoutAssignedLogisticianInput[] | LogisticRouteUncheckedCreateWithoutAssignedLogisticianInput[]
    connectOrCreate?: LogisticRouteCreateOrConnectWithoutAssignedLogisticianInput | LogisticRouteCreateOrConnectWithoutAssignedLogisticianInput[]
    createMany?: LogisticRouteCreateManyAssignedLogisticianInputEnvelope
    connect?: LogisticRouteWhereUniqueInput | LogisticRouteWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type OrderUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type LogisticRouteUpdateManyWithoutAssignedLogisticianNestedInput = {
    create?: XOR<LogisticRouteCreateWithoutAssignedLogisticianInput, LogisticRouteUncheckedCreateWithoutAssignedLogisticianInput> | LogisticRouteCreateWithoutAssignedLogisticianInput[] | LogisticRouteUncheckedCreateWithoutAssignedLogisticianInput[]
    connectOrCreate?: LogisticRouteCreateOrConnectWithoutAssignedLogisticianInput | LogisticRouteCreateOrConnectWithoutAssignedLogisticianInput[]
    upsert?: LogisticRouteUpsertWithWhereUniqueWithoutAssignedLogisticianInput | LogisticRouteUpsertWithWhereUniqueWithoutAssignedLogisticianInput[]
    createMany?: LogisticRouteCreateManyAssignedLogisticianInputEnvelope
    set?: LogisticRouteWhereUniqueInput | LogisticRouteWhereUniqueInput[]
    disconnect?: LogisticRouteWhereUniqueInput | LogisticRouteWhereUniqueInput[]
    delete?: LogisticRouteWhereUniqueInput | LogisticRouteWhereUniqueInput[]
    connect?: LogisticRouteWhereUniqueInput | LogisticRouteWhereUniqueInput[]
    update?: LogisticRouteUpdateWithWhereUniqueWithoutAssignedLogisticianInput | LogisticRouteUpdateWithWhereUniqueWithoutAssignedLogisticianInput[]
    updateMany?: LogisticRouteUpdateManyWithWhereWithoutAssignedLogisticianInput | LogisticRouteUpdateManyWithWhereWithoutAssignedLogisticianInput[]
    deleteMany?: LogisticRouteScalarWhereInput | LogisticRouteScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type LogisticRouteUncheckedUpdateManyWithoutAssignedLogisticianNestedInput = {
    create?: XOR<LogisticRouteCreateWithoutAssignedLogisticianInput, LogisticRouteUncheckedCreateWithoutAssignedLogisticianInput> | LogisticRouteCreateWithoutAssignedLogisticianInput[] | LogisticRouteUncheckedCreateWithoutAssignedLogisticianInput[]
    connectOrCreate?: LogisticRouteCreateOrConnectWithoutAssignedLogisticianInput | LogisticRouteCreateOrConnectWithoutAssignedLogisticianInput[]
    upsert?: LogisticRouteUpsertWithWhereUniqueWithoutAssignedLogisticianInput | LogisticRouteUpsertWithWhereUniqueWithoutAssignedLogisticianInput[]
    createMany?: LogisticRouteCreateManyAssignedLogisticianInputEnvelope
    set?: LogisticRouteWhereUniqueInput | LogisticRouteWhereUniqueInput[]
    disconnect?: LogisticRouteWhereUniqueInput | LogisticRouteWhereUniqueInput[]
    delete?: LogisticRouteWhereUniqueInput | LogisticRouteWhereUniqueInput[]
    connect?: LogisticRouteWhereUniqueInput | LogisticRouteWhereUniqueInput[]
    update?: LogisticRouteUpdateWithWhereUniqueWithoutAssignedLogisticianInput | LogisticRouteUpdateWithWhereUniqueWithoutAssignedLogisticianInput[]
    updateMany?: LogisticRouteUpdateManyWithWhereWithoutAssignedLogisticianInput | LogisticRouteUpdateManyWithWhereWithoutAssignedLogisticianInput[]
    deleteMany?: LogisticRouteScalarWhereInput | LogisticRouteScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutOrdersInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type LogisticRouteCreateNestedManyWithoutOrderInput = {
    create?: XOR<LogisticRouteCreateWithoutOrderInput, LogisticRouteUncheckedCreateWithoutOrderInput> | LogisticRouteCreateWithoutOrderInput[] | LogisticRouteUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: LogisticRouteCreateOrConnectWithoutOrderInput | LogisticRouteCreateOrConnectWithoutOrderInput[]
    createMany?: LogisticRouteCreateManyOrderInputEnvelope
    connect?: LogisticRouteWhereUniqueInput | LogisticRouteWhereUniqueInput[]
  }

  export type OrderDocumentCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderDocumentCreateWithoutOrderInput, OrderDocumentUncheckedCreateWithoutOrderInput> | OrderDocumentCreateWithoutOrderInput[] | OrderDocumentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderDocumentCreateOrConnectWithoutOrderInput | OrderDocumentCreateOrConnectWithoutOrderInput[]
    createMany?: OrderDocumentCreateManyOrderInputEnvelope
    connect?: OrderDocumentWhereUniqueInput | OrderDocumentWhereUniqueInput[]
  }

  export type LogisticRouteUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<LogisticRouteCreateWithoutOrderInput, LogisticRouteUncheckedCreateWithoutOrderInput> | LogisticRouteCreateWithoutOrderInput[] | LogisticRouteUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: LogisticRouteCreateOrConnectWithoutOrderInput | LogisticRouteCreateOrConnectWithoutOrderInput[]
    createMany?: LogisticRouteCreateManyOrderInputEnvelope
    connect?: LogisticRouteWhereUniqueInput | LogisticRouteWhereUniqueInput[]
  }

  export type OrderDocumentUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderDocumentCreateWithoutOrderInput, OrderDocumentUncheckedCreateWithoutOrderInput> | OrderDocumentCreateWithoutOrderInput[] | OrderDocumentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderDocumentCreateOrConnectWithoutOrderInput | OrderDocumentCreateOrConnectWithoutOrderInput[]
    createMany?: OrderDocumentCreateManyOrderInputEnvelope
    connect?: OrderDocumentWhereUniqueInput | OrderDocumentWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    upsert?: UserUpsertWithoutOrdersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrdersInput, UserUpdateWithoutOrdersInput>, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type LogisticRouteUpdateManyWithoutOrderNestedInput = {
    create?: XOR<LogisticRouteCreateWithoutOrderInput, LogisticRouteUncheckedCreateWithoutOrderInput> | LogisticRouteCreateWithoutOrderInput[] | LogisticRouteUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: LogisticRouteCreateOrConnectWithoutOrderInput | LogisticRouteCreateOrConnectWithoutOrderInput[]
    upsert?: LogisticRouteUpsertWithWhereUniqueWithoutOrderInput | LogisticRouteUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: LogisticRouteCreateManyOrderInputEnvelope
    set?: LogisticRouteWhereUniqueInput | LogisticRouteWhereUniqueInput[]
    disconnect?: LogisticRouteWhereUniqueInput | LogisticRouteWhereUniqueInput[]
    delete?: LogisticRouteWhereUniqueInput | LogisticRouteWhereUniqueInput[]
    connect?: LogisticRouteWhereUniqueInput | LogisticRouteWhereUniqueInput[]
    update?: LogisticRouteUpdateWithWhereUniqueWithoutOrderInput | LogisticRouteUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: LogisticRouteUpdateManyWithWhereWithoutOrderInput | LogisticRouteUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: LogisticRouteScalarWhereInput | LogisticRouteScalarWhereInput[]
  }

  export type OrderDocumentUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderDocumentCreateWithoutOrderInput, OrderDocumentUncheckedCreateWithoutOrderInput> | OrderDocumentCreateWithoutOrderInput[] | OrderDocumentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderDocumentCreateOrConnectWithoutOrderInput | OrderDocumentCreateOrConnectWithoutOrderInput[]
    upsert?: OrderDocumentUpsertWithWhereUniqueWithoutOrderInput | OrderDocumentUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderDocumentCreateManyOrderInputEnvelope
    set?: OrderDocumentWhereUniqueInput | OrderDocumentWhereUniqueInput[]
    disconnect?: OrderDocumentWhereUniqueInput | OrderDocumentWhereUniqueInput[]
    delete?: OrderDocumentWhereUniqueInput | OrderDocumentWhereUniqueInput[]
    connect?: OrderDocumentWhereUniqueInput | OrderDocumentWhereUniqueInput[]
    update?: OrderDocumentUpdateWithWhereUniqueWithoutOrderInput | OrderDocumentUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderDocumentUpdateManyWithWhereWithoutOrderInput | OrderDocumentUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderDocumentScalarWhereInput | OrderDocumentScalarWhereInput[]
  }

  export type LogisticRouteUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<LogisticRouteCreateWithoutOrderInput, LogisticRouteUncheckedCreateWithoutOrderInput> | LogisticRouteCreateWithoutOrderInput[] | LogisticRouteUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: LogisticRouteCreateOrConnectWithoutOrderInput | LogisticRouteCreateOrConnectWithoutOrderInput[]
    upsert?: LogisticRouteUpsertWithWhereUniqueWithoutOrderInput | LogisticRouteUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: LogisticRouteCreateManyOrderInputEnvelope
    set?: LogisticRouteWhereUniqueInput | LogisticRouteWhereUniqueInput[]
    disconnect?: LogisticRouteWhereUniqueInput | LogisticRouteWhereUniqueInput[]
    delete?: LogisticRouteWhereUniqueInput | LogisticRouteWhereUniqueInput[]
    connect?: LogisticRouteWhereUniqueInput | LogisticRouteWhereUniqueInput[]
    update?: LogisticRouteUpdateWithWhereUniqueWithoutOrderInput | LogisticRouteUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: LogisticRouteUpdateManyWithWhereWithoutOrderInput | LogisticRouteUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: LogisticRouteScalarWhereInput | LogisticRouteScalarWhereInput[]
  }

  export type OrderDocumentUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderDocumentCreateWithoutOrderInput, OrderDocumentUncheckedCreateWithoutOrderInput> | OrderDocumentCreateWithoutOrderInput[] | OrderDocumentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderDocumentCreateOrConnectWithoutOrderInput | OrderDocumentCreateOrConnectWithoutOrderInput[]
    upsert?: OrderDocumentUpsertWithWhereUniqueWithoutOrderInput | OrderDocumentUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderDocumentCreateManyOrderInputEnvelope
    set?: OrderDocumentWhereUniqueInput | OrderDocumentWhereUniqueInput[]
    disconnect?: OrderDocumentWhereUniqueInput | OrderDocumentWhereUniqueInput[]
    delete?: OrderDocumentWhereUniqueInput | OrderDocumentWhereUniqueInput[]
    connect?: OrderDocumentWhereUniqueInput | OrderDocumentWhereUniqueInput[]
    update?: OrderDocumentUpdateWithWhereUniqueWithoutOrderInput | OrderDocumentUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderDocumentUpdateManyWithWhereWithoutOrderInput | OrderDocumentUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderDocumentScalarWhereInput | OrderDocumentScalarWhereInput[]
  }

  export type OrderCreateNestedOneWithoutLogisticRoutesInput = {
    create?: XOR<OrderCreateWithoutLogisticRoutesInput, OrderUncheckedCreateWithoutLogisticRoutesInput>
    connectOrCreate?: OrderCreateOrConnectWithoutLogisticRoutesInput
    connect?: OrderWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedRoutesInput = {
    create?: XOR<UserCreateWithoutAssignedRoutesInput, UserUncheckedCreateWithoutAssignedRoutesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedRoutesInput
    connect?: UserWhereUniqueInput
  }

  export type RouteOptionCreateNestedManyWithoutLogisticRouteInput = {
    create?: XOR<RouteOptionCreateWithoutLogisticRouteInput, RouteOptionUncheckedCreateWithoutLogisticRouteInput> | RouteOptionCreateWithoutLogisticRouteInput[] | RouteOptionUncheckedCreateWithoutLogisticRouteInput[]
    connectOrCreate?: RouteOptionCreateOrConnectWithoutLogisticRouteInput | RouteOptionCreateOrConnectWithoutLogisticRouteInput[]
    createMany?: RouteOptionCreateManyLogisticRouteInputEnvelope
    connect?: RouteOptionWhereUniqueInput | RouteOptionWhereUniqueInput[]
  }

  export type RouteOptionUncheckedCreateNestedManyWithoutLogisticRouteInput = {
    create?: XOR<RouteOptionCreateWithoutLogisticRouteInput, RouteOptionUncheckedCreateWithoutLogisticRouteInput> | RouteOptionCreateWithoutLogisticRouteInput[] | RouteOptionUncheckedCreateWithoutLogisticRouteInput[]
    connectOrCreate?: RouteOptionCreateOrConnectWithoutLogisticRouteInput | RouteOptionCreateOrConnectWithoutLogisticRouteInput[]
    createMany?: RouteOptionCreateManyLogisticRouteInputEnvelope
    connect?: RouteOptionWhereUniqueInput | RouteOptionWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type OrderUpdateOneRequiredWithoutLogisticRoutesNestedInput = {
    create?: XOR<OrderCreateWithoutLogisticRoutesInput, OrderUncheckedCreateWithoutLogisticRoutesInput>
    connectOrCreate?: OrderCreateOrConnectWithoutLogisticRoutesInput
    upsert?: OrderUpsertWithoutLogisticRoutesInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutLogisticRoutesInput, OrderUpdateWithoutLogisticRoutesInput>, OrderUncheckedUpdateWithoutLogisticRoutesInput>
  }

  export type UserUpdateOneRequiredWithoutAssignedRoutesNestedInput = {
    create?: XOR<UserCreateWithoutAssignedRoutesInput, UserUncheckedCreateWithoutAssignedRoutesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedRoutesInput
    upsert?: UserUpsertWithoutAssignedRoutesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedRoutesInput, UserUpdateWithoutAssignedRoutesInput>, UserUncheckedUpdateWithoutAssignedRoutesInput>
  }

  export type RouteOptionUpdateManyWithoutLogisticRouteNestedInput = {
    create?: XOR<RouteOptionCreateWithoutLogisticRouteInput, RouteOptionUncheckedCreateWithoutLogisticRouteInput> | RouteOptionCreateWithoutLogisticRouteInput[] | RouteOptionUncheckedCreateWithoutLogisticRouteInput[]
    connectOrCreate?: RouteOptionCreateOrConnectWithoutLogisticRouteInput | RouteOptionCreateOrConnectWithoutLogisticRouteInput[]
    upsert?: RouteOptionUpsertWithWhereUniqueWithoutLogisticRouteInput | RouteOptionUpsertWithWhereUniqueWithoutLogisticRouteInput[]
    createMany?: RouteOptionCreateManyLogisticRouteInputEnvelope
    set?: RouteOptionWhereUniqueInput | RouteOptionWhereUniqueInput[]
    disconnect?: RouteOptionWhereUniqueInput | RouteOptionWhereUniqueInput[]
    delete?: RouteOptionWhereUniqueInput | RouteOptionWhereUniqueInput[]
    connect?: RouteOptionWhereUniqueInput | RouteOptionWhereUniqueInput[]
    update?: RouteOptionUpdateWithWhereUniqueWithoutLogisticRouteInput | RouteOptionUpdateWithWhereUniqueWithoutLogisticRouteInput[]
    updateMany?: RouteOptionUpdateManyWithWhereWithoutLogisticRouteInput | RouteOptionUpdateManyWithWhereWithoutLogisticRouteInput[]
    deleteMany?: RouteOptionScalarWhereInput | RouteOptionScalarWhereInput[]
  }

  export type RouteOptionUncheckedUpdateManyWithoutLogisticRouteNestedInput = {
    create?: XOR<RouteOptionCreateWithoutLogisticRouteInput, RouteOptionUncheckedCreateWithoutLogisticRouteInput> | RouteOptionCreateWithoutLogisticRouteInput[] | RouteOptionUncheckedCreateWithoutLogisticRouteInput[]
    connectOrCreate?: RouteOptionCreateOrConnectWithoutLogisticRouteInput | RouteOptionCreateOrConnectWithoutLogisticRouteInput[]
    upsert?: RouteOptionUpsertWithWhereUniqueWithoutLogisticRouteInput | RouteOptionUpsertWithWhereUniqueWithoutLogisticRouteInput[]
    createMany?: RouteOptionCreateManyLogisticRouteInputEnvelope
    set?: RouteOptionWhereUniqueInput | RouteOptionWhereUniqueInput[]
    disconnect?: RouteOptionWhereUniqueInput | RouteOptionWhereUniqueInput[]
    delete?: RouteOptionWhereUniqueInput | RouteOptionWhereUniqueInput[]
    connect?: RouteOptionWhereUniqueInput | RouteOptionWhereUniqueInput[]
    update?: RouteOptionUpdateWithWhereUniqueWithoutLogisticRouteInput | RouteOptionUpdateWithWhereUniqueWithoutLogisticRouteInput[]
    updateMany?: RouteOptionUpdateManyWithWhereWithoutLogisticRouteInput | RouteOptionUpdateManyWithWhereWithoutLogisticRouteInput[]
    deleteMany?: RouteOptionScalarWhereInput | RouteOptionScalarWhereInput[]
  }

  export type LogisticRouteCreateNestedOneWithoutRouteOptionsInput = {
    create?: XOR<LogisticRouteCreateWithoutRouteOptionsInput, LogisticRouteUncheckedCreateWithoutRouteOptionsInput>
    connectOrCreate?: LogisticRouteCreateOrConnectWithoutRouteOptionsInput
    connect?: LogisticRouteWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LogisticRouteUpdateOneRequiredWithoutRouteOptionsNestedInput = {
    create?: XOR<LogisticRouteCreateWithoutRouteOptionsInput, LogisticRouteUncheckedCreateWithoutRouteOptionsInput>
    connectOrCreate?: LogisticRouteCreateOrConnectWithoutRouteOptionsInput
    upsert?: LogisticRouteUpsertWithoutRouteOptionsInput
    connect?: LogisticRouteWhereUniqueInput
    update?: XOR<XOR<LogisticRouteUpdateToOneWithWhereWithoutRouteOptionsInput, LogisticRouteUpdateWithoutRouteOptionsInput>, LogisticRouteUncheckedUpdateWithoutRouteOptionsInput>
  }

  export type OrderCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<OrderCreateWithoutDocumentsInput, OrderUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutDocumentsInput
    connect?: OrderWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<OrderCreateWithoutDocumentsInput, OrderUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutDocumentsInput
    upsert?: OrderUpsertWithoutDocumentsInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutDocumentsInput, OrderUpdateWithoutDocumentsInput>, OrderUncheckedUpdateWithoutDocumentsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type OrderCreateWithoutUserInput = {
    id?: string
    materialType: string
    volume: number
    price: number
    environmentalImpact: number
    status?: string
    pickupAddress: string
    paymentStatus?: string
    paymentMethod?: string | null
    invoiceNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logisticRoutes?: LogisticRouteCreateNestedManyWithoutOrderInput
    documents?: OrderDocumentCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutUserInput = {
    id?: string
    materialType: string
    volume: number
    price: number
    environmentalImpact: number
    status?: string
    pickupAddress: string
    paymentStatus?: string
    paymentMethod?: string | null
    invoiceNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logisticRoutes?: LogisticRouteUncheckedCreateNestedManyWithoutOrderInput
    documents?: OrderDocumentUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutUserInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderCreateManyUserInputEnvelope = {
    data: OrderCreateManyUserInput | OrderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LogisticRouteCreateWithoutAssignedLogisticianInput = {
    id?: string
    pickupAddress: string
    deliveryAddress: string
    estimatedDistance: number
    status?: string
    selectedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    order: OrderCreateNestedOneWithoutLogisticRoutesInput
    routeOptions?: RouteOptionCreateNestedManyWithoutLogisticRouteInput
  }

  export type LogisticRouteUncheckedCreateWithoutAssignedLogisticianInput = {
    id?: string
    orderId: string
    pickupAddress: string
    deliveryAddress: string
    estimatedDistance: number
    status?: string
    selectedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    routeOptions?: RouteOptionUncheckedCreateNestedManyWithoutLogisticRouteInput
  }

  export type LogisticRouteCreateOrConnectWithoutAssignedLogisticianInput = {
    where: LogisticRouteWhereUniqueInput
    create: XOR<LogisticRouteCreateWithoutAssignedLogisticianInput, LogisticRouteUncheckedCreateWithoutAssignedLogisticianInput>
  }

  export type LogisticRouteCreateManyAssignedLogisticianInputEnvelope = {
    data: LogisticRouteCreateManyAssignedLogisticianInput | LogisticRouteCreateManyAssignedLogisticianInput[]
    skipDuplicates?: boolean
  }

  export type OrderUpsertWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
  }

  export type OrderUpdateManyWithWhereWithoutUserInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutUserInput>
  }

  export type OrderScalarWhereInput = {
    AND?: OrderScalarWhereInput | OrderScalarWhereInput[]
    OR?: OrderScalarWhereInput[]
    NOT?: OrderScalarWhereInput | OrderScalarWhereInput[]
    id?: StringFilter<"Order"> | string
    userId?: StringFilter<"Order"> | string
    materialType?: StringFilter<"Order"> | string
    volume?: FloatFilter<"Order"> | number
    price?: FloatFilter<"Order"> | number
    environmentalImpact?: FloatFilter<"Order"> | number
    status?: StringFilter<"Order"> | string
    pickupAddress?: StringFilter<"Order"> | string
    paymentStatus?: StringFilter<"Order"> | string
    paymentMethod?: StringNullableFilter<"Order"> | string | null
    invoiceNumber?: StringNullableFilter<"Order"> | string | null
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
  }

  export type LogisticRouteUpsertWithWhereUniqueWithoutAssignedLogisticianInput = {
    where: LogisticRouteWhereUniqueInput
    update: XOR<LogisticRouteUpdateWithoutAssignedLogisticianInput, LogisticRouteUncheckedUpdateWithoutAssignedLogisticianInput>
    create: XOR<LogisticRouteCreateWithoutAssignedLogisticianInput, LogisticRouteUncheckedCreateWithoutAssignedLogisticianInput>
  }

  export type LogisticRouteUpdateWithWhereUniqueWithoutAssignedLogisticianInput = {
    where: LogisticRouteWhereUniqueInput
    data: XOR<LogisticRouteUpdateWithoutAssignedLogisticianInput, LogisticRouteUncheckedUpdateWithoutAssignedLogisticianInput>
  }

  export type LogisticRouteUpdateManyWithWhereWithoutAssignedLogisticianInput = {
    where: LogisticRouteScalarWhereInput
    data: XOR<LogisticRouteUpdateManyMutationInput, LogisticRouteUncheckedUpdateManyWithoutAssignedLogisticianInput>
  }

  export type LogisticRouteScalarWhereInput = {
    AND?: LogisticRouteScalarWhereInput | LogisticRouteScalarWhereInput[]
    OR?: LogisticRouteScalarWhereInput[]
    NOT?: LogisticRouteScalarWhereInput | LogisticRouteScalarWhereInput[]
    id?: StringFilter<"LogisticRoute"> | string
    orderId?: StringFilter<"LogisticRoute"> | string
    pickupAddress?: StringFilter<"LogisticRoute"> | string
    deliveryAddress?: StringFilter<"LogisticRoute"> | string
    estimatedDistance?: FloatFilter<"LogisticRoute"> | number
    status?: StringFilter<"LogisticRoute"> | string
    assignedLogisticianId?: StringFilter<"LogisticRoute"> | string
    selectedAt?: DateTimeNullableFilter<"LogisticRoute"> | Date | string | null
    createdAt?: DateTimeFilter<"LogisticRoute"> | Date | string
    updatedAt?: DateTimeFilter<"LogisticRoute"> | Date | string
  }

  export type UserCreateWithoutOrdersInput = {
    id?: string
    email: string
    name: string
    password: string
    isAdmin?: boolean
    role?: string | null
    companyName?: string | null
    inn?: string | null
    kpp?: string | null
    billingAddress?: string | null
    dashboardSettings?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedRoutes?: LogisticRouteCreateNestedManyWithoutAssignedLogisticianInput
  }

  export type UserUncheckedCreateWithoutOrdersInput = {
    id?: string
    email: string
    name: string
    password: string
    isAdmin?: boolean
    role?: string | null
    companyName?: string | null
    inn?: string | null
    kpp?: string | null
    billingAddress?: string | null
    dashboardSettings?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedRoutes?: LogisticRouteUncheckedCreateNestedManyWithoutAssignedLogisticianInput
  }

  export type UserCreateOrConnectWithoutOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
  }

  export type LogisticRouteCreateWithoutOrderInput = {
    id?: string
    pickupAddress: string
    deliveryAddress: string
    estimatedDistance: number
    status?: string
    selectedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedLogistician: UserCreateNestedOneWithoutAssignedRoutesInput
    routeOptions?: RouteOptionCreateNestedManyWithoutLogisticRouteInput
  }

  export type LogisticRouteUncheckedCreateWithoutOrderInput = {
    id?: string
    pickupAddress: string
    deliveryAddress: string
    estimatedDistance: number
    status?: string
    assignedLogisticianId: string
    selectedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    routeOptions?: RouteOptionUncheckedCreateNestedManyWithoutLogisticRouteInput
  }

  export type LogisticRouteCreateOrConnectWithoutOrderInput = {
    where: LogisticRouteWhereUniqueInput
    create: XOR<LogisticRouteCreateWithoutOrderInput, LogisticRouteUncheckedCreateWithoutOrderInput>
  }

  export type LogisticRouteCreateManyOrderInputEnvelope = {
    data: LogisticRouteCreateManyOrderInput | LogisticRouteCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type OrderDocumentCreateWithoutOrderInput = {
    id?: string
    documentType: string
    customerInfo: JsonNullValueInput | InputJsonValue
    orderDetails: JsonNullValueInput | InputJsonValue
    logisticsInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    generatedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderDocumentUncheckedCreateWithoutOrderInput = {
    id?: string
    documentType: string
    customerInfo: JsonNullValueInput | InputJsonValue
    orderDetails: JsonNullValueInput | InputJsonValue
    logisticsInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    generatedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderDocumentCreateOrConnectWithoutOrderInput = {
    where: OrderDocumentWhereUniqueInput
    create: XOR<OrderDocumentCreateWithoutOrderInput, OrderDocumentUncheckedCreateWithoutOrderInput>
  }

  export type OrderDocumentCreateManyOrderInputEnvelope = {
    data: OrderDocumentCreateManyOrderInput | OrderDocumentCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutOrdersInput = {
    update: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrdersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type UserUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    role?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    inn?: NullableStringFieldUpdateOperationsInput | string | null
    kpp?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    dashboardSettings?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedRoutes?: LogisticRouteUpdateManyWithoutAssignedLogisticianNestedInput
  }

  export type UserUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    role?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    inn?: NullableStringFieldUpdateOperationsInput | string | null
    kpp?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    dashboardSettings?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedRoutes?: LogisticRouteUncheckedUpdateManyWithoutAssignedLogisticianNestedInput
  }

  export type LogisticRouteUpsertWithWhereUniqueWithoutOrderInput = {
    where: LogisticRouteWhereUniqueInput
    update: XOR<LogisticRouteUpdateWithoutOrderInput, LogisticRouteUncheckedUpdateWithoutOrderInput>
    create: XOR<LogisticRouteCreateWithoutOrderInput, LogisticRouteUncheckedCreateWithoutOrderInput>
  }

  export type LogisticRouteUpdateWithWhereUniqueWithoutOrderInput = {
    where: LogisticRouteWhereUniqueInput
    data: XOR<LogisticRouteUpdateWithoutOrderInput, LogisticRouteUncheckedUpdateWithoutOrderInput>
  }

  export type LogisticRouteUpdateManyWithWhereWithoutOrderInput = {
    where: LogisticRouteScalarWhereInput
    data: XOR<LogisticRouteUpdateManyMutationInput, LogisticRouteUncheckedUpdateManyWithoutOrderInput>
  }

  export type OrderDocumentUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrderDocumentWhereUniqueInput
    update: XOR<OrderDocumentUpdateWithoutOrderInput, OrderDocumentUncheckedUpdateWithoutOrderInput>
    create: XOR<OrderDocumentCreateWithoutOrderInput, OrderDocumentUncheckedCreateWithoutOrderInput>
  }

  export type OrderDocumentUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrderDocumentWhereUniqueInput
    data: XOR<OrderDocumentUpdateWithoutOrderInput, OrderDocumentUncheckedUpdateWithoutOrderInput>
  }

  export type OrderDocumentUpdateManyWithWhereWithoutOrderInput = {
    where: OrderDocumentScalarWhereInput
    data: XOR<OrderDocumentUpdateManyMutationInput, OrderDocumentUncheckedUpdateManyWithoutOrderInput>
  }

  export type OrderDocumentScalarWhereInput = {
    AND?: OrderDocumentScalarWhereInput | OrderDocumentScalarWhereInput[]
    OR?: OrderDocumentScalarWhereInput[]
    NOT?: OrderDocumentScalarWhereInput | OrderDocumentScalarWhereInput[]
    id?: StringFilter<"OrderDocument"> | string
    orderId?: StringFilter<"OrderDocument"> | string
    documentType?: StringFilter<"OrderDocument"> | string
    customerInfo?: JsonFilter<"OrderDocument">
    orderDetails?: JsonFilter<"OrderDocument">
    logisticsInfo?: JsonNullableFilter<"OrderDocument">
    status?: StringFilter<"OrderDocument"> | string
    generatedAt?: DateTimeFilter<"OrderDocument"> | Date | string
    createdAt?: DateTimeFilter<"OrderDocument"> | Date | string
    updatedAt?: DateTimeFilter<"OrderDocument"> | Date | string
  }

  export type OrderCreateWithoutLogisticRoutesInput = {
    id?: string
    materialType: string
    volume: number
    price: number
    environmentalImpact: number
    status?: string
    pickupAddress: string
    paymentStatus?: string
    paymentMethod?: string | null
    invoiceNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutOrdersInput
    documents?: OrderDocumentCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutLogisticRoutesInput = {
    id?: string
    userId: string
    materialType: string
    volume: number
    price: number
    environmentalImpact: number
    status?: string
    pickupAddress: string
    paymentStatus?: string
    paymentMethod?: string | null
    invoiceNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: OrderDocumentUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutLogisticRoutesInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutLogisticRoutesInput, OrderUncheckedCreateWithoutLogisticRoutesInput>
  }

  export type UserCreateWithoutAssignedRoutesInput = {
    id?: string
    email: string
    name: string
    password: string
    isAdmin?: boolean
    role?: string | null
    companyName?: string | null
    inn?: string | null
    kpp?: string | null
    billingAddress?: string | null
    dashboardSettings?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: OrderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAssignedRoutesInput = {
    id?: string
    email: string
    name: string
    password: string
    isAdmin?: boolean
    role?: string | null
    companyName?: string | null
    inn?: string | null
    kpp?: string | null
    billingAddress?: string | null
    dashboardSettings?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAssignedRoutesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedRoutesInput, UserUncheckedCreateWithoutAssignedRoutesInput>
  }

  export type RouteOptionCreateWithoutLogisticRouteInput = {
    id?: string
    name: string
    estimatedCost: number
    estimatedTime: number
    transportType: string
    description?: string | null
    isSelected?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RouteOptionUncheckedCreateWithoutLogisticRouteInput = {
    id?: string
    name: string
    estimatedCost: number
    estimatedTime: number
    transportType: string
    description?: string | null
    isSelected?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RouteOptionCreateOrConnectWithoutLogisticRouteInput = {
    where: RouteOptionWhereUniqueInput
    create: XOR<RouteOptionCreateWithoutLogisticRouteInput, RouteOptionUncheckedCreateWithoutLogisticRouteInput>
  }

  export type RouteOptionCreateManyLogisticRouteInputEnvelope = {
    data: RouteOptionCreateManyLogisticRouteInput | RouteOptionCreateManyLogisticRouteInput[]
    skipDuplicates?: boolean
  }

  export type OrderUpsertWithoutLogisticRoutesInput = {
    update: XOR<OrderUpdateWithoutLogisticRoutesInput, OrderUncheckedUpdateWithoutLogisticRoutesInput>
    create: XOR<OrderCreateWithoutLogisticRoutesInput, OrderUncheckedCreateWithoutLogisticRoutesInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutLogisticRoutesInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutLogisticRoutesInput, OrderUncheckedUpdateWithoutLogisticRoutesInput>
  }

  export type OrderUpdateWithoutLogisticRoutesInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialType?: StringFieldUpdateOperationsInput | string
    volume?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    environmentalImpact?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    pickupAddress?: StringFieldUpdateOperationsInput | string
    paymentStatus?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
    documents?: OrderDocumentUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutLogisticRoutesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    materialType?: StringFieldUpdateOperationsInput | string
    volume?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    environmentalImpact?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    pickupAddress?: StringFieldUpdateOperationsInput | string
    paymentStatus?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: OrderDocumentUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type UserUpsertWithoutAssignedRoutesInput = {
    update: XOR<UserUpdateWithoutAssignedRoutesInput, UserUncheckedUpdateWithoutAssignedRoutesInput>
    create: XOR<UserCreateWithoutAssignedRoutesInput, UserUncheckedCreateWithoutAssignedRoutesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedRoutesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedRoutesInput, UserUncheckedUpdateWithoutAssignedRoutesInput>
  }

  export type UserUpdateWithoutAssignedRoutesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    role?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    inn?: NullableStringFieldUpdateOperationsInput | string | null
    kpp?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    dashboardSettings?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedRoutesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    role?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    inn?: NullableStringFieldUpdateOperationsInput | string | null
    kpp?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    dashboardSettings?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RouteOptionUpsertWithWhereUniqueWithoutLogisticRouteInput = {
    where: RouteOptionWhereUniqueInput
    update: XOR<RouteOptionUpdateWithoutLogisticRouteInput, RouteOptionUncheckedUpdateWithoutLogisticRouteInput>
    create: XOR<RouteOptionCreateWithoutLogisticRouteInput, RouteOptionUncheckedCreateWithoutLogisticRouteInput>
  }

  export type RouteOptionUpdateWithWhereUniqueWithoutLogisticRouteInput = {
    where: RouteOptionWhereUniqueInput
    data: XOR<RouteOptionUpdateWithoutLogisticRouteInput, RouteOptionUncheckedUpdateWithoutLogisticRouteInput>
  }

  export type RouteOptionUpdateManyWithWhereWithoutLogisticRouteInput = {
    where: RouteOptionScalarWhereInput
    data: XOR<RouteOptionUpdateManyMutationInput, RouteOptionUncheckedUpdateManyWithoutLogisticRouteInput>
  }

  export type RouteOptionScalarWhereInput = {
    AND?: RouteOptionScalarWhereInput | RouteOptionScalarWhereInput[]
    OR?: RouteOptionScalarWhereInput[]
    NOT?: RouteOptionScalarWhereInput | RouteOptionScalarWhereInput[]
    id?: StringFilter<"RouteOption"> | string
    logisticRouteId?: StringFilter<"RouteOption"> | string
    name?: StringFilter<"RouteOption"> | string
    estimatedCost?: FloatFilter<"RouteOption"> | number
    estimatedTime?: IntFilter<"RouteOption"> | number
    transportType?: StringFilter<"RouteOption"> | string
    description?: StringNullableFilter<"RouteOption"> | string | null
    isSelected?: BoolFilter<"RouteOption"> | boolean
    createdAt?: DateTimeFilter<"RouteOption"> | Date | string
    updatedAt?: DateTimeFilter<"RouteOption"> | Date | string
  }

  export type LogisticRouteCreateWithoutRouteOptionsInput = {
    id?: string
    pickupAddress: string
    deliveryAddress: string
    estimatedDistance: number
    status?: string
    selectedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    order: OrderCreateNestedOneWithoutLogisticRoutesInput
    assignedLogistician: UserCreateNestedOneWithoutAssignedRoutesInput
  }

  export type LogisticRouteUncheckedCreateWithoutRouteOptionsInput = {
    id?: string
    orderId: string
    pickupAddress: string
    deliveryAddress: string
    estimatedDistance: number
    status?: string
    assignedLogisticianId: string
    selectedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LogisticRouteCreateOrConnectWithoutRouteOptionsInput = {
    where: LogisticRouteWhereUniqueInput
    create: XOR<LogisticRouteCreateWithoutRouteOptionsInput, LogisticRouteUncheckedCreateWithoutRouteOptionsInput>
  }

  export type LogisticRouteUpsertWithoutRouteOptionsInput = {
    update: XOR<LogisticRouteUpdateWithoutRouteOptionsInput, LogisticRouteUncheckedUpdateWithoutRouteOptionsInput>
    create: XOR<LogisticRouteCreateWithoutRouteOptionsInput, LogisticRouteUncheckedCreateWithoutRouteOptionsInput>
    where?: LogisticRouteWhereInput
  }

  export type LogisticRouteUpdateToOneWithWhereWithoutRouteOptionsInput = {
    where?: LogisticRouteWhereInput
    data: XOR<LogisticRouteUpdateWithoutRouteOptionsInput, LogisticRouteUncheckedUpdateWithoutRouteOptionsInput>
  }

  export type LogisticRouteUpdateWithoutRouteOptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    pickupAddress?: StringFieldUpdateOperationsInput | string
    deliveryAddress?: StringFieldUpdateOperationsInput | string
    estimatedDistance?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    selectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutLogisticRoutesNestedInput
    assignedLogistician?: UserUpdateOneRequiredWithoutAssignedRoutesNestedInput
  }

  export type LogisticRouteUncheckedUpdateWithoutRouteOptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    pickupAddress?: StringFieldUpdateOperationsInput | string
    deliveryAddress?: StringFieldUpdateOperationsInput | string
    estimatedDistance?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    assignedLogisticianId?: StringFieldUpdateOperationsInput | string
    selectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderCreateWithoutDocumentsInput = {
    id?: string
    materialType: string
    volume: number
    price: number
    environmentalImpact: number
    status?: string
    pickupAddress: string
    paymentStatus?: string
    paymentMethod?: string | null
    invoiceNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutOrdersInput
    logisticRoutes?: LogisticRouteCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutDocumentsInput = {
    id?: string
    userId: string
    materialType: string
    volume: number
    price: number
    environmentalImpact: number
    status?: string
    pickupAddress: string
    paymentStatus?: string
    paymentMethod?: string | null
    invoiceNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logisticRoutes?: LogisticRouteUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutDocumentsInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutDocumentsInput, OrderUncheckedCreateWithoutDocumentsInput>
  }

  export type OrderUpsertWithoutDocumentsInput = {
    update: XOR<OrderUpdateWithoutDocumentsInput, OrderUncheckedUpdateWithoutDocumentsInput>
    create: XOR<OrderCreateWithoutDocumentsInput, OrderUncheckedCreateWithoutDocumentsInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutDocumentsInput, OrderUncheckedUpdateWithoutDocumentsInput>
  }

  export type OrderUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialType?: StringFieldUpdateOperationsInput | string
    volume?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    environmentalImpact?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    pickupAddress?: StringFieldUpdateOperationsInput | string
    paymentStatus?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
    logisticRoutes?: LogisticRouteUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    materialType?: StringFieldUpdateOperationsInput | string
    volume?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    environmentalImpact?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    pickupAddress?: StringFieldUpdateOperationsInput | string
    paymentStatus?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logisticRoutes?: LogisticRouteUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderCreateManyUserInput = {
    id?: string
    materialType: string
    volume: number
    price: number
    environmentalImpact: number
    status?: string
    pickupAddress: string
    paymentStatus?: string
    paymentMethod?: string | null
    invoiceNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LogisticRouteCreateManyAssignedLogisticianInput = {
    id?: string
    orderId: string
    pickupAddress: string
    deliveryAddress: string
    estimatedDistance: number
    status?: string
    selectedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialType?: StringFieldUpdateOperationsInput | string
    volume?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    environmentalImpact?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    pickupAddress?: StringFieldUpdateOperationsInput | string
    paymentStatus?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logisticRoutes?: LogisticRouteUpdateManyWithoutOrderNestedInput
    documents?: OrderDocumentUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialType?: StringFieldUpdateOperationsInput | string
    volume?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    environmentalImpact?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    pickupAddress?: StringFieldUpdateOperationsInput | string
    paymentStatus?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logisticRoutes?: LogisticRouteUncheckedUpdateManyWithoutOrderNestedInput
    documents?: OrderDocumentUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    materialType?: StringFieldUpdateOperationsInput | string
    volume?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    environmentalImpact?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    pickupAddress?: StringFieldUpdateOperationsInput | string
    paymentStatus?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogisticRouteUpdateWithoutAssignedLogisticianInput = {
    id?: StringFieldUpdateOperationsInput | string
    pickupAddress?: StringFieldUpdateOperationsInput | string
    deliveryAddress?: StringFieldUpdateOperationsInput | string
    estimatedDistance?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    selectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutLogisticRoutesNestedInput
    routeOptions?: RouteOptionUpdateManyWithoutLogisticRouteNestedInput
  }

  export type LogisticRouteUncheckedUpdateWithoutAssignedLogisticianInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    pickupAddress?: StringFieldUpdateOperationsInput | string
    deliveryAddress?: StringFieldUpdateOperationsInput | string
    estimatedDistance?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    selectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    routeOptions?: RouteOptionUncheckedUpdateManyWithoutLogisticRouteNestedInput
  }

  export type LogisticRouteUncheckedUpdateManyWithoutAssignedLogisticianInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    pickupAddress?: StringFieldUpdateOperationsInput | string
    deliveryAddress?: StringFieldUpdateOperationsInput | string
    estimatedDistance?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    selectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogisticRouteCreateManyOrderInput = {
    id?: string
    pickupAddress: string
    deliveryAddress: string
    estimatedDistance: number
    status?: string
    assignedLogisticianId: string
    selectedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderDocumentCreateManyOrderInput = {
    id?: string
    documentType: string
    customerInfo: JsonNullValueInput | InputJsonValue
    orderDetails: JsonNullValueInput | InputJsonValue
    logisticsInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    generatedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LogisticRouteUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    pickupAddress?: StringFieldUpdateOperationsInput | string
    deliveryAddress?: StringFieldUpdateOperationsInput | string
    estimatedDistance?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    selectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedLogistician?: UserUpdateOneRequiredWithoutAssignedRoutesNestedInput
    routeOptions?: RouteOptionUpdateManyWithoutLogisticRouteNestedInput
  }

  export type LogisticRouteUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    pickupAddress?: StringFieldUpdateOperationsInput | string
    deliveryAddress?: StringFieldUpdateOperationsInput | string
    estimatedDistance?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    assignedLogisticianId?: StringFieldUpdateOperationsInput | string
    selectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    routeOptions?: RouteOptionUncheckedUpdateManyWithoutLogisticRouteNestedInput
  }

  export type LogisticRouteUncheckedUpdateManyWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    pickupAddress?: StringFieldUpdateOperationsInput | string
    deliveryAddress?: StringFieldUpdateOperationsInput | string
    estimatedDistance?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    assignedLogisticianId?: StringFieldUpdateOperationsInput | string
    selectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderDocumentUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: StringFieldUpdateOperationsInput | string
    customerInfo?: JsonNullValueInput | InputJsonValue
    orderDetails?: JsonNullValueInput | InputJsonValue
    logisticsInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderDocumentUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: StringFieldUpdateOperationsInput | string
    customerInfo?: JsonNullValueInput | InputJsonValue
    orderDetails?: JsonNullValueInput | InputJsonValue
    logisticsInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderDocumentUncheckedUpdateManyWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: StringFieldUpdateOperationsInput | string
    customerInfo?: JsonNullValueInput | InputJsonValue
    orderDetails?: JsonNullValueInput | InputJsonValue
    logisticsInfo?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RouteOptionCreateManyLogisticRouteInput = {
    id?: string
    name: string
    estimatedCost: number
    estimatedTime: number
    transportType: string
    description?: string | null
    isSelected?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RouteOptionUpdateWithoutLogisticRouteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    estimatedCost?: FloatFieldUpdateOperationsInput | number
    estimatedTime?: IntFieldUpdateOperationsInput | number
    transportType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RouteOptionUncheckedUpdateWithoutLogisticRouteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    estimatedCost?: FloatFieldUpdateOperationsInput | number
    estimatedTime?: IntFieldUpdateOperationsInput | number
    transportType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RouteOptionUncheckedUpdateManyWithoutLogisticRouteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    estimatedCost?: FloatFieldUpdateOperationsInput | number
    estimatedTime?: IntFieldUpdateOperationsInput | number
    transportType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}