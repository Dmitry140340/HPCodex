const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function createTestUsers() {
  console.log('üîÑ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã...\n');

  try {
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    const testPassword = 'test123456';
    const hashedPassword = await bcrypt.hash(testPassword, 10);

    // 1. –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    const client = await prisma.user.upsert({
      where: { email: 'client@test.com' },
      update: {},
      create: {
        email: 'client@test.com',
        password: hashedPassword,
        name: '–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç',
        isAdmin: false,
        companyName: '–û–û–û –¢–µ—Å—Ç –ö–ª–∏–µ–Ω—Ç',
        inn: '1234567890',
        kpp: '123456789'
      }
    });

    // 2. –°–æ–∑–¥–∞–µ–º –ª–æ–≥–∏—Å—Ç–∞
    const logist1 = await prisma.user.upsert({
      where: { email: 'logist1@logistic.com' },
      update: {},
      create: {
        email: 'logist1@logistic.com',
        password: hashedPassword,
        name: '–ò–≤–∞–Ω –õ–æ–≥–∏—Å—Ç–æ–≤',
        isAdmin: false,
        companyName: '–û–û–û –•–∏–º–∫–∞–ü–ª–∞—Å—Ç–∏–∫ –õ–æ–≥–∏—Å—Ç–∏–∫–∞',
        inn: '9876543210',
        kpp: '987654321'
      }
    });

    // 3. –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –ª–æ–≥–∏—Å—Ç–∞
    const logist2 = await prisma.user.upsert({
      where: { email: 'logist2@logistic.com' },
      update: {},
      create: {
        email: 'logist2@logistic.com',
        password: hashedPassword,
        name: '–ü–µ—Ç—Ä –ú–∞—Ä—à—Ä—É—Ç–æ–≤',
        isAdmin: false,
        companyName: '–û–û–û –•–∏–º–∫–∞–ü–ª–∞—Å—Ç–∏–∫ –õ–æ–≥–∏—Å—Ç–∏–∫–∞',
        inn: '5555555555',
        kpp: '555555555'
      }
    });

    // 4. –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    const manager = await prisma.user.upsert({
      where: { email: 'manager@manager.com' },
      update: {},
      create: {
        email: 'manager@manager.com',
        password: hashedPassword,
        name: '–ê–Ω–Ω–∞ –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤–∞',
        isAdmin: false,
        companyName: '–û–û–û –•–∏–º–∫–∞–ü–ª–∞—Å—Ç–∏–∫',
        inn: '1111111111',
        kpp: '111111111'
      }
    });

    // 5. –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const admin = await prisma.user.upsert({
      where: { email: 'admin@admin.com' },
      update: {},
      create: {
        email: 'admin@admin.com',
        password: hashedPassword,
        name: '–°—É–ø–µ—Ä –ê–¥–º–∏–Ω',
        isAdmin: true,
        companyName: '–û–û–û –•–∏–º–∫–∞–ü–ª–∞—Å—Ç–∏–∫',
        inn: '0000000000',
        kpp: '000000000'
      }
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n');
    
    console.log('üìã –î–ê–ù–ù–´–ï –î–õ–Ø –í–•–û–î–ê:');
    console.log('====================');
    console.log(`üîë –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${testPassword}\n`);
    
    console.log('üë§ –ö–õ–ò–ï–ù–¢ (–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã):');
    console.log(`   Email: client@test.com`);
    console.log(`   –ü–∞—Ä–æ–ª—å: ${testPassword}`);
    console.log(`   –†–æ–ª—å: –ö–ª–∏–µ–Ω—Ç\n`);
    
    console.log('üöö –õ–û–ì–ò–°–¢ 1 (–ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö):');
    console.log(`   Email: logist1@logistic.com`);
    console.log(`   –ü–∞—Ä–æ–ª—å: ${testPassword}`);
    console.log(`   –†–æ–ª—å: –õ–æ–≥–∏—Å—Ç\n`);
    
    console.log('üöõ –õ–û–ì–ò–°–¢ 2 (–ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö):');
    console.log(`   Email: logist2@logistic.com`);
    console.log(`   –ü–∞—Ä–æ–ª—å: ${testPassword}`);
    console.log(`   –†–æ–ª—å: –õ–æ–≥–∏—Å—Ç\n`);
    
    console.log('üëî –ú–ï–ù–ï–î–ñ–ï–† (—É–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑–∞–º–∏):');
    console.log(`   Email: manager@manager.com`);
    console.log(`   –ü–∞—Ä–æ–ª—å: ${testPassword}`);
    console.log(`   –†–æ–ª—å: –ú–µ–Ω–µ–¥–∂–µ—Ä\n`);
    
    console.log('üîß –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–† (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø):');
    console.log(`   Email: admin@admin.com`);
    console.log(`   –ü–∞—Ä–æ–ª—å: ${testPassword}`);
    console.log(`   –†–æ–ª—å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n`);

    console.log('üéØ –ü–õ–ê–ù –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('===================');
    console.log('1. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç (client@test.com) –∏ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑');
    console.log('2. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞–º');
    console.log('3. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ –ª–æ–≥–∏—Å—Ç (logist1@logistic.com) –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã');
    console.log('4. –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞');
    console.log('5. –°–∏—Å—Ç–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
    console.log('6. –í–æ–π–¥–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å\n');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createTestUsers();
