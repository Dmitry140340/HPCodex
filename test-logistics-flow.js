// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã

const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3001';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testAccounts = {
  client: { email: 'client@test.com', password: 'test123456' },
  logist1: { email: 'logist1@logistic.com', password: 'test123456' },
  logist2: { email: 'logist2@logistic.com', password: 'test123456' },
  manager: { email: 'manager@manager.com', password: 'test123456' },
  admin: { email: 'admin@admin.com', password: 'test123456' }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
async function makeRequest(endpoint, options = {}) {
  const url = `${BASE_URL}${endpoint}`;
  const defaultOptions = {
    headers: {
      'Content-Type': 'application/json',
    },
  };
  
  const mergedOptions = { ...defaultOptions, ...options };
  
  try {
    console.log(`üîÑ –ó–∞–ø—Ä–æ—Å: ${mergedOptions.method || 'GET'} ${url}`);
    const response = await fetch(url, mergedOptions);
    const data = await response.json();
    
    if (!response.ok) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ ${response.status}:`, data);
      return { error: true, status: response.status, data };
    }
    
    console.log(`‚úÖ –û—Ç–≤–µ—Ç ${response.status}:`, data);
    return { error: false, status: response.status, data };
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:`, error.message);
    return { error: true, message: error.message };
  }
}

// –§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
async function login(email, password) {
  return await makeRequest('/api/auth/signin', {
    method: 'POST',
    body: JSON.stringify({ email, password })
  });
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
async function createOrder(token, orderData) {
  return await makeRequest('/api/orders', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(orderData)
  });
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
async function getLogisticRoutes(token) {
  return await makeRequest('/api/logistics/routes', {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞
async function selectRoute(token, routeId, optionId) {
  return await makeRequest('/api/logistics/routes/select', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      routeId: routeId,
      selectedOptionId: optionId
    })
  });
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserOrders(token) {
  return await makeRequest('/api/orders/my', {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
    }
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runLogisticsTest() {
  console.log('üéØ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –õ–û–ì–ò–°–¢–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´');
  console.log('==============================================================\n');
  
  let clientToken, logistToken, orderId, routeId;
  
  try {
    // –®–ê–ì 1: –í—Ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º—É
    console.log('üìã –®–ê–ì 1: –í—Ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º—É');
    console.log('================================');
    const clientLogin = await login(testAccounts.client.email, testAccounts.client.password);
    if (clientLogin.error) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç');
    }
    clientToken = clientLogin.data.token;
    console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É\n');
    
    // –®–ê–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–º
    console.log('üìã –®–ê–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–º');
    console.log('==================================');
    const orderData = {
      materialType: 'HDPE',
      volume: 100,
      pickupAddress: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1'
    };
    
    const orderResponse = await createOrder(clientToken, orderData);
    if (orderResponse.error) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑');
    }
    orderId = orderResponse.data.id;
    console.log(`‚úÖ –ó–∞–∫–∞–∑ ‚Ññ${orderId} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`);
    console.log('‚ú® –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã –∏ —É–≤–µ–¥–æ–º–∏—Ç—å –ª–æ–≥–∏—Å—Ç–æ–≤\n');
    
    // –®–ê–ì 3: –í—Ö–æ–¥ –ª–æ–≥–∏—Å—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º—É
    console.log('üìã –®–ê–ì 3: –í—Ö–æ–¥ –ª–æ–≥–∏—Å—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º—É');
    console.log('=================================');
    const logistLogin = await login(testAccounts.logist1.email, testAccounts.logist1.password);
    if (logistLogin.error) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –∫–∞–∫ –ª–æ–≥–∏—Å—Ç');
    }
    logistToken = logistLogin.data.token;
    console.log('‚úÖ –õ–æ–≥–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É\n');
    
    // –®–ê–ì 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ª–æ–≥–∏—Å—Ç–æ–º
    console.log('üìã –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤');
    console.log('==================================');
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const routesResponse = await getLogisticRoutes(logistToken);
    if (routesResponse.error) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã');
    }
    
    const routes = routesResponse.data;
    const newOrderRoute = routes.find(route => route.orderId === orderId);
    
    if (!newOrderRoute) {
      throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}`);
    }
    
    routeId = newOrderRoute.id;
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –º–∞—Ä—à—Ä—É—Ç ‚Ññ${routeId} –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ${orderId}`);
    console.log(`üì¶ –í–∞—Ä–∏–∞–Ω—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤: ${newOrderRoute.routeOptions.length} —à—Ç.`);
    
    newOrderRoute.routeOptions.forEach((option, index) => {
      console.log(`   ${index + 1}. ${option.name} - ${option.estimatedCost}‚ÇΩ (${option.estimatedTime}—á)`);
    });
    console.log('');
    
    // –®–ê–ì 5: –í—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞ –ª–æ–≥–∏—Å—Ç–æ–º
    console.log('üìã –®–ê–ì 5: –í—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞ –ª–æ–≥–∏—Å—Ç–æ–º');
    console.log('=================================');
    
    // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
    const selectedOption = newOrderRoute.routeOptions[0];
    const selectResponse = await selectRoute(logistToken, routeId, selectedOption.id);
    
    if (selectResponse.error) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç');
    }
    
    console.log(`‚úÖ –õ–æ–≥–∏—Å—Ç –≤—ã–±—Ä–∞–ª –º–∞—Ä—à—Ä—É—Ç: ${selectedOption.name}`);
    console.log('‚ú® –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏ —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞\n');
    
    // –®–ê–ì 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
    console.log('üìã –®–ê–ì 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–º');
    console.log('==========================================');
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const ordersResponse = await getUserOrders(clientToken);
    if (ordersResponse.error) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞');
    }
    
    const updatedOrder = ordersResponse.data.find(order => order.id === orderId);
    if (!updatedOrder) {
      throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ ${orderId} –≤ —Å–ø–∏—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞`);
    }
    
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: ${updatedOrder.status}`);
    console.log(`üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${updatedOrder.price}‚ÇΩ`);
    console.log(`üå± –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç: ${updatedOrder.environmentalImpact.toFixed(2)} –∫–≥ CO‚ÇÇ\n`);
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log('üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!');
    console.log('==================================');
    console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–ª –∑–∞–∫–∞–∑');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–ª–∞ –º–∞—Ä—à—Ä—É—Ç—ã');
    console.log('‚úÖ –õ–æ–≥–∏—Å—Ç –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –≤—ã–±—Ä–∞–ª –º–∞—Ä—à—Ä—É—Ç');
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–∏–ª—Å—è');
    console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
    console.log('\nüéØ –õ–û–ì–ò–°–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û! üéØ');
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:', error.message);
    console.log('\nüîß –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:');
    console.log('‚Ä¢ –°–µ—Ä–≤–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã (backend –Ω–∞ :3001, frontend –Ω–∞ :3000)');
    console.log('‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
    console.log('‚Ä¢ –û—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ API');
    console.log('‚Ä¢ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã');
    
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
console.log('‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...\n');
setTimeout(runLogisticsTest, 5000);
