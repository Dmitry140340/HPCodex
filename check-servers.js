// –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤

const fetch = require('node-fetch');

async function checkServers() {
  console.log('üîç –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ï–†–í–ï–†–û–í');
  console.log('============================');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ backend
  try {
    const response = await fetch('http://localhost:3001/api/health', { timeout: 3000 });
    if (response.ok) {
      console.log('‚úÖ Backend (–ø–æ—Ä—Ç 3001): –†–ê–ë–û–¢–ê–ï–¢');
    } else {
      console.log('‚ùå Backend (–ø–æ—Ä—Ç 3001): –û–®–ò–ë–ö–ê HTTP', response.status);
    }
  } catch (error) {
    console.log('‚ùå Backend (–ø–æ—Ä—Ç 3001): –ù–ï –î–û–°–¢–£–ü–ï–ù');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend
  try {
    const response = await fetch('http://localhost:3000', { timeout: 3000 });
    if (response.ok) {
      console.log('‚úÖ Frontend (–ø–æ—Ä—Ç 3000): –†–ê–ë–û–¢–ê–ï–¢');
    } else {
      console.log('‚ùå Frontend (–ø–æ—Ä—Ç 3000): –û–®–ò–ë–ö–ê HTTP', response.status);
    }
  } catch (error) {
    console.log('‚ùå Frontend (–ø–æ—Ä—Ç 3000): –ù–ï –î–û–°–¢–£–ü–ï–ù');
  }
  
  console.log('\nüìã –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:');
  console.log('–ï—Å–ª–∏ –æ–±–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞—é—Ç, –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫—É!');
  console.log('–ï—Å–ª–∏ –Ω–µ—Ç - –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä—ã –∫–æ–º–∞–Ω–¥–∞–º–∏:');
  console.log('  Backend: cd ecotrack && npm start');
  console.log('  Frontend: cd ecotrack-frontend && npm run dev');
}

checkServers();
