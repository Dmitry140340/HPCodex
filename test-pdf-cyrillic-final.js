/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
 */

const fs = require('fs');
const path = require('path');

console.log('üß™ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –≠–ö–°–ü–û–†–¢–ê PDF –° –ö–ò–†–ò–õ–õ–ò–¶–ï–ô');
console.log('='.repeat(50));

// –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
const projectPath = __dirname;
const frontendPath = path.join(projectPath, 'ecotrack-frontend');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤
function checkFiles() {
  console.log('\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:');
  
  const filesToCheck = [
    { path: path.join(frontendPath, 'src', 'utils', 'fontGenerator.ts'), name: 'fontGenerator.ts' },
    { path: path.join(frontendPath, 'src', 'App.tsx'), name: 'App.tsx' },
    { path: path.join(frontendPath, 'src', 'utils', 'api.ts'), name: 'api.ts' },
    { path: path.join(frontendPath, 'package.json'), name: 'package.json' }
  ];
  
  filesToCheck.forEach(file => {
    const exists = fs.existsSync(file.path);
    console.log(`   ${file.name}: ${exists ? '‚úÖ' : '‚ùå'}`);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ fontGenerator.ts
function checkFontGenerator() {
  console.log('\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ fontGenerator.ts:');
  
  const fontGeneratorPath = path.join(frontendPath, 'src', 'utils', 'fontGenerator.ts');
  
  if (fs.existsSync(fontGeneratorPath)) {
    const content = fs.readFileSync(fontGeneratorPath, 'utf8');
    
    const checks = [
      { test: content.includes('export function initCyrillicFont'), name: 'initCyrillicFont —Ñ—É–Ω–∫—Ü–∏—è' },
      { test: content.includes('export function addCyrillicText'), name: 'addCyrillicText —Ñ—É–Ω–∫—Ü–∏—è' },
      { test: content.includes('export function prepareCyrillicText'), name: 'prepareCyrillicText —Ñ—É–Ω–∫—Ü–∏—è' },
      { test: content.includes('export function testCyrillicSupport'), name: 'testCyrillicSupport —Ñ—É–Ω–∫—Ü–∏—è' },
      { test: content.includes('cyrillicMap'), name: '—Ç–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏' },
      { test: content.includes('–ê': 'A'), name: '–∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤' }
    ];
    
    checks.forEach(check => {
      console.log(`   ${check.name}: ${check.test ? '‚úÖ' : '‚ùå'}`);
    });
  } else {
    console.log('   ‚ùå –§–∞–π–ª fontGenerator.ts –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ App.tsx
function checkAppIntegration() {
  console.log('\n‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ App.tsx:');
  
  const appPath = path.join(frontendPath, 'src', 'App.tsx');
  
  if (fs.existsSync(appPath)) {
    const content = fs.readFileSync(appPath, 'utf8');
    
    const checks = [
      { test: content.includes('handleExportAnalytics'), name: '—Ñ—É–Ω–∫—Ü–∏—è handleExportAnalytics' },
      { test: content.includes('fontGenerator'), name: '–∏–º–ø–æ—Ä—Ç fontGenerator' },
      { test: content.includes('initCyrillicFont'), name: '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ initCyrillicFont' },
      { test: content.includes('addCyrillicText'), name: '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ addCyrillicText' },
      { test: content.includes('jsPDF'), name: '–∏–º–ø–æ—Ä—Ç jsPDF' }
    ];
    
    checks.forEach(check => {
      console.log(`   ${check.name}: ${check.test ? '‚úÖ' : '‚ùå'}`);
    });
  } else {
    console.log('   ‚ùå –§–∞–π–ª App.tsx –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
function checkApiIntegration() {
  console.log('\nüîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ api.ts:');
  
  const apiPath = path.join(frontendPath, 'src', 'utils', 'api.ts');
  
  if (fs.existsSync(apiPath)) {
    const content = fs.readFileSync(apiPath, 'utf8');
    
    const checks = [
      { test: content.includes('exportYearlyReport'), name: '—Ñ—É–Ω–∫—Ü–∏—è exportYearlyReport' },
      { test: content.includes('fontGenerator'), name: '–∏–º–ø–æ—Ä—Ç fontGenerator' },
      { test: content.includes('initCyrillicFont'), name: '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ initCyrillicFont' },
      { test: content.includes('addCyrillicText'), name: '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ addCyrillicText' }
    ];
    
    checks.forEach(check => {
      console.log(`   ${check.name}: ${check.test ? '‚úÖ' : '‚ùå'}`);
    });
  } else {
    console.log('   ‚ùå –§–∞–π–ª api.ts –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function checkDependencies() {
  console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:');
  
  const packageJsonPath = path.join(frontendPath, 'package.json');
  
  if (fs.existsSync(packageJsonPath)) {
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };
    
    const requiredDeps = [
      { name: 'jspdf', required: true },
      { name: 'jspdf-autotable', required: true },
      { name: 'react', required: true },
      { name: 'typescript', required: true }
    ];
    
    requiredDeps.forEach(dep => {
      const hasVersion = dependencies[dep.name];
      console.log(`   ${dep.name}: ${hasVersion ? `‚úÖ (${hasVersion})` : '‚ùå'}`);
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
function generateTestInstructions() {
  console.log('\nüìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ:');
  console.log('='.repeat(50));
  
  console.log(`
1. üåê –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:3000
2. üîê –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
3. üìä –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
4. üìÑ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF"
5. üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–∫–∞—á–∞–Ω–Ω—ã–π PDF —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Ç–∞–µ–º—ã–π —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
6. üìà –¢–∞–∫–∂–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç –≥–æ–¥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
7. üéØ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–µ—Ç –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤ –∏–ª–∏ –Ω–µ—á–∏—Ç–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤

üîß –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:
‚úÖ PDF —Ñ–∞–π–ª—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
‚úÖ –î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö —á–∏—Ç–∞–µ–º—ã
‚úÖ –ù–µ—Ç –∏—Å–∫–∞–∂–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤

‚ö†Ô∏è  FALLBACK –ü–û–í–ï–î–ï–ù–ò–ï:
–ï—Å–ª–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
- –ü–æ–ø—Ä–æ–±—É–µ—Ç —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é (–ê ‚Üí A, –ë ‚Üí B, –∏ —Ç.–¥.)
- –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –∑–∞–º–µ–Ω–∏—Ç —Å–∏–º–≤–æ–ª—ã –Ω–∞ "?"
`);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  try {
    checkFiles();
    checkFontGenerator();
    checkAppIntegration(); 
    checkApiIntegration();
    checkDependencies();
    generateTestInstructions();
    
    console.log('\nüéâ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!');
    console.log('–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ PDF —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.');
    console.log('–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ.');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫
main();
