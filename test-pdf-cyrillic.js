/**
 * –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF —Å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–π —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –≥–æ–¥–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
 */

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF
async function testPDFExport() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF —Å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º...\n');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    const frontendPath = path.join(__dirname, 'ecotrack-frontend');
    const fontGeneratorPath = path.join(frontendPath, 'src', 'utils', 'fontGenerator.js');
    const apiPath = path.join(frontendPath, 'src', 'utils', 'api.ts');
    const appPath = path.join(frontendPath, 'src', 'App.tsx');
    
    console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤:');
    console.log(`   fontGenerator.js: ${fs.existsSync(fontGeneratorPath) ? '‚úÖ' : '‚ùå'}`);
    console.log(`   api.ts: ${fs.existsSync(apiPath) ? '‚úÖ' : '‚ùå'}`);
    console.log(`   App.tsx: ${fs.existsSync(appPath) ? '‚úÖ' : '‚ùå'}\n`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ fontGenerator.js
    if (fs.existsSync(fontGeneratorPath)) {
      const fontGeneratorContent = fs.readFileSync(fontGeneratorPath, 'utf8');
      const hasInitFunction = fontGeneratorContent.includes('export function initCyrillicFont');
      const hasAddTextFunction = fontGeneratorContent.includes('export function addCyrillicText');
      const hasTransliterationFunction = fontGeneratorContent.includes('export function prepareCyrillicText');
      
      console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –≤ fontGenerator.js:');
      console.log(`   initCyrillicFont: ${hasInitFunction ? '‚úÖ' : '‚ùå'}`);
      console.log(`   addCyrillicText: ${hasAddTextFunction ? '‚úÖ' : '‚ùå'}`);
      console.log(`   prepareCyrillicText: ${hasTransliterationFunction ? '‚úÖ' : '‚ùå'}\n`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ exportYearlyReport –≤ api.ts
    if (fs.existsSync(apiPath)) {
      const apiContent = fs.readFileSync(apiPath, 'utf8');
      const hasExportYearlyReport = apiContent.includes('exportYearlyReport');
      const hasImportFontGenerator = apiContent.includes('fontGenerator');
      
      console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ API –º–µ—Ç–æ–¥–æ–≤:');
      console.log(`   exportYearlyReport: ${hasExportYearlyReport ? '‚úÖ' : '‚ùå'}`);
      console.log(`   –∏–º–ø–æ—Ä—Ç fontGenerator: ${hasImportFontGenerator ? '‚úÖ' : '‚ùå'}\n`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ App.tsx
    if (fs.existsSync(appPath)) {
      const appContent = fs.readFileSync(appPath, 'utf8');
      const hasUpdatedAnalyticsExport = appContent.includes('addCyrillicText') && 
                                        appContent.includes('handleExportAnalytics');
      const hasUpdatedYearlyExport = appContent.includes('handleExportYearlyReport') &&
                                     appContent.includes('toast');
      
      console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ App.tsx:');
      console.log(`   –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π handleExportAnalytics: ${hasUpdatedAnalyticsExport ? '‚úÖ' : '‚ùå'}`);
      console.log(`   –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π handleExportYearlyReport: ${hasUpdatedYearlyExport ? '‚úÖ' : '‚ùå'}\n`);
    }
    
    // –°–∏–º—É–ª—è—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const testData = {
      analytics: {
        totalOrders: 25,
        totalEarnings: 125000,
        totalEnvironmentalImpact: 450.5,
        recycledByMaterial: {
          '–ü–≠–¢ –ø–ª–∞—Å—Ç–∏–∫': 150.2,
          'HDPE': 200.3,
          '–ü–æ–ª–∏–ø—Ä–æ–ø–∏–ª–µ–Ω': 100.0
        }
      },
      yearlyReports: [
        { month: 1, monthName: '–Ø–Ω–≤–∞—Ä—å', totalPaid: 15000, volume: 50 },
        { month: 2, monthName: '–§–µ–≤—Ä–∞–ª—å', totalPaid: 18000, volume: 60 },
        { month: 3, monthName: '–ú–∞—Ä—Ç', totalPaid: 22000, volume: 75 }
      ]
    };
    
    console.log('üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:');
    console.log(`   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: ${testData.analytics.totalOrders}`);
    console.log(`   –û–±—â–∏–π –¥–æ—Ö–æ–¥: ‚ÇΩ${testData.analytics.totalEarnings}`);
    console.log(`   –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ: ${testData.analytics.totalEnvironmentalImpact} –∫–≥ CO2`);
    console.log(`   –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏:`);
    Object.entries(testData.analytics.recycledByMaterial).forEach(([material, volume]) => {
      console.log(`     - ${material}: ${volume} –∫–≥`);
    });
    console.log(`   –ì–æ–¥–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã: ${testData.yearlyReports.length} –º–µ—Å—è—Ü–∞\n`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
    const testStrings = [
      '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º',
      '–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥',
      '–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ',
      '–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
      '–ì–æ–¥–æ–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç',
      '–ü–≠–¢ –ø–ª–∞—Å—Ç–∏–∫',
      '–ü–æ–ª–∏–ø—Ä–æ–ø–∏–ª–µ–Ω'
    ];
    
    console.log('üî§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–æ–∫:');
    testStrings.forEach(str => {
      const hasCyrillic = /[–ê-–Ø–∞-—è–Å—ë]/.test(str);
      console.log(`   "${str}": ${hasCyrillic ? 'üá∑üá∫ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞' : 'üî§ –ª–∞—Ç–∏–Ω–∏—Ü–∞'}`);
    });
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –†–ï–ó–Æ–ú–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:');
    console.log('1. ‚úÖ –°–æ–∑–¥–∞–Ω —É–ª—É—á—à–µ–Ω–Ω—ã–π fontGenerator.js —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8');
    console.log('2. ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ exportYearlyReport –≤ API –∫–ª–∏–µ–Ω—Ç');
    console.log('3. ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω handleExportAnalytics —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º addCyrillicText');
    console.log('4. ‚úÖ –£–ª—É—á—à–µ–Ω handleExportYearlyReport —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏');
    console.log('5. ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã –¥–ª—è –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –≤–µ—Ä—Å–∏–π jsPDF');
    
    console.log('\nüöÄ –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–û–±–∑–æ—Ä"');
    console.log('   - –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ PDF"');
    console.log('   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–§–∏–Ω–∞–Ω—Å—ã" –∏ –Ω–∞–∂–º–∏—Ç–µ "–≠–∫—Å–ø–æ—Ä—Ç –≥–æ–¥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"');
    console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ PDF');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testPDFExport();
