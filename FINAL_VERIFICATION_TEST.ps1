# Final End-to-End Verification Test
# This script validates that both critical issues have been resolved

Write-Host "üéØ FINAL END-TO-END VERIFICATION TEST" -ForegroundColor Cyan
Write-Host "=====================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "Testing EcoTrack Critical Issues Resolution:" -ForegroundColor Yellow
Write-Host "‚Ä¢ Issue #1: Dashboard widget settings not saving" -ForegroundColor Yellow  
Write-Host "‚Ä¢ Issue #2: Analytics tab map() error" -ForegroundColor Yellow
Write-Host ""

$baseUrl = "http://localhost:3001"
$success = $true

# Test 1: Check server availability
Write-Host "1Ô∏è‚É£ Checking backend server availability..." -ForegroundColor Cyan
try {
    $healthResponse = Invoke-RestMethod -Uri "$baseUrl/api/health" -Method GET -TimeoutSec 5
    Write-Host "   ‚úÖ Backend server is running" -ForegroundColor Green
} catch {
    Write-Host "   ‚ùå Backend server is not accessible" -ForegroundColor Red
    Write-Host "   Please ensure backend server is running on port 3001" -ForegroundColor Yellow
    $success = $false
}

if (-not $success) {
    Write-Host ""
    Write-Host "‚ö†Ô∏è  Cannot proceed - backend server not running" -ForegroundColor Yellow
    exit 1
}

# Test 2: Authentication
Write-Host ""
Write-Host "2Ô∏è‚É£ Testing authentication..." -ForegroundColor Cyan
$loginData = @{
    email = "test@example.com"
    password = "password123"
} | ConvertTo-Json

try {
    $loginResponse = Invoke-RestMethod -Uri "$baseUrl/api/auth/login" -Method POST -Body $loginData -ContentType "application/json"
    $token = $loginResponse.token
    Write-Host "   ‚úÖ Login successful" -ForegroundColor Green
    Write-Host "   Token: $token" -ForegroundColor Gray
} catch {
    Write-Host "   ‚ùå Login failed: $($_.Exception.Message)" -ForegroundColor Red
    $success = $false
}

if (-not $success) {
    Write-Host ""
    Write-Host "‚ö†Ô∏è  Cannot proceed - authentication failed" -ForegroundColor Yellow
    exit 1
}

$authHeaders = @{
    "Authorization" = "Bearer $token"
    "Content-Type" = "application/json"
}

# Test 3: Analytics API (Issue #2)
Write-Host ""
Write-Host "3Ô∏è‚É£ Testing Analytics API (Issue #2 - Map() Error Fix)..." -ForegroundColor Cyan
try {
    $analytics = Invoke-RestMethod -Uri "$baseUrl/api/analytics" -Method GET -Headers $authHeaders
    
    # Validate arrays exist and are proper type
    $hasMonthlyData = $analytics.monthlyData -is [array]
    $hasMaterialBreakdown = $analytics.materialBreakdown -is [array]  
    $hasOrderStatusBreakdown = $analytics.orderStatusBreakdown -is [array]
    
    if ($hasMonthlyData -and $hasMaterialBreakdown -and $hasOrderStatusBreakdown) {
        Write-Host "   ‚úÖ Analytics returns proper array structures for map() operations" -ForegroundColor Green
        Write-Host "   ‚Ä¢ monthlyData: Array with $($analytics.monthlyData.Count) items" -ForegroundColor Gray
        Write-Host "   ‚Ä¢ materialBreakdown: Array with $($analytics.materialBreakdown.Count) items" -ForegroundColor Gray
        Write-Host "   ‚Ä¢ orderStatusBreakdown: Array with $($analytics.orderStatusBreakdown.Count) items" -ForegroundColor Gray
        Write-Host "   ‚Ä¢ totalOrders: $($analytics.totalOrders)" -ForegroundColor Gray
        Write-Host "   ‚Ä¢ totalVolume: $($analytics.totalVolume) kg" -ForegroundColor Gray
    } else {
        Write-Host "   ‚ùå Analytics API still returning incompatible data structure" -ForegroundColor Red
        $success = $false
    }
} catch {
    Write-Host "   ‚ùå Analytics API failed: $($_.Exception.Message)" -ForegroundColor Red
    $success = $false
}

# Test 4: Profile Update API (Issue #1)
Write-Host ""
Write-Host "4Ô∏è‚É£ Testing Profile Update API (Issue #1 - Dashboard Settings Fix)..." -ForegroundColor Cyan

# First get current profile
try {
    $currentProfile = Invoke-RestMethod -Uri "$baseUrl/api/user/me" -Method GET -Headers $authHeaders
    Write-Host "   ‚úÖ GET /api/user/me working" -ForegroundColor Green
} catch {
    Write-Host "   ‚ùå GET /api/user/me failed: $($_.Exception.Message)" -ForegroundColor Red
    $success = $false
}

# Test profile update with dashboard settings
if ($success) {
    $updateData = @{
        name = $currentProfile.name
        email = $currentProfile.email
        dashboardWidgets = @{
            showAnalytics = $true
            showRecentOrders = $false
            showEnvironmentalImpact = $true
            chartType = "bar"
            refreshInterval = 30
        }
    } | ConvertTo-Json -Depth 3
    
    try {
        $updateResponse = Invoke-RestMethod -Uri "$baseUrl/api/user/me" -Method PUT -Body $updateData -Headers $authHeaders
        Write-Host "   ‚úÖ PUT /api/user/me working - dashboard settings can be saved" -ForegroundColor Green
        
        # Verify settings persist
        $verifyProfile = Invoke-RestMethod -Uri "$baseUrl/api/user/me" -Method GET -Headers $authHeaders
        if ($verifyProfile.dashboardWidgets) {
            Write-Host "   ‚úÖ Dashboard settings persisted successfully" -ForegroundColor Green
        } else {
            Write-Host "   ‚ö†Ô∏è  Settings saved but structure may differ from expected" -ForegroundColor Yellow
        }
        
    } catch {
        Write-Host "   ‚ùå PUT /api/user/me failed: $($_.Exception.Message)" -ForegroundColor Red
        $success = $false
    }
}

# Test 5: Frontend availability
Write-Host ""
Write-Host "5Ô∏è‚É£ Checking frontend server..." -ForegroundColor Cyan
try {
    $frontendResponse = Invoke-WebRequest -Uri "http://localhost:3000" -Method GET -TimeoutSec 5
    if ($frontendResponse.StatusCode -eq 200) {
        Write-Host "   ‚úÖ Frontend server is running on http://localhost:3000" -ForegroundColor Green
    }
} catch {
    Write-Host "   ‚ö†Ô∏è  Frontend server may not be running on port 3000" -ForegroundColor Yellow
    Write-Host "   Please start with: cd ecotrack-frontend; npm start" -ForegroundColor Gray
}

# Final Results
Write-Host ""
Write-Host "üéâ FINAL VERIFICATION RESULTS" -ForegroundColor Cyan
Write-Host "============================" -ForegroundColor Cyan

if ($success) {
    Write-Host ""
    Write-Host "‚úÖ ALL CRITICAL ISSUES RESOLVED!" -ForegroundColor Green
    Write-Host ""
    Write-Host "Issue #1 (Dashboard Settings): ‚úÖ FIXED" -ForegroundColor Green
    Write-Host "‚Ä¢ PUT /api/user/me endpoint is working correctly" -ForegroundColor Gray
    Write-Host "‚Ä¢ Dashboard widget settings can be saved and retrieved" -ForegroundColor Gray
    Write-Host ""
    Write-Host "Issue #2 (Analytics Map Error): ‚úÖ FIXED" -ForegroundColor Green  
    Write-Host "‚Ä¢ Analytics API returns proper array structures" -ForegroundColor Gray
    Write-Host "‚Ä¢ Frontend .map() operations will work without errors" -ForegroundColor Gray
    Write-Host ""
    Write-Host "üåê Application URLs:" -ForegroundColor Cyan
    Write-Host "‚Ä¢ Frontend: http://localhost:3000" -ForegroundColor Cyan
    Write-Host "‚Ä¢ Backend:  http://localhost:3001" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "üöÄ APPLICATION IS READY FOR USE!" -ForegroundColor Green
} else {
    Write-Host ""
    Write-Host "‚ùå SOME ISSUES REMAIN" -ForegroundColor Red
    Write-Host "Please review the test results above and address any failing tests." -ForegroundColor Yellow
}

Write-Host ""
Write-Host "End of verification test." -ForegroundColor Gray
