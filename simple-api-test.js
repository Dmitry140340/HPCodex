// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è

const fetch = require('node-fetch');

async function testAPI() {
  console.log('üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ECOTRACK');
  console.log('============================\n');
  
  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
  try {
    console.log('üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ backend —Å–µ—Ä–≤–µ—Ä–∞...');
    const healthResponse = await fetch('http://localhost:3001/api/health');
    if (healthResponse.ok) {
      console.log('‚úÖ Backend —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
    } else {
      console.log('‚ùå Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
    }
  } catch (error) {
    console.log('‚ùå Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
  }
  
  // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
  try {
    console.log('üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend —Å–µ—Ä–≤–µ—Ä–∞...');
    const frontendResponse = await fetch('http://localhost:3000');
    if (frontendResponse.ok) {
      console.log('‚úÖ Frontend —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
    } else {
      console.log('‚ùå Frontend —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
    }
  } catch (error) {
    console.log('‚ùå Frontend —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
  }
  
  // –¢–µ—Å—Ç 3: –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  try {
    console.log('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞...');
    const loginResponse = await fetch('http://localhost:3001/api/auth/signin', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'client@test.com',
        password: 'test123456'
      })
    });
    
    if (loginResponse.ok) {
      const loginData = await loginResponse.json();
      console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–∞');
      console.log('üîë –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', loginData.token ? '–î–ê' : '–ù–ï–¢');
      
      if (loginData.token) {
        // –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        console.log('üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞...');
        const orderResponse = await fetch('http://localhost:3001/api/orders', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${loginData.token}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            materialType: 'HDPE',
            volume: 50,
            pickupAddress: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1'
          })
        });
        
        if (orderResponse.ok) {
          const orderData = await orderResponse.json();
          console.log('‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
          console.log('üìã ID –∑–∞–∫–∞–∑–∞:', orderData.id);
          console.log('üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:', orderData.price, '‚ÇΩ');
          console.log('üå± –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç:', orderData.environmentalImpact, '–∫–≥ CO‚ÇÇ');
          
          // –¢–µ—Å—Ç 5: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Å—Ç–∞
          console.log('üöö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏—Å—Ç–∞...');
          const logistLoginResponse = await fetch('http://localhost:3001/api/auth/signin', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              email: 'logist1@logistic.com',
              password: 'test123456'
            })
          });
          
          if (logistLoginResponse.ok) {
            const logistData = await logistLoginResponse.json();
            console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Å—Ç–∞ —É—Å–ø–µ—à–Ω–∞');
            
            // –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
            console.log('üó∫Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤...');
            const routesResponse = await fetch('http://localhost:3001/api/logistics/routes', {
              headers: {
                'Authorization': `Bearer ${logistData.token}`,
              }
            });
            
            if (routesResponse.ok) {
              const routes = await routesResponse.json();
              console.log('‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã');
              console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤:', routes.length);
              
              // –ù–∞–π–¥–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –Ω–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞
              const orderRoute = routes.find(route => route.orderId === orderData.id);
              if (orderRoute) {
                console.log('üéØ –ù–∞–π–¥–µ–Ω –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞');
                console.log('üìã –í–∞—Ä–∏–∞–Ω—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤:', orderRoute.routeOptions.length);
                
                if (orderRoute.routeOptions.length > 0) {
                  const firstOption = orderRoute.routeOptions[0];
                  console.log('üöõ –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –º–∞—Ä—à—Ä—É—Ç:', firstOption.name);
                  
                  // –¢–µ—Å—Ç 7: –í—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞
                  const selectResponse = await fetch('http://localhost:3001/api/logistics/routes/select', {
                    method: 'POST',
                    headers: {
                      'Authorization': `Bearer ${logistData.token}`,
                      'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                      routeId: orderRoute.id,
                      selectedOptionId: firstOption.id
                    })
                  });
                  
                  if (selectResponse.ok) {
                    console.log('‚úÖ –ú–∞—Ä—à—Ä—É—Ç –≤—ã–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ');
                    
                    // –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
                    setTimeout(async () => {
                      console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞...');
                      const updatedOrdersResponse = await fetch('http://localhost:3001/api/orders/my', {
                        headers: {
                          'Authorization': `Bearer ${loginData.token}`,
                        }
                      });
                      
                      if (updatedOrdersResponse.ok) {
                        const orders = await updatedOrdersResponse.json();
                        const updatedOrder = orders.find(order => order.id === orderData.id);
                        if (updatedOrder) {
                          console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:', updatedOrder.status);
                          console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
                          console.log('================================================');
                          console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã');
                          console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã');
                          console.log('‚úÖ –õ–æ–≥–∏—Å—Ç –º–æ–∂–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã');
                          console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
                          console.log('‚úÖ –õ–û–ì–ò–°–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢! üöÄ');
                        }
                      }
                    }, 2000);
                  } else {
                    console.log('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞');
                  }
                }
              } else {
                console.log('‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
              }
            } else {
              console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤');
            }
          } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏—Å—Ç–∞');
          }
        } else {
          console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞');
        }
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

testAPI();
